{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "OxlintConfig",
  "description": "Oxlint Configuration File\n\nThis configuration is aligned with ESLint v8's configuration schema (`eslintrc.json`).\n\nUsage: `oxlint -c oxlintrc.json`\n\n::: danger NOTE\n\nOnly the `.json` format is supported.\n\n:::\n\nExample\n\n`.oxlintrc.json`\n\n```json { \"env\": { \"browser\": true }, \"globals\": { \"foo\": \"readonly\" }, \"settings\": { }, \"rules\": { \"eqeqeq\": \"warn\" } } ```",
  "type": "object",
  "properties": {
    "env": {
      "$ref": "#/definitions/OxlintEnv"
    },
    "globals": {
      "$ref": "#/definitions/OxlintGlobals"
    },
    "rules": {
      "description": "See [Oxlint Rules](./rules)",
      "allOf": [
        {
          "$ref": "#/definitions/OxlintRules"
        }
      ]
    },
    "settings": {
      "$ref": "#/definitions/OxlintSettings"
    }
  },
  "definitions": {
    "AllowWarnDeny": {
      "oneOf": [
        {
          "description": "Oxlint rule.\n- \"allow\" or \"off\": Turn off the rule.\n- \"warn\": Turn the rule on as a warning (doesn't affect exit code).\n- \"error\" or \"deny\": Turn the rule on as an error (will exit with a failure code).",
          "type": "string",
          "enum": [
            "allow",
            "off",
            "warn",
            "error",
            "deny"
          ]
        },
        {
          "description": "Oxlint rule.\n    \n- 0: Turn off the rule.\n- 1: Turn the rule on as a warning (doesn't affect exit code).\n- 2: Turn the rule on as an error (will exit with a failure code).",
          "type": "integer",
          "format": "uint32",
          "maximum": 2.0,
          "minimum": 0.0
        }
      ]
    },
    "CustomComponent": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "required": [
            "attribute",
            "name"
          ],
          "properties": {
            "attribute": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "attributes",
            "name"
          ],
          "properties": {
            "attributes": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "name": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GlobalValue": {
      "type": "string",
      "enum": [
        "readonly",
        "writeable",
        "off"
      ]
    },
    "JSDocPluginSettings": {
      "type": "object",
      "properties": {
        "augmentsExtendsReplacesDocs": {
          "description": "Only for `require-(yields|returns|description|example|param|throws)` rule",
          "default": false,
          "type": "boolean"
        },
        "exemptDestructuredRootsFromChecks": {
          "description": "Only for `require-param-type` and `require-param-description` rule",
          "default": false,
          "type": "boolean"
        },
        "ignoreInternal": {
          "description": "For all rules but NOT apply to `empty-tags` rule",
          "default": false,
          "type": "boolean"
        },
        "ignorePrivate": {
          "description": "For all rules but NOT apply to `check-access` and `empty-tags` rule",
          "default": false,
          "type": "boolean"
        },
        "ignoreReplacesDocs": {
          "description": "Only for `require-(yields|returns|description|example|param|throws)` rule",
          "default": true,
          "type": "boolean"
        },
        "implementsReplacesDocs": {
          "description": "Only for `require-(yields|returns|description|example|param|throws)` rule",
          "default": false,
          "type": "boolean"
        },
        "overrideReplacesDocs": {
          "description": "Only for `require-(yields|returns|description|example|param|throws)` rule",
          "default": true,
          "type": "boolean"
        },
        "tagNamePreference": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/TagNamePreference"
          }
        }
      }
    },
    "JSXA11yPluginSettings": {
      "type": "object",
      "properties": {
        "components": {
          "default": {},
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "polymorphicPropName": {
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "NextPluginSettings": {
      "type": "object",
      "properties": {
        "rootDir": {
          "$ref": "#/definitions/OneOrMany_for_String"
        }
      }
    },
    "OneOrMany_for_String": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "OxlintEnv": {
      "description": "Predefine global variables.",
      "type": "object",
      "additionalProperties": {
        "type": "boolean"
      }
    },
    "OxlintGlobals": {
      "description": "Add or remove global variables.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/GlobalValue"
      }
    },
    "OxlintRules": {
      "properties": {
        "array-callback-return": {
          "description": "### What it does\nEnforce return statements in callbacks of array methods\n\n### Why is this bad?\nArray has several methods for filtering, mapping, and folding.\nIf we forget to write return statement in a callback of those, it’s probably a mistake.\nIf you don’t want to use a return or don’t need the returned results,\nconsider using .forEach instead.\n\n### Example\n```javascript\nlet foo = [1, 2, 3, 4];\nfoo.map((a) => {\n  console.log(a)\n});\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/array-callback-return"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nEnforce return statements in callbacks of array methods\n\n### Why is this bad?\nArray has several methods for filtering, mapping, and folding.\nIf we forget to write return statement in a callback of those, it’s probably a mistake.\nIf you don’t want to use a return or don’t need the returned results,\nconsider using .forEach instead.\n\n### Example\n```javascript\nlet foo = [1, 2, 3, 4];\nfoo.map((a) => {\n  console.log(a)\n});\n```\n"
        },
        "constructor-super": {
          "description": "### What it does\nRequire 'super()' calls in constructors.\n\n### Why is this bad?\n\n\n### Example\n```javascript\nclass A extends B {\n  constructor() {}\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/constructor-super"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nRequire 'super()' calls in constructors.\n\n### Why is this bad?\n\n\n### Example\n```javascript\nclass A extends B {\n  constructor() {}\n}\n```\n"
        },
        "default-case": {
          "description": "### What it does\n\nRequire default cases in switch statements\n\n### Why is this bad?\n\nSome code conventions require that all switch statements have a default case, even if the\ndefault case is empty.\n\n### Example\n```javascript\nswitch (foo) {\n  case 1:\n    break;\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/default-case"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nRequire default cases in switch statements\n\n### Why is this bad?\n\nSome code conventions require that all switch statements have a default case, even if the\ndefault case is empty.\n\n### Example\n```javascript\nswitch (foo) {\n  case 1:\n    break;\n}\n```\n"
        },
        "default-case-last": {
          "description": "### What it does\nEnforce default clauses in switch statements to be last\n\n### Why is this bad?\nA switch statement can optionally have a default clause.\nIf present, it’s usually the last clause, but it doesn’t need to be. It is also allowed to put the default clause before all case clauses, or anywhere between. The behavior is mostly the same as if it was the last clause. The default block will be still executed only if there is no match in the case clauses (including those defined after the default), but there is also the ability to “fall through” from the default clause to the following clause in the list. However, such flow is not common and it would be confusing to the readers.\nEven if there is no “fall through” logic, it’s still unexpected to see the default clause before or between the case clauses. By convention, it is expected to be the last clause.\nIf a switch statement should have a default clause, it’s considered a best practice to define it as the last clause.\n\n### Example\n```javascript\nswitch (foo) {\n    default:\n        bar();\n        break;\n    case \"a\":\n        baz();\n        break;\n}\n\nswitch (foo) {\n    case 1:\n        bar();\n        break;\n    default:\n        baz();\n        break;\n    case 2:\n        qux();\n        break;\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/default-case-last"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nEnforce default clauses in switch statements to be last\n\n### Why is this bad?\nA switch statement can optionally have a default clause.\nIf present, it’s usually the last clause, but it doesn’t need to be. It is also allowed to put the default clause before all case clauses, or anywhere between. The behavior is mostly the same as if it was the last clause. The default block will be still executed only if there is no match in the case clauses (including those defined after the default), but there is also the ability to “fall through” from the default clause to the following clause in the list. However, such flow is not common and it would be confusing to the readers.\nEven if there is no “fall through” logic, it’s still unexpected to see the default clause before or between the case clauses. By convention, it is expected to be the last clause.\nIf a switch statement should have a default clause, it’s considered a best practice to define it as the last clause.\n\n### Example\n```javascript\nswitch (foo) {\n    default:\n        bar();\n        break;\n    case \"a\":\n        baz();\n        break;\n}\n\nswitch (foo) {\n    case 1:\n        bar();\n        break;\n    default:\n        baz();\n        break;\n    case 2:\n        qux();\n        break;\n}\n```\n"
        },
        "default-param-last": {
          "description": "### What it does\nEnforce default parameters to be last\n\n### Why is this bad?\nPutting default parameter at last allows function calls to omit optional tail arguments.\n\n### Example\n```javascript\n// Correct: optional argument can be omitted\nfunction createUser(id, isAdmin = false) {}\ncreateUser(\"tabby\")\n\n// Incorrect: optional argument can **not** be omitted\nfunction createUser(isAdmin = false, id) {}\ncreateUser(undefined, \"tabby\")\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/default-param-last"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nEnforce default parameters to be last\n\n### Why is this bad?\nPutting default parameter at last allows function calls to omit optional tail arguments.\n\n### Example\n```javascript\n// Correct: optional argument can be omitted\nfunction createUser(id, isAdmin = false) {}\ncreateUser(\"tabby\")\n\n// Incorrect: optional argument can **not** be omitted\nfunction createUser(isAdmin = false, id) {}\ncreateUser(undefined, \"tabby\")\n```\n"
        },
        "eqeqeq": {
          "description": "### What it does\nRequires the use of the === and !== operators\n\n### Why is this bad?\nUsing non-strict equality operators leads to hard to track bugs due to type coercion.\n\n### Example\n```javascript\nlet a = []\nlet b = false\na == b\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/eqeqeq"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nRequires the use of the === and !== operators\n\n### Why is this bad?\nUsing non-strict equality operators leads to hard to track bugs due to type coercion.\n\n### Example\n```javascript\nlet a = []\nlet b = false\na == b\n```\n"
        },
        "for-direction": {
          "description": "### What it does\nDisallow \"for\" loop update causing the counter to move in the wrong direction.\n\n### Why is this bad?\nA for loop that is known to run infinitely or never run is considered a bug.\n\n### Example\n```javascript\nfor (var i = 0; i < 10; i--) {}\n\nfor (var = 10; i >= 0; i++) {}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/for-direction"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow \"for\" loop update causing the counter to move in the wrong direction.\n\n### Why is this bad?\nA for loop that is known to run infinitely or never run is considered a bug.\n\n### Example\n```javascript\nfor (var i = 0; i < 10; i--) {}\n\nfor (var = 10; i >= 0; i++) {}\n```\n"
        },
        "getter-return": {
          "description": "### What it does\nRequires all getters to have a return statement\n\n### Why is this bad?\nGetters should always return a value. If they don't, it's probably a mistake.\n\n### Example\n```javascript\nclass Person{\n    get name(){\n        // no return\n    }\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/getter-return"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nRequires all getters to have a return statement\n\n### Why is this bad?\nGetters should always return a value. If they don't, it's probably a mistake.\n\n### Example\n```javascript\nclass Person{\n    get name(){\n        // no return\n    }\n}\n```\n"
        },
        "guard-for-in": {
          "description": "### What it does\nThis rule is aimed at preventing unexpected behavior that could arise from using a for in loop without filtering the results in the loop. As such, it will warn when for in loops do not filter their results with an if statement.\n\n### Why is this bad?\n\n\n### Example\n```javascript\nfor (key in foo) {\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/guard-for-in"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nThis rule is aimed at preventing unexpected behavior that could arise from using a for in loop without filtering the results in the loop. As such, it will warn when for in loops do not filter their results with an if statement.\n\n### Why is this bad?\n\n\n### Example\n```javascript\nfor (key in foo) {\n```\n"
        },
        "import/default": {
          "description": "### What it does\n\nIf a default import is requested, this rule will report if there is no default export in the imported module.\n\n### Example\n\n```javascript\n// ./bar.js\nexport function bar() { return null }\n\n// ./foo.js\nimport bar from './bar' // no default export found in ./bar\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/default"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nIf a default import is requested, this rule will report if there is no default export in the imported module.\n\n### Example\n\n```javascript\n// ./bar.js\nexport function bar() { return null }\n\n// ./foo.js\nimport bar from './bar' // no default export found in ./bar\n```\n"
        },
        "import/export": {
          "description": "### What it does\nReports funny business with exports, like repeated exports of names or defaults.\n\n### Example\n```javascript\nlet foo;\nexport { foo }; // Multiple exports of name 'foo'.\nexport * from \"./export-all\" // export-all.js also export foo\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/export"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nReports funny business with exports, like repeated exports of names or defaults.\n\n### Example\n```javascript\nlet foo;\nexport { foo }; // Multiple exports of name 'foo'.\nexport * from \"./export-all\" // export-all.js also export foo\n```\n"
        },
        "import/max-dependencies": {
          "description": "### What it does\n\nForbid modules to have too many dependencies (import or require statements).\n\n### Why is this bad?\n\nThis is a useful rule because a module with too many dependencies is a code smell, and\nusually indicates the module is doing too much and/or should be broken up into smaller\nmodules.\n\n### Example\n\nGiven `{\"max\": 2}`\n```javascript\nimport a from './a';\nimport b from './b';\nimport c from './c';\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/max-dependencies"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nForbid modules to have too many dependencies (import or require statements).\n\n### Why is this bad?\n\nThis is a useful rule because a module with too many dependencies is a code smell, and\nusually indicates the module is doing too much and/or should be broken up into smaller\nmodules.\n\n### Example\n\nGiven `{\"max\": 2}`\n```javascript\nimport a from './a';\nimport b from './b';\nimport c from './c';\n```\n"
        },
        "import/named": {
          "description": "### What it does\n\n### Why is this bad?\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/named"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\n### Why is this bad?\n\n### Example\n```javascript\n```\n"
        },
        "import/namespace": {
          "description": "### What it does\nEnforces names exist at the time they are dereferenced, when imported as a full namespace (i.e. import * as foo from './foo'; foo.bar(); will report if bar is not exported by ./foo.).\nWill report at the import declaration if there are no exported names found.\nAlso, will report for computed references (i.e. foo[\"bar\"]()).\nReports on assignment to a member of an imported namespace.\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/namespace"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nEnforces names exist at the time they are dereferenced, when imported as a full namespace (i.e. import * as foo from './foo'; foo.bar(); will report if bar is not exported by ./foo.).\nWill report at the import declaration if there are no exported names found.\nAlso, will report for computed references (i.e. foo[\"bar\"]()).\nReports on assignment to a member of an imported namespace.\n"
        },
        "import/no-amd": {
          "description": "### What it does\n\nForbid AMD `require` and `define` calls.\n\n### Example\n\n```javascript\n// fail\nrequire([a, b], function() {} );\n// pass\nrequire('../name');\nrequire(`../name`);\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-amd"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nForbid AMD `require` and `define` calls.\n\n### Example\n\n```javascript\n// fail\nrequire([a, b], function() {} );\n// pass\nrequire('../name');\nrequire(`../name`);\n```\n"
        },
        "import/no-cycle": {
          "description": "### What it does\n\nEnsures that there is no resolvable path back to this module via its dependencies.\n\nThis includes cycles of depth 1 (imported module imports me) to \"∞\" (or Infinity),\nif the maxDepth option is not set.\n\n### Why is this bad?\n\nDependency cycles lead to confusing architectures where bugs become hard to find.\n\nIt is common to import an `undefined` value that is caused by a cyclic dependency.\n\n### Example\n```javascript\n// dep-b.js\nimport './dep-a.js'\nexport function b() { /* ... */ }\n```\n\n```javascript\n// dep-a.js\nimport { b } from './dep-b.js' // reported: Dependency cycle detected.\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-cycle"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnsures that there is no resolvable path back to this module via its dependencies.\n\nThis includes cycles of depth 1 (imported module imports me) to \"∞\" (or Infinity),\nif the maxDepth option is not set.\n\n### Why is this bad?\n\nDependency cycles lead to confusing architectures where bugs become hard to find.\n\nIt is common to import an `undefined` value that is caused by a cyclic dependency.\n\n### Example\n```javascript\n// dep-b.js\nimport './dep-a.js'\nexport function b() { /* ... */ }\n```\n\n```javascript\n// dep-a.js\nimport { b } from './dep-b.js' // reported: Dependency cycle detected.\n```\n"
        },
        "import/no-default-export": {
          "description": "### What it does\n\nForbid a module to have a default exports. This help your editor to provide better auto imports.\n\n### Examples\n\n```javascript\n// bad1.js\n\n// There is a default export.\nexport const foo = 'foo';\nconst bar = 'bar';\nexport default 'bar';\n```\n\n```javascript\n// bad2.js\n\n// There is a default export.\nconst foo = 'foo';\nexport { foo as default }\n```\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-default-export"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nForbid a module to have a default exports. This help your editor to provide better auto imports.\n\n### Examples\n\n```javascript\n// bad1.js\n\n// There is a default export.\nexport const foo = 'foo';\nconst bar = 'bar';\nexport default 'bar';\n```\n\n```javascript\n// bad2.js\n\n// There is a default export.\nconst foo = 'foo';\nexport { foo as default }\n```\n\n"
        },
        "import/no-duplicates": {
          "description": "### What it does\n\nReports if a resolved path is imported more than once.\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-duplicates"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nReports if a resolved path is imported more than once.\n"
        },
        "import/no-named-as-default": {
          "description": "### What it does\n\nReports use of an exported name as the locally imported name of a default export.\n\n### Example\n\n```javascript\n// foo.js\nexport default 'foo';\nexport const bar = 'baz';\n```\nValid:\n```javascript\nimport foo from './foo.js';\n```\nInvalid:\n```javascript\n// using exported name 'bar' as identifier for default export.\nimport bar from './foo.js';\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-named-as-default"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nReports use of an exported name as the locally imported name of a default export.\n\n### Example\n\n```javascript\n// foo.js\nexport default 'foo';\nexport const bar = 'baz';\n```\nValid:\n```javascript\nimport foo from './foo.js';\n```\nInvalid:\n```javascript\n// using exported name 'bar' as identifier for default export.\nimport bar from './foo.js';\n```\n"
        },
        "import/no-named-as-default-member": {
          "description": "### What it does\n\nReports use of an exported name as a property on the default export.\n\n### Example\n\n```javascript\n// ./bar.js\nexport function bar() { return null }\nexport default () => { return 1 }\n\n// ./foo.js\nimport bar from './bar'\nconst bar = foo.bar // trying to access named export via default\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-named-as-default-member"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nReports use of an exported name as a property on the default export.\n\n### Example\n\n```javascript\n// ./bar.js\nexport function bar() { return null }\nexport default () => { return 1 }\n\n// ./foo.js\nimport bar from './bar'\nconst bar = foo.bar // trying to access named export via default\n```\n"
        },
        "import/no-self-import": {
          "description": "### What it does\n\nForbid a module from importing itself. This can sometimes happen during refactoring.\n\n### Example\n\n```javascript\n// foo.js\nimport foo from './foo.js'\nconst foo = require('./foo')\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-self-import"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nForbid a module from importing itself. This can sometimes happen during refactoring.\n\n### Example\n\n```javascript\n// foo.js\nimport foo from './foo.js'\nconst foo = require('./foo')\n```\n"
        },
        "jest/consistent-test-it": {
          "description": "### What it does\n\nJest allows you to choose how you want to define your tests, using the `it` or\nthe `test` keywords, with multiple permutations for each:\n\n- **it:** `it`, `xit`, `fit`, `it.only`, `it.skip`.\n- **test:** `test`, `xtest`, `test.only`, `test.skip`.\n\n### Example\n\n```javascript\n/*eslint jest/consistent-test-it: [\"error\", {\"fn\": \"test\"}]*/\ntest('foo'); // valid\ntest.only('foo'); // valid\n\nit('foo'); // invalid\nit.only('foo'); // invalid\n```\n\n```javascript\n/*eslint jest/consistent-test-it: [\"error\", {\"fn\": \"it\"}]*/\nit('foo'); // valid\nit.only('foo'); // valid\ntest('foo'); // invalid\ntest.only('foo'); // invalid\n```\n\n```javascript\n/*eslint jest/consistent-test-it: [\"error\", {\"fn\": \"it\", \"withinDescribe\": \"test\"}]*/\nit('foo'); // valid\ndescribe('foo', function () {\n    test('bar'); // valid\n});\n\ntest('foo'); // invalid\ndescribe('foo', function () {\n    it('bar'); // invalid\n});\n```\n\n#### Options\n\nThis rule can be configured as follows\n```json5\n{\n    type: 'object',\n    properties: {\n        fn: {\n            enum: ['it', 'test'],\n        },\n        withinDescribe: {\n            enum: ['it', 'test'],\n        },\n    },\n    additionalProperties: false,\n}\n```\n\n##### fn\nDecides whether to use `test` or `it`.\n\n##### withinDescribe\nDecides whether to use `test` or `it` within a `describe` scope.\n\n\nThis rule is compatible with [eslint-plugin-vitest](https://github.com/veritem/eslint-plugin-vitest/blob/main/docs/rules/consistent-test-it.md),\nto use it, add the following configuration to your `.eslintrc.json`:\n\n```json\n{\n  \"rules\": {\n     \"vitest/consistent-test-it\": \"error\"\n  }\n}\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/consistent-test-it"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nJest allows you to choose how you want to define your tests, using the `it` or\nthe `test` keywords, with multiple permutations for each:\n\n- **it:** `it`, `xit`, `fit`, `it.only`, `it.skip`.\n- **test:** `test`, `xtest`, `test.only`, `test.skip`.\n\n### Example\n\n```javascript\n/*eslint jest/consistent-test-it: [\"error\", {\"fn\": \"test\"}]*/\ntest('foo'); // valid\ntest.only('foo'); // valid\n\nit('foo'); // invalid\nit.only('foo'); // invalid\n```\n\n```javascript\n/*eslint jest/consistent-test-it: [\"error\", {\"fn\": \"it\"}]*/\nit('foo'); // valid\nit.only('foo'); // valid\ntest('foo'); // invalid\ntest.only('foo'); // invalid\n```\n\n```javascript\n/*eslint jest/consistent-test-it: [\"error\", {\"fn\": \"it\", \"withinDescribe\": \"test\"}]*/\nit('foo'); // valid\ndescribe('foo', function () {\n    test('bar'); // valid\n});\n\ntest('foo'); // invalid\ndescribe('foo', function () {\n    it('bar'); // invalid\n});\n```\n\n#### Options\n\nThis rule can be configured as follows\n```json5\n{\n    type: 'object',\n    properties: {\n        fn: {\n            enum: ['it', 'test'],\n        },\n        withinDescribe: {\n            enum: ['it', 'test'],\n        },\n    },\n    additionalProperties: false,\n}\n```\n\n##### fn\nDecides whether to use `test` or `it`.\n\n##### withinDescribe\nDecides whether to use `test` or `it` within a `describe` scope.\n\n\nThis rule is compatible with [eslint-plugin-vitest](https://github.com/veritem/eslint-plugin-vitest/blob/main/docs/rules/consistent-test-it.md),\nto use it, add the following configuration to your `.eslintrc.json`:\n\n```json\n{\n  \"rules\": {\n     \"vitest/consistent-test-it\": \"error\"\n  }\n}\n"
        },
        "jest/expect-expect": {
          "description": "### What it does\n\nThis rule triggers when there is no call made to `expect` in a test, ensure that there is at least one `expect` call made in a test.\n\n### Why is this bad?\n\n People may forget to add assertions.\n\n### Example\n\n```javascript\nit('should be a test', () => {\n    console.log('no assertion');\n});\ntest('should assert something', () => {});\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/expect-expect"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule triggers when there is no call made to `expect` in a test, ensure that there is at least one `expect` call made in a test.\n\n### Why is this bad?\n\n People may forget to add assertions.\n\n### Example\n\n```javascript\nit('should be a test', () => {\n    console.log('no assertion');\n});\ntest('should assert something', () => {});\n```\n"
        },
        "jest/max-expects": {
          "description": "### What it does\nAs more assertions are made, there is a possible tendency for the test to be\nmore likely to mix multiple objectives. To avoid this, this rule reports when\nthe maximum number of assertions is exceeded.\n\n### Why is this bad?\n\nThis rule enforces a maximum number of `expect()` calls.\nThe following patterns are considered warnings (with the default option of `{ \"max\": 5 } `):\n\n### Example\n\n```javascript\ntest('should not pass', () => {\n    expect(true).toBeDefined();\n    expect(true).toBeDefined();\n    expect(true).toBeDefined();\n    expect(true).toBeDefined();\n    expect(true).toBeDefined();\n    expect(true).toBeDefined();\n});\n\nit('should not pass', () => {\n    expect(true).toBeDefined();\n    expect(true).toBeDefined();\n    expect(true).toBeDefined();\n    expect(true).toBeDefined();\n    expect(true).toBeDefined();\n    expect(true).toBeDefined();\n});\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/max-expects"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nAs more assertions are made, there is a possible tendency for the test to be\nmore likely to mix multiple objectives. To avoid this, this rule reports when\nthe maximum number of assertions is exceeded.\n\n### Why is this bad?\n\nThis rule enforces a maximum number of `expect()` calls.\nThe following patterns are considered warnings (with the default option of `{ \"max\": 5 } `):\n\n### Example\n\n```javascript\ntest('should not pass', () => {\n    expect(true).toBeDefined();\n    expect(true).toBeDefined();\n    expect(true).toBeDefined();\n    expect(true).toBeDefined();\n    expect(true).toBeDefined();\n    expect(true).toBeDefined();\n});\n\nit('should not pass', () => {\n    expect(true).toBeDefined();\n    expect(true).toBeDefined();\n    expect(true).toBeDefined();\n    expect(true).toBeDefined();\n    expect(true).toBeDefined();\n    expect(true).toBeDefined();\n});\n```\n"
        },
        "jest/max-nested-describe": {
          "description": "### What it does\n\nThis rule enforces a maximum depth to nested `describe()` calls to improve code\nclarity in your tests.\n\nThe following patterns are considered warnings (with the default option of\n`{ \"max\": 5 } `):\n\n### Example\n\n```javascript\n\n// invalid\ndescribe('foo', () => {\n    describe('bar', () => {\n        describe('baz', () => {\n            describe('qux', () => {\n                describe('quxx', () => {\n                    describe('too many', () => {\n                        it('should get something', () => {\n                            expect(getSomething()).toBe('Something');\n                        });\n                    });\n                });\n            });\n        });\n    });\n});\n\ndescribe('foo', function () {\n    describe('bar', function () {\n        describe('baz', function () {\n            describe('qux', function () {\n                describe('quxx', function () {\n                    describe('too many', function () {\n                        it('should get something', () => {\n                            expect(getSomething()).toBe('Something');\n                        });\n                    });\n                });\n            });\n        });\n    });\n});\n\n// valid\ndescribe('foo', () => {\n    describe('bar', () => {\n        it('should get something', () => {\n            expect(getSomething()).toBe('Something');\n        });\n    });\n    describe('qux', () => {\n        it('should get something', () => {\n            expect(getSomething()).toBe('Something');\n        });\n    });\n});\n\ndescribe('foo2', function () {\n    it('should get something', () => {\n        expect(getSomething()).toBe('Something');\n    });\n});\n\ndescribe('foo', function () {\n    describe('bar', function () {\n        describe('baz', function () {\n            describe('qux', function () {\n                describe('this is the limit', function () {\n                    it('should get something', () => {\n                        expect(getSomething()).toBe('Something');\n                    });\n                });\n            });\n        });\n    });\n});\n```\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/max-nested-describe"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule enforces a maximum depth to nested `describe()` calls to improve code\nclarity in your tests.\n\nThe following patterns are considered warnings (with the default option of\n`{ \"max\": 5 } `):\n\n### Example\n\n```javascript\n\n// invalid\ndescribe('foo', () => {\n    describe('bar', () => {\n        describe('baz', () => {\n            describe('qux', () => {\n                describe('quxx', () => {\n                    describe('too many', () => {\n                        it('should get something', () => {\n                            expect(getSomething()).toBe('Something');\n                        });\n                    });\n                });\n            });\n        });\n    });\n});\n\ndescribe('foo', function () {\n    describe('bar', function () {\n        describe('baz', function () {\n            describe('qux', function () {\n                describe('quxx', function () {\n                    describe('too many', function () {\n                        it('should get something', () => {\n                            expect(getSomething()).toBe('Something');\n                        });\n                    });\n                });\n            });\n        });\n    });\n});\n\n// valid\ndescribe('foo', () => {\n    describe('bar', () => {\n        it('should get something', () => {\n            expect(getSomething()).toBe('Something');\n        });\n    });\n    describe('qux', () => {\n        it('should get something', () => {\n            expect(getSomething()).toBe('Something');\n        });\n    });\n});\n\ndescribe('foo2', function () {\n    it('should get something', () => {\n        expect(getSomething()).toBe('Something');\n    });\n});\n\ndescribe('foo', function () {\n    describe('bar', function () {\n        describe('baz', function () {\n            describe('qux', function () {\n                describe('this is the limit', function () {\n                    it('should get something', () => {\n                        expect(getSomething()).toBe('Something');\n                    });\n                });\n            });\n        });\n    });\n});\n```\n\n"
        },
        "jest/no-alias-methods": {
          "description": "### What it does\n\nThis rule ensures that only the canonical name as used in the Jest documentation is used in the code.\n\n### Why is this bad?\n\nThese aliases are going to be removed in the next major version of Jest - see [jestjs/jest#13164](https://github.com/jestjs/jest/issues/13164) for more.\nThis rule will makes it easier to search for all occurrences of the method within code, and it ensures consistency among the method names used.\n\n### Example\n```javascript\nexpect(a).toBeCalled();\nexpect(a).toBeCalledTimes();\nexpect(a).toBeCalledWith();\nexpect(a).lastCalledWith();\nexpect(a).nthCalledWith();\nexpect(a).toReturn();\nexpect(a).toReturnTimes();\nexpect(a).toReturnWith();\nexpect(a).lastReturnedWith();\nexpect(a).nthReturnedWith();\nexpect(a).toThrowError();\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-alias-methods"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule ensures that only the canonical name as used in the Jest documentation is used in the code.\n\n### Why is this bad?\n\nThese aliases are going to be removed in the next major version of Jest - see [jestjs/jest#13164](https://github.com/jestjs/jest/issues/13164) for more.\nThis rule will makes it easier to search for all occurrences of the method within code, and it ensures consistency among the method names used.\n\n### Example\n```javascript\nexpect(a).toBeCalled();\nexpect(a).toBeCalledTimes();\nexpect(a).toBeCalledWith();\nexpect(a).lastCalledWith();\nexpect(a).nthCalledWith();\nexpect(a).toReturn();\nexpect(a).toReturnTimes();\nexpect(a).toReturnWith();\nexpect(a).lastReturnedWith();\nexpect(a).nthReturnedWith();\nexpect(a).toThrowError();\n```\n"
        },
        "jest/no-commented-out-tests": {
          "description": "### What it does\n\nThis rule raises a warning about commented out tests. It's similar to\nno-disabled-tests rule.\n\n### Why is this bad?\n\nYou may forget to uncomment some tests. This rule raises a warning about commented out tests. It's similar to\nno-disabled-tests rule.\n\n### Example\n\n```javascript\n// describe('foo', () => {});\n// it('foo', () => {});\n// test('foo', () => {});\n\n// describe.skip('foo', () => {});\n// it.skip('foo', () => {});\n// test.skip('foo', () => {});\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-commented-out-tests"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule raises a warning about commented out tests. It's similar to\nno-disabled-tests rule.\n\n### Why is this bad?\n\nYou may forget to uncomment some tests. This rule raises a warning about commented out tests. It's similar to\nno-disabled-tests rule.\n\n### Example\n\n```javascript\n// describe('foo', () => {});\n// it('foo', () => {});\n// test('foo', () => {});\n\n// describe.skip('foo', () => {});\n// it.skip('foo', () => {});\n// test.skip('foo', () => {});\n```\n"
        },
        "jest/no-conditional-expect": {
          "description": "### What it does\n\nThis rule prevents the use of expect in conditional blocks, such as ifs & catch(s).\nThis includes using expect in callbacks to functions named catch, which are assumed to be promises.\n\n### Why is this bad?\n\nJest only considers a test to have failed if it throws an error, meaning if calls to assertion functions like expect occur in conditional code such as a catch statement, tests can end up passing but not actually test anything.\nAdditionally, conditionals tend to make tests more brittle and complex, as they increase the amount of mental thinking needed to understand what is actually being tested.\n\n### Example\n```javascript\nit('foo', () => {\n  doTest && expect(1).toBe(2);\n});\n\nit('bar', () => {\n  if (!skipTest) {\n    expect(1).toEqual(2);\n  }\n});\n\nit('throws an error', async () => {\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-conditional-expect"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule prevents the use of expect in conditional blocks, such as ifs & catch(s).\nThis includes using expect in callbacks to functions named catch, which are assumed to be promises.\n\n### Why is this bad?\n\nJest only considers a test to have failed if it throws an error, meaning if calls to assertion functions like expect occur in conditional code such as a catch statement, tests can end up passing but not actually test anything.\nAdditionally, conditionals tend to make tests more brittle and complex, as they increase the amount of mental thinking needed to understand what is actually being tested.\n\n### Example\n```javascript\nit('foo', () => {\n  doTest && expect(1).toBe(2);\n});\n\nit('bar', () => {\n  if (!skipTest) {\n    expect(1).toEqual(2);\n  }\n});\n\nit('throws an error', async () => {\n```\n"
        },
        "jest/no-confusing-set-timeout": {
          "description": "### What it does\n\nDisallow confusing usages of jest.setTimeout\n\n### Why is this bad?\n\n- being called anywhere other than in global scope\n- being called multiple times\n- being called after other Jest functions like hooks, `describe`, `test`, or `it`\n\n\n### Example\n\nAll of these are invalid case:\n```javascript\nescribe('test foo', () => {\n  jest.setTimeout(1000);\n  it('test-description', () => {\n    // test logic;\n  });\n});\n\ndescribe('test bar', () => {\n  it('test-description', () => {\n    jest.setTimeout(1000);\n    // test logic;\n  });\n});\n\ntest('foo-bar', () => {\n  jest.setTimeout(1000);\n});\n\ndescribe('unit test', () => {\n  beforeEach(() => {\n    jest.setTimeout(1000);\n  });\n});\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-confusing-set-timeout"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow confusing usages of jest.setTimeout\n\n### Why is this bad?\n\n- being called anywhere other than in global scope\n- being called multiple times\n- being called after other Jest functions like hooks, `describe`, `test`, or `it`\n\n\n### Example\n\nAll of these are invalid case:\n```javascript\nescribe('test foo', () => {\n  jest.setTimeout(1000);\n  it('test-description', () => {\n    // test logic;\n  });\n});\n\ndescribe('test bar', () => {\n  it('test-description', () => {\n    jest.setTimeout(1000);\n    // test logic;\n  });\n});\n\ntest('foo-bar', () => {\n  jest.setTimeout(1000);\n});\n\ndescribe('unit test', () => {\n  beforeEach(() => {\n    jest.setTimeout(1000);\n  });\n});\n```\n"
        },
        "jest/no-deprecated-functions": {
          "description": "### What it does\nOver the years Jest has accrued some debt in the form of functions that have\neither been renamed for clarity, or replaced with more powerful APIs.\n\nThis rule can also autofix a number of these deprecations for you.\n#### `jest.resetModuleRegistry`\nThis function was renamed to `resetModules` in Jest 15 and removed in Jest 27.\n\n#### `jest.addMatchers`\nThis function was replaced with `expect.extend` in Jest 17 and removed in Jest 27.\n\n#### `require.requireActual` & `require.requireMock`\nThese functions were replaced in Jest 21 and removed in Jest 26.\n\nOriginally, the `requireActual` & `requireMock` the `requireActual`&\n`requireMock` functions were placed onto the `require` function.\n\nThese functions were later moved onto the `jest` object in order to be easier\nfor type checkers to handle, and their use via `require` deprecated. Finally,\nthe release of Jest 26 saw them removed from the `require` function altogether.\n\n#### `jest.runTimersToTime`\nThis function was renamed to `advanceTimersByTime` in Jest 22 and removed in Jest 27.\n\n#### `jest.genMockFromModule`\nThis function was renamed to `createMockFromModule` in Jest 26, and is scheduled for removal in Jest 30.\n\n### Why is this bad?\n\nWhile typically these deprecated functions are kept in the codebase for a number\nof majors, eventually they are removed completely.\n\n### Example\n```javascript\njest.resetModuleRegistry // since Jest 15\njest.addMatchers // since Jest 17\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-deprecated-functions"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nOver the years Jest has accrued some debt in the form of functions that have\neither been renamed for clarity, or replaced with more powerful APIs.\n\nThis rule can also autofix a number of these deprecations for you.\n#### `jest.resetModuleRegistry`\nThis function was renamed to `resetModules` in Jest 15 and removed in Jest 27.\n\n#### `jest.addMatchers`\nThis function was replaced with `expect.extend` in Jest 17 and removed in Jest 27.\n\n#### `require.requireActual` & `require.requireMock`\nThese functions were replaced in Jest 21 and removed in Jest 26.\n\nOriginally, the `requireActual` & `requireMock` the `requireActual`&\n`requireMock` functions were placed onto the `require` function.\n\nThese functions were later moved onto the `jest` object in order to be easier\nfor type checkers to handle, and their use via `require` deprecated. Finally,\nthe release of Jest 26 saw them removed from the `require` function altogether.\n\n#### `jest.runTimersToTime`\nThis function was renamed to `advanceTimersByTime` in Jest 22 and removed in Jest 27.\n\n#### `jest.genMockFromModule`\nThis function was renamed to `createMockFromModule` in Jest 26, and is scheduled for removal in Jest 30.\n\n### Why is this bad?\n\nWhile typically these deprecated functions are kept in the codebase for a number\nof majors, eventually they are removed completely.\n\n### Example\n```javascript\njest.resetModuleRegistry // since Jest 15\njest.addMatchers // since Jest 17\n```\n"
        },
        "jest/no-disabled-tests": {
          "description": "### What it does\nThis rule raises a warning about disabled tests.\n\n### Why is this bad?\n\nJest has a feature that allows you to temporarily mark tests as disabled. This\nfeature is often helpful while debugging or to create placeholders for future\ntests. Before committing changes we may want to check that all tests are\nrunning.\n\n### Example\n\n```js\ndescribe.skip('foo', () => {});\nit.skip('foo', () => {});\ntest.skip('foo', () => {});\n\ndescribe['skip']('bar', () => {});\nit['skip']('bar', () => {});\ntest['skip']('bar', () => {});\n\nxdescribe('foo', () => {});\nxit('foo', () => {});\nxtest('foo', () => {});\n\nit('bar');\ntest('bar');\n\nit('foo', () => {\n  pending();\n});\n```\n\nThis rule is compatible with [eslint-plugin-vitest](https://github.com/veritem/eslint-plugin-vitest/blob/main/docs/rules/no-disabled-tests.md),\nto use it, add the following configuration to your `.eslintrc.json`:\n\n```json\n{\n  \"rules\": {\n     \"vitest/no-disabled-tests\": \"error\"\n  }\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-disabled-tests"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nThis rule raises a warning about disabled tests.\n\n### Why is this bad?\n\nJest has a feature that allows you to temporarily mark tests as disabled. This\nfeature is often helpful while debugging or to create placeholders for future\ntests. Before committing changes we may want to check that all tests are\nrunning.\n\n### Example\n\n```js\ndescribe.skip('foo', () => {});\nit.skip('foo', () => {});\ntest.skip('foo', () => {});\n\ndescribe['skip']('bar', () => {});\nit['skip']('bar', () => {});\ntest['skip']('bar', () => {});\n\nxdescribe('foo', () => {});\nxit('foo', () => {});\nxtest('foo', () => {});\n\nit('bar');\ntest('bar');\n\nit('foo', () => {\n  pending();\n});\n```\n\nThis rule is compatible with [eslint-plugin-vitest](https://github.com/veritem/eslint-plugin-vitest/blob/main/docs/rules/no-disabled-tests.md),\nto use it, add the following configuration to your `.eslintrc.json`:\n\n```json\n{\n  \"rules\": {\n     \"vitest/no-disabled-tests\": \"error\"\n  }\n}\n```\n"
        },
        "jest/no-done-callback": {
          "description": "### What it does\n\nThis rule checks the function parameter of hooks & tests for use of the done argument, suggesting you return a promise instead.\n\n### Why is this bad?\n\nWhen calling asynchronous code in hooks and tests, jest needs to know when the asynchronous work is complete to progress the current run.\nOriginally the most common pattern to achieve this was to use callbacks:\n\n```javascript\ntest('the data is peanut butter', done => {\n  function callback(data) {\n    try {\n      expect(data).toBe('peanut butter');\n      done();\n    } catch (error) {\n      done(error);\n    }\n  }\n\n  fetchData(callback);\n});\n```\n\nThis can be very error-prone however, as it requires careful understanding of how assertions work in tests or otherwise tests won't behave as expected.\n\n### Example\n```javascript\nbeforeEach(done => {\n  // ...\n});\n\ntest('myFunction()', done => {\n  // ...\n});\n\ntest('myFunction()', function (done) {\n  // ...\n});\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-done-callback"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule checks the function parameter of hooks & tests for use of the done argument, suggesting you return a promise instead.\n\n### Why is this bad?\n\nWhen calling asynchronous code in hooks and tests, jest needs to know when the asynchronous work is complete to progress the current run.\nOriginally the most common pattern to achieve this was to use callbacks:\n\n```javascript\ntest('the data is peanut butter', done => {\n  function callback(data) {\n    try {\n      expect(data).toBe('peanut butter');\n      done();\n    } catch (error) {\n      done(error);\n    }\n  }\n\n  fetchData(callback);\n});\n```\n\nThis can be very error-prone however, as it requires careful understanding of how assertions work in tests or otherwise tests won't behave as expected.\n\n### Example\n```javascript\nbeforeEach(done => {\n  // ...\n});\n\ntest('myFunction()', done => {\n  // ...\n});\n\ntest('myFunction()', function (done) {\n  // ...\n});\n```\n"
        },
        "jest/no-duplicate-hooks": {
          "description": "### What it does\n\nA `describe` block should not contain duplicate hooks.\n\n### Example\n```javascript\n\n// invalid\ndescribe('foo', () => {\n    beforeEach(() => {\n        // some setup\n    });\n    beforeEach(() => {\n        // some setup\n    });\n    test('foo_test', () => {\n        // some test\n    });\n});\n\n// Nested describe scenario\ndescribe('foo', () => {\n    beforeEach(() => {\n        // some setup\n    });\n    test('foo_test', () => {\n        // some test\n    });\n    describe('bar', () => {\n        test('bar_test', () => {\n            afterAll(() => {\n                // some teardown\n            });\n            afterAll(() => {\n                // some teardown\n            });\n        });\n    });\n});\n```\n\n```javascript\n\n// valid\ndescribe('foo', () => {\n    beforeEach(() => {\n        // some setup\n    });\n    test('foo_test', () => {\n        // some test\n    });\n});\n\n// Nested describe scenario\ndescribe('foo', () => {\n    beforeEach(() => {\n        // some setup\n    });\n    test('foo_test', () => {\n        // some test\n    });\n    describe('bar', () => {\n        test('bar_test', () => {\n            beforeEach(() => {\n                // some setup\n            });\n        });\n    });\n});\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-duplicate-hooks"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nA `describe` block should not contain duplicate hooks.\n\n### Example\n```javascript\n\n// invalid\ndescribe('foo', () => {\n    beforeEach(() => {\n        // some setup\n    });\n    beforeEach(() => {\n        // some setup\n    });\n    test('foo_test', () => {\n        // some test\n    });\n});\n\n// Nested describe scenario\ndescribe('foo', () => {\n    beforeEach(() => {\n        // some setup\n    });\n    test('foo_test', () => {\n        // some test\n    });\n    describe('bar', () => {\n        test('bar_test', () => {\n            afterAll(() => {\n                // some teardown\n            });\n            afterAll(() => {\n                // some teardown\n            });\n        });\n    });\n});\n```\n\n```javascript\n\n// valid\ndescribe('foo', () => {\n    beforeEach(() => {\n        // some setup\n    });\n    test('foo_test', () => {\n        // some test\n    });\n});\n\n// Nested describe scenario\ndescribe('foo', () => {\n    beforeEach(() => {\n        // some setup\n    });\n    test('foo_test', () => {\n        // some test\n    });\n    describe('bar', () => {\n        test('bar_test', () => {\n            beforeEach(() => {\n                // some setup\n            });\n        });\n    });\n});\n```\n"
        },
        "jest/no-export": {
          "description": "### What it does\n\nPrevents using exports if a file has one or more tests in it.\n\n### Why is this bad?\n\nThis rule aims to eliminate duplicate runs of tests by exporting things from test files.\n If you import from a test file, then all the tests in that file will be run in each imported instance.\nso bottom line, don't export from a test, but instead move helper functions into a separate file when they need to be shared across tests.\n\n### Example\n```javascript\nexport function myHelper() {}\ndescribe('a test', () => {\n  expect(1).toBe(1);\n});\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-export"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nPrevents using exports if a file has one or more tests in it.\n\n### Why is this bad?\n\nThis rule aims to eliminate duplicate runs of tests by exporting things from test files.\n If you import from a test file, then all the tests in that file will be run in each imported instance.\nso bottom line, don't export from a test, but instead move helper functions into a separate file when they need to be shared across tests.\n\n### Example\n```javascript\nexport function myHelper() {}\ndescribe('a test', () => {\n  expect(1).toBe(1);\n});\n```\n"
        },
        "jest/no-focused-tests": {
          "description": "### What it does\nThis rule reminds you to remove `.only` from your tests by raising a warning\nwhenever you are using the exclusivity feature.\n\n### Why is this bad?\n\nJest has a feature that allows you to focus tests by appending `.only` or\nprepending `f` to a test-suite or a test-case. This feature is really helpful to\ndebug a failing test, so you don’t have to execute all of your tests. After you\nhave fixed your test and before committing the changes you have to remove\n`.only` to ensure all tests are executed on your build system.\n\n### Example\n\n```javascript\ndescribe.only('foo', () => {});\nit.only('foo', () => {});\ndescribe['only']('bar', () => {});\nit['only']('bar', () => {});\ntest.only('foo', () => {});\ntest['only']('bar', () => {});\nfdescribe('foo', () => {});\nfit('foo', () => {});\nfit.each`\ntable\n`();\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-focused-tests"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nThis rule reminds you to remove `.only` from your tests by raising a warning\nwhenever you are using the exclusivity feature.\n\n### Why is this bad?\n\nJest has a feature that allows you to focus tests by appending `.only` or\nprepending `f` to a test-suite or a test-case. This feature is really helpful to\ndebug a failing test, so you don’t have to execute all of your tests. After you\nhave fixed your test and before committing the changes you have to remove\n`.only` to ensure all tests are executed on your build system.\n\n### Example\n\n```javascript\ndescribe.only('foo', () => {});\nit.only('foo', () => {});\ndescribe['only']('bar', () => {});\nit['only']('bar', () => {});\ntest.only('foo', () => {});\ntest['only']('bar', () => {});\nfdescribe('foo', () => {});\nfit('foo', () => {});\nfit.each`\ntable\n`();\n```\n"
        },
        "jest/no-hooks": {
          "description": "### What it does\nJest provides global functions for setup and teardown tasks, which are called before/after each test case\nand each test suite. The use of these hooks promotes shared state between tests.\n\n### Why is this bad?\n\nThis rule reports for the following function calls:\n* beforeAll\n* beforeEach\n* afterAll\n* afterEach\n\n### Example\n\n```javascript\nfunction setupFoo(options) { /* ... */ }\nfunction setupBar(options) { /* ... */ }\n\ndescribe('foo', () => {\n    let foo;\n    beforeEach(() => {\n        foo = setupFoo();\n    });\n    afterEach(() => {\n        foo = null;\n    });\n    it('does something', () => {\n        expect(foo.doesSomething()).toBe(true);\n    });\n    describe('with bar', () => {\n        let bar;\n        beforeEach(() => {\n            bar = setupBar();\n        });\n        afterEach(() => {\n            bar = null;\n        });\n        it('does something with bar', () => {\n            expect(foo.doesSomething(bar)).toBe(true);\n        });\n    });\n});\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-hooks"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nJest provides global functions for setup and teardown tasks, which are called before/after each test case\nand each test suite. The use of these hooks promotes shared state between tests.\n\n### Why is this bad?\n\nThis rule reports for the following function calls:\n* beforeAll\n* beforeEach\n* afterAll\n* afterEach\n\n### Example\n\n```javascript\nfunction setupFoo(options) { /* ... */ }\nfunction setupBar(options) { /* ... */ }\n\ndescribe('foo', () => {\n    let foo;\n    beforeEach(() => {\n        foo = setupFoo();\n    });\n    afterEach(() => {\n        foo = null;\n    });\n    it('does something', () => {\n        expect(foo.doesSomething()).toBe(true);\n    });\n    describe('with bar', () => {\n        let bar;\n        beforeEach(() => {\n            bar = setupBar();\n        });\n        afterEach(() => {\n            bar = null;\n        });\n        it('does something with bar', () => {\n            expect(foo.doesSomething(bar)).toBe(true);\n        });\n    });\n});\n```\n"
        },
        "jest/no-identical-title": {
          "description": "### What it does\n\nThis rule looks at the title of every test and test suite.\nIt will report when two test suites or two test cases at the same level of a test suite have the same title.\n\n### Why is this bad?\n\nHaving identical titles for two different tests or test suites may create confusion.\nFor example, when a test with the same title as another test in the same test suite fails, it is harder to know which one failed and thus harder to fix.\n\n### Example\n```javascript\n describe('baz', () => {\n   //...\n });\n\n describe('baz', () => {\n   // Has the same title as a previous test suite\n   // ...\n });\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-identical-title"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule looks at the title of every test and test suite.\nIt will report when two test suites or two test cases at the same level of a test suite have the same title.\n\n### Why is this bad?\n\nHaving identical titles for two different tests or test suites may create confusion.\nFor example, when a test with the same title as another test in the same test suite fails, it is harder to know which one failed and thus harder to fix.\n\n### Example\n```javascript\n describe('baz', () => {\n   //...\n });\n\n describe('baz', () => {\n   // Has the same title as a previous test suite\n   // ...\n });\n```\n"
        },
        "jest/no-interpolation-in-snapshots": {
          "description": "### What it does\n\nPrevents the use of string interpolations in snapshots.\n\n### Why is this bad?\n\nInterpolation prevents snapshots from being updated. Instead, properties should\nbe overloaded with a matcher by using\n[property matchers](https://jestjs.io/docs/en/snapshot-testing#property-matchers).\n\n### Example\n\n```javascript\nexpect(something).toMatchInlineSnapshot(\n  `Object {\n    property: ${interpolated}\n  }`,\n);\n\nexpect(something).toMatchInlineSnapshot(\n  { other: expect.any(Number) },\n  `Object {\n    other: Any<Number>,\n    property: ${interpolated}\n  }`,\n);\n\nexpect(errorThrowingFunction).toThrowErrorMatchingInlineSnapshot(\n  `${interpolated}`,\n);\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-interpolation-in-snapshots"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nPrevents the use of string interpolations in snapshots.\n\n### Why is this bad?\n\nInterpolation prevents snapshots from being updated. Instead, properties should\nbe overloaded with a matcher by using\n[property matchers](https://jestjs.io/docs/en/snapshot-testing#property-matchers).\n\n### Example\n\n```javascript\nexpect(something).toMatchInlineSnapshot(\n  `Object {\n    property: ${interpolated}\n  }`,\n);\n\nexpect(something).toMatchInlineSnapshot(\n  { other: expect.any(Number) },\n  `Object {\n    other: Any<Number>,\n    property: ${interpolated}\n  }`,\n);\n\nexpect(errorThrowingFunction).toThrowErrorMatchingInlineSnapshot(\n  `${interpolated}`,\n);\n```\n"
        },
        "jest/no-jasmine-globals": {
          "description": "### What it does\n\nThis rule reports on any usage of Jasmine globals, which is not ported to Jest, and suggests alternatives from Jest's own API.\n\n### Example\n```javascript\njasmine.DEFAULT_TIMEOUT_INTERVAL = 5000;\ntest('my test', () => {\n    pending();\n});\ntest('my test', () => {\n    jasmine.createSpy();\n});\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-jasmine-globals"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule reports on any usage of Jasmine globals, which is not ported to Jest, and suggests alternatives from Jest's own API.\n\n### Example\n```javascript\njasmine.DEFAULT_TIMEOUT_INTERVAL = 5000;\ntest('my test', () => {\n    pending();\n});\ntest('my test', () => {\n    jasmine.createSpy();\n});\n```\n"
        },
        "jest/no-large-snapshots": {
          "description": "### What it does\n\nWhen using Jest's snapshot capability one should be mindful of the size of\ncreated snapshots. As a general best practice snapshots should be limited in\nsize in order to be more manageable and reviewable. A stored snapshot is only as\ngood as its review and as such keeping it short, sweet, and readable is\nimportant to allow for thorough reviews.\n\n### Example\n\n```javascript\n\n// invalid\nexports[`a large snapshot 1`] = `\nline 1\nline 2\nline 3\nline 4\nline 5\nline 6\nline 7\nline 8\nline 9\nline 10\nline 11\nline 12\nline 13\nline 14\nline 15\nline 16\nline 17\nline 18\nline 19\nline 20\nline 21\nline 22\nline 23\nline 24\nline 25\nline 26\nline 27\nline 28\nline 29\nline 30\nline 31\nline 32\nline 33\nline 34\nline 35\nline 36\nline 37\nline 38\nline 39\nline 40\nline 41\nline 42\nline 43\nline 44\nline 45\nline 46\nline 47\nline 48\nline 49\nline 50\nline 51\n`;\n\n// valid\nexports[`a more manageable and readable snapshot 1`] = `\nline 1\nline 2\nline 3\nline 4\n`;\n```\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-large-snapshots"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nWhen using Jest's snapshot capability one should be mindful of the size of\ncreated snapshots. As a general best practice snapshots should be limited in\nsize in order to be more manageable and reviewable. A stored snapshot is only as\ngood as its review and as such keeping it short, sweet, and readable is\nimportant to allow for thorough reviews.\n\n### Example\n\n```javascript\n\n// invalid\nexports[`a large snapshot 1`] = `\nline 1\nline 2\nline 3\nline 4\nline 5\nline 6\nline 7\nline 8\nline 9\nline 10\nline 11\nline 12\nline 13\nline 14\nline 15\nline 16\nline 17\nline 18\nline 19\nline 20\nline 21\nline 22\nline 23\nline 24\nline 25\nline 26\nline 27\nline 28\nline 29\nline 30\nline 31\nline 32\nline 33\nline 34\nline 35\nline 36\nline 37\nline 38\nline 39\nline 40\nline 41\nline 42\nline 43\nline 44\nline 45\nline 46\nline 47\nline 48\nline 49\nline 50\nline 51\n`;\n\n// valid\nexports[`a more manageable and readable snapshot 1`] = `\nline 1\nline 2\nline 3\nline 4\n`;\n```\n\n"
        },
        "jest/no-mocks-import": {
          "description": "### What it does\n\nThis rule reports imports from a path containing a __mocks__ component.\n\n### Example\n```javascript\nimport thing from './__mocks__/index';\nrequire('./__mocks__/index');\nrequire('__mocks__');\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-mocks-import"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule reports imports from a path containing a __mocks__ component.\n\n### Example\n```javascript\nimport thing from './__mocks__/index';\nrequire('./__mocks__/index');\nrequire('__mocks__');\n\n"
        },
        "jest/no-restricted-jest-methods": {
          "description": "### What it does\n\nRestrict the use of specific `jest` methods.\n\n### Example\n```javascript\njest.useFakeTimers();\nit('calls the callback after 1 second via advanceTimersByTime', () => {\n  // ...\n\n  jest.advanceTimersByTime(1000);\n\n  // ...\n});\n\ntest('plays video', () => {\n  const spy = jest.spyOn(video, 'play');\n\n  // ...\n});\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-restricted-jest-methods"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nRestrict the use of specific `jest` methods.\n\n### Example\n```javascript\njest.useFakeTimers();\nit('calls the callback after 1 second via advanceTimersByTime', () => {\n  // ...\n\n  jest.advanceTimersByTime(1000);\n\n  // ...\n});\n\ntest('plays video', () => {\n  const spy = jest.spyOn(video, 'play');\n\n  // ...\n});\n\n"
        },
        "jest/no-restricted-matchers": {
          "description": "### What it does\n\nBan specific matchers & modifiers from being used, and can suggest alternatives.\n\n### Example\n```javascript\n\nit('is false', () => {\n  if this has a modifier (i.e. `not.toBeFalsy`), it would be considered fine\n  expect(a).toBeFalsy();\n});\n\nit('resolves', async () => {\n  // all uses of this modifier are disallowed, regardless of matcher\n  await expect(myPromise()).resolves.toBe(true);\n});\n\ndescribe('when an error happens', () => {\n  it('does not upload the file', async () => {\n    // all uses of this matcher are disallowed\n    expect(uploadFileMock).not.toHaveBeenCalledWith('file.name');\n  });\n});\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-restricted-matchers"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nBan specific matchers & modifiers from being used, and can suggest alternatives.\n\n### Example\n```javascript\n\nit('is false', () => {\n  if this has a modifier (i.e. `not.toBeFalsy`), it would be considered fine\n  expect(a).toBeFalsy();\n});\n\nit('resolves', async () => {\n  // all uses of this modifier are disallowed, regardless of matcher\n  await expect(myPromise()).resolves.toBe(true);\n});\n\ndescribe('when an error happens', () => {\n  it('does not upload the file', async () => {\n    // all uses of this matcher are disallowed\n    expect(uploadFileMock).not.toHaveBeenCalledWith('file.name');\n  });\n});\n\n"
        },
        "jest/no-standalone-expect": {
          "description": "### What it does\n\nPrevents `expect` statements outside of a `test` or `it` block. An `expect`\nwithin a helper function (but outside of a `test` or `it` block) will not\ntrigger this rule.\n\nStatements like `expect.hasAssertions()` will NOT trigger this rule since these\ncalls will execute if they are not in a test block.\n\n### Example\n```javascript\ndescribe('a test', () => {\n    expect(1).toBe(1);\n});\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-standalone-expect"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nPrevents `expect` statements outside of a `test` or `it` block. An `expect`\nwithin a helper function (but outside of a `test` or `it` block) will not\ntrigger this rule.\n\nStatements like `expect.hasAssertions()` will NOT trigger this rule since these\ncalls will execute if they are not in a test block.\n\n### Example\n```javascript\ndescribe('a test', () => {\n    expect(1).toBe(1);\n});\n```\n"
        },
        "jest/no-test-prefixes": {
          "description": "### What it does\n\nRequire using `.only` and `.skip` over `f` and `x`.\n\n### Why is this bad?\n\nJest allows you to choose how you want to define focused and skipped tests,\nwith multiple permutations for each:\n- only & skip: it.only, test.only, describe.only, it.skip, test.skip, describe.skip.\n- 'f' & 'x': fit, fdescribe, xit, xtest, xdescribe.\n\nThis rule enforces usages from the only & skip list.\n\n### Example\n```javascript\nfit('foo'); // invalid\nfdescribe('foo'); // invalid\nxit('foo'); // invalid\nxtest('foo'); // invalid\nxdescribe('foo'); // invalid\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-test-prefixes"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nRequire using `.only` and `.skip` over `f` and `x`.\n\n### Why is this bad?\n\nJest allows you to choose how you want to define focused and skipped tests,\nwith multiple permutations for each:\n- only & skip: it.only, test.only, describe.only, it.skip, test.skip, describe.skip.\n- 'f' & 'x': fit, fdescribe, xit, xtest, xdescribe.\n\nThis rule enforces usages from the only & skip list.\n\n### Example\n```javascript\nfit('foo'); // invalid\nfdescribe('foo'); // invalid\nxit('foo'); // invalid\nxtest('foo'); // invalid\nxdescribe('foo'); // invalid\n```\n"
        },
        "jest/no-test-return-statement": {
          "description": "### What it does\n\nDisallow explicitly returning from tests.\n\n### Why is this bad?\n\nTests in Jest should be void and not return values.\nIf you are returning Promises then you should update the test to use\n`async/await`.\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-test-return-statement"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow explicitly returning from tests.\n\n### Why is this bad?\n\nTests in Jest should be void and not return values.\nIf you are returning Promises then you should update the test to use\n`async/await`.\n\n### Example\n```javascript\n```\n"
        },
        "jest/no-untyped-mock-factory": {
          "description": "### What it does\n\nThis rule triggers a warning if `mock()` or `doMock()` is used without a generic\ntype parameter or return type.\n\n### Why is this bad?\n\nBy default, `jest.mock` and `jest.doMock` allow any type to be returned by a\nmock factory. A generic type parameter can be used to enforce that the factory\nreturns an object with the same shape as the original module, or some other\nstrict type. Requiring a type makes it easier to use TypeScript to catch changes\nneeded in test mocks when the source module changes.\n\n### Example\n\n// invalid\n```typescript\njest.mock('../moduleName', () => {\n    return jest.fn(() => 42);\n});\n\njest.mock('./module', () => ({\n    ...jest.requireActual('./module'),\n    foo: jest.fn(),\n}));\n\njest.mock('random-num', () => {\n    return jest.fn(() => 42);\n});\n```\n\n// valid\n```typescript\n\n// Uses typeof import()\njest.mock<typeof import('../moduleName')>('../moduleName', () => {\n    return jest.fn(() => 42);\n});\n\njest.mock<typeof import('./module')>('./module', () => ({\n    ...jest.requireActual('./module'),\n    foo: jest.fn(),\n}));\n\n// Uses custom type\njest.mock<() => number>('random-num', () => {\n    return jest.fn(() => 42);\n});\n\n// No factory\njest.mock('random-num');\n\n// Virtual mock\njest.mock(\n    '../moduleName',\n    () => {\n        return jest.fn(() => 42);\n    },\n    { virtual: true },\n);\n```\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-untyped-mock-factory"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule triggers a warning if `mock()` or `doMock()` is used without a generic\ntype parameter or return type.\n\n### Why is this bad?\n\nBy default, `jest.mock` and `jest.doMock` allow any type to be returned by a\nmock factory. A generic type parameter can be used to enforce that the factory\nreturns an object with the same shape as the original module, or some other\nstrict type. Requiring a type makes it easier to use TypeScript to catch changes\nneeded in test mocks when the source module changes.\n\n### Example\n\n// invalid\n```typescript\njest.mock('../moduleName', () => {\n    return jest.fn(() => 42);\n});\n\njest.mock('./module', () => ({\n    ...jest.requireActual('./module'),\n    foo: jest.fn(),\n}));\n\njest.mock('random-num', () => {\n    return jest.fn(() => 42);\n});\n```\n\n// valid\n```typescript\n\n// Uses typeof import()\njest.mock<typeof import('../moduleName')>('../moduleName', () => {\n    return jest.fn(() => 42);\n});\n\njest.mock<typeof import('./module')>('./module', () => ({\n    ...jest.requireActual('./module'),\n    foo: jest.fn(),\n}));\n\n// Uses custom type\njest.mock<() => number>('random-num', () => {\n    return jest.fn(() => 42);\n});\n\n// No factory\njest.mock('random-num');\n\n// Virtual mock\njest.mock(\n    '../moduleName',\n    () => {\n        return jest.fn(() => 42);\n    },\n    { virtual: true },\n);\n```\n\n"
        },
        "jest/prefer-called-with": {
          "description": "### What it does\nSuggest using `toBeCalledWith()` or `toHaveBeenCalledWith()`\n\n### Example\n\n```javascript\n\n// valid\nexpect(noArgsFunction).toBeCalledWith();\nexpect(roughArgsFunction).toBeCalledWith(expect.anything(), expect.any(Date));\nexpect(anyArgsFunction).toBeCalledTimes(1);\nexpect(uncalledFunction).not.toBeCalled();\n\n// invalid\nexpect(someFunction).toBeCalled();\nexpect(someFunction).toHaveBeenCalled();\n```\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-called-with"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nSuggest using `toBeCalledWith()` or `toHaveBeenCalledWith()`\n\n### Example\n\n```javascript\n\n// valid\nexpect(noArgsFunction).toBeCalledWith();\nexpect(roughArgsFunction).toBeCalledWith(expect.anything(), expect.any(Date));\nexpect(anyArgsFunction).toBeCalledTimes(1);\nexpect(uncalledFunction).not.toBeCalled();\n\n// invalid\nexpect(someFunction).toBeCalled();\nexpect(someFunction).toHaveBeenCalled();\n```\n\n"
        },
        "jest/prefer-comparison-matcher": {
          "description": "### What it does\n\nThis rule checks for comparisons in tests that could be replaced with one of the\nfollowing built-in comparison matchers:\n- `toBeGreaterThan`\n- `toBeGreaterThanOrEqual`\n- `toBeLessThan`\n- `toBeLessThanOrEqual`\n\n### Examples\n\n```js\n// invalid\nexpect(x > 5).toBe(true);\nexpect(x < 7).not.toEqual(true);\nexpect(x <= y).toStrictEqual(true);\n```\n\n```js ///\n// valid\nexpect(x).toBeGreaterThan(5);\nexpect(x).not.toBeLessThanOrEqual(7);\nexpect(x).toBeLessThanOrEqual(y);\n// special case - see below\nexpect(x < 'Carl').toBe(true);\n```\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-comparison-matcher"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule checks for comparisons in tests that could be replaced with one of the\nfollowing built-in comparison matchers:\n- `toBeGreaterThan`\n- `toBeGreaterThanOrEqual`\n- `toBeLessThan`\n- `toBeLessThanOrEqual`\n\n### Examples\n\n```js\n// invalid\nexpect(x > 5).toBe(true);\nexpect(x < 7).not.toEqual(true);\nexpect(x <= y).toStrictEqual(true);\n```\n\n```js ///\n// valid\nexpect(x).toBeGreaterThan(5);\nexpect(x).not.toBeLessThanOrEqual(7);\nexpect(x).toBeLessThanOrEqual(y);\n// special case - see below\nexpect(x < 'Carl').toBe(true);\n```\n\n"
        },
        "jest/prefer-equality-matcher": {
          "description": "### What it does\nJest has built-in matchers for expecting equality, which allow for more readable\ntests and error messages if an expectation fails.\n\n### Example\n\n```javascript\n// invalid\nexpect(x === 5).toBe(true);\nexpect(name === 'Carl').not.toEqual(true);\nexpect(myObj !== thatObj).toStrictEqual(true);\n\n// valid\nexpect(x).toBe(5);\nexpect(name).not.toEqual('Carl');\nexpect(myObj).toStrictEqual(thatObj);\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-equality-matcher"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nJest has built-in matchers for expecting equality, which allow for more readable\ntests and error messages if an expectation fails.\n\n### Example\n\n```javascript\n// invalid\nexpect(x === 5).toBe(true);\nexpect(name === 'Carl').not.toEqual(true);\nexpect(myObj !== thatObj).toStrictEqual(true);\n\n// valid\nexpect(x).toBe(5);\nexpect(name).not.toEqual('Carl');\nexpect(myObj).toStrictEqual(thatObj);\n```\n"
        },
        "jest/prefer-expect-resolves": {
          "description": "### What it does\n\nWhen working with promises, there are two primary ways you can test the resolved\nvalue:\n1. use the `resolve` modifier on `expect`\n(`await expect(...).resolves.<matcher>` style)\n2. `await` the promise and assert against its result\n(`expect(await ...).<matcher>` style)\n\nWhile the second style is arguably less dependent on `jest`, if the promise\nrejects it will be treated as a general error, resulting in less predictable\nbehaviour and output from `jest`.\n\nAdditionally, favoring the first style ensures consistency with its `rejects`\ncounterpart, as there is no way of \"awaiting\" a rejection.\n\n### Example\n\n```javascript\n// valid\nit('passes', async () => {\n    await expect(someValue()).resolves.toBe(true);\n});\nit('is true', async () => {\n    const myPromise = Promise.resolve(true);\n\n    await expect(myPromise).resolves.toBe(true);\n});\n\nit('errors', async () => {\n    await expect(Promise.reject(new Error('oh noes!'))).rejects.toThrowError(\n        'oh noes!',\n    );\n});\n\n// invalid\nit('passes', async () => {\n    expect(await someValue()).toBe(true);\n});\nit('is true', async () => {\n    const myPromise = Promise.resolve(true);\n    expect(await myPromise).toBe(true);\n});\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-expect-resolves"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nWhen working with promises, there are two primary ways you can test the resolved\nvalue:\n1. use the `resolve` modifier on `expect`\n(`await expect(...).resolves.<matcher>` style)\n2. `await` the promise and assert against its result\n(`expect(await ...).<matcher>` style)\n\nWhile the second style is arguably less dependent on `jest`, if the promise\nrejects it will be treated as a general error, resulting in less predictable\nbehaviour and output from `jest`.\n\nAdditionally, favoring the first style ensures consistency with its `rejects`\ncounterpart, as there is no way of \"awaiting\" a rejection.\n\n### Example\n\n```javascript\n// valid\nit('passes', async () => {\n    await expect(someValue()).resolves.toBe(true);\n});\nit('is true', async () => {\n    const myPromise = Promise.resolve(true);\n\n    await expect(myPromise).resolves.toBe(true);\n});\n\nit('errors', async () => {\n    await expect(Promise.reject(new Error('oh noes!'))).rejects.toThrowError(\n        'oh noes!',\n    );\n});\n\n// invalid\nit('passes', async () => {\n    expect(await someValue()).toBe(true);\n});\nit('is true', async () => {\n    const myPromise = Promise.resolve(true);\n    expect(await myPromise).toBe(true);\n});\n```\n"
        },
        "jest/prefer-hooks-in-order": {
          "description": "### What it does\n\nWhile hooks can be setup in any order, they're always called by `jest` in this\nspecific order:\n1. `beforeAll`\n2. `beforeEach`\n3. `afterEach`\n4. `afterAll`\n\nThis rule aims to make that more obvious by enforcing grouped hooks be setup in\nthat order within tests.\n\n### Example\n\n```javascript\n// invalid\ndescribe('foo', () => {\n    beforeEach(() => {\n        seedMyDatabase();\n    });\n    beforeAll(() => {\n        createMyDatabase();\n    });\n    it('accepts this input', () => {\n        // ...\n    });\n    it('returns that value', () => {\n        // ...\n    });\n    describe('when the database has specific values', () => {\n        const specificValue = '...';\n        beforeEach(() => {\n            seedMyDatabase(specificValue);\n        });\n\n        it('accepts that input', () => {\n            // ...\n        });\n        it('throws an error', () => {\n            // ...\n        });\n        afterEach(() => {\n            clearLogger();\n        });\n        beforeEach(() => {\n            mockLogger();\n        });\n        it('logs a message', () => {\n            // ...\n        });\n    });\n    afterAll(() => {\n        removeMyDatabase();\n    });\n});\n```\n\n```javascript\n// valid\ndescribe('foo', () => {\n    beforeAll(() => {\n        createMyDatabase();\n    });\n\n    beforeEach(() => {\n        seedMyDatabase();\n    });\n\n    it('accepts this input', () => {\n        // ...\n    });\n    it('returns that value', () => {\n        // ...\n    });\n    describe('when the database has specific values', () => {\n        const specificValue = '...';\n        beforeEach(() => {\n            seedMyDatabase(specificValue);\n        });\n        it('accepts that input', () => {\n            // ...\n        });\n        it('throws an error', () => {\n            // ...\n        });\n        beforeEach(() => {\n            mockLogger();\n        });\n        afterEach(() => {\n            clearLogger();\n        });\n        it('logs a message', () => {\n            // ...\n        });\n    });\n    afterAll(() => {\n        removeMyDatabase();\n    });\n});\n```\n\n\nThis rule is compatible with [eslint-plugin-vitest](https://github.com/veritem/eslint-plugin-vitest/blob/main/docs/rules/prefer-hooks-in-order.md),\nto use it, add the following configuration to your `.eslintrc.json`:\n\n```json\n{\n  \"rules\": {\n     \"vitest/prefer-hooks-in-order\": \"error\"\n  }\n}\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-hooks-in-order"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nWhile hooks can be setup in any order, they're always called by `jest` in this\nspecific order:\n1. `beforeAll`\n2. `beforeEach`\n3. `afterEach`\n4. `afterAll`\n\nThis rule aims to make that more obvious by enforcing grouped hooks be setup in\nthat order within tests.\n\n### Example\n\n```javascript\n// invalid\ndescribe('foo', () => {\n    beforeEach(() => {\n        seedMyDatabase();\n    });\n    beforeAll(() => {\n        createMyDatabase();\n    });\n    it('accepts this input', () => {\n        // ...\n    });\n    it('returns that value', () => {\n        // ...\n    });\n    describe('when the database has specific values', () => {\n        const specificValue = '...';\n        beforeEach(() => {\n            seedMyDatabase(specificValue);\n        });\n\n        it('accepts that input', () => {\n            // ...\n        });\n        it('throws an error', () => {\n            // ...\n        });\n        afterEach(() => {\n            clearLogger();\n        });\n        beforeEach(() => {\n            mockLogger();\n        });\n        it('logs a message', () => {\n            // ...\n        });\n    });\n    afterAll(() => {\n        removeMyDatabase();\n    });\n});\n```\n\n```javascript\n// valid\ndescribe('foo', () => {\n    beforeAll(() => {\n        createMyDatabase();\n    });\n\n    beforeEach(() => {\n        seedMyDatabase();\n    });\n\n    it('accepts this input', () => {\n        // ...\n    });\n    it('returns that value', () => {\n        // ...\n    });\n    describe('when the database has specific values', () => {\n        const specificValue = '...';\n        beforeEach(() => {\n            seedMyDatabase(specificValue);\n        });\n        it('accepts that input', () => {\n            // ...\n        });\n        it('throws an error', () => {\n            // ...\n        });\n        beforeEach(() => {\n            mockLogger();\n        });\n        afterEach(() => {\n            clearLogger();\n        });\n        it('logs a message', () => {\n            // ...\n        });\n    });\n    afterAll(() => {\n        removeMyDatabase();\n    });\n});\n```\n\n\nThis rule is compatible with [eslint-plugin-vitest](https://github.com/veritem/eslint-plugin-vitest/blob/main/docs/rules/prefer-hooks-in-order.md),\nto use it, add the following configuration to your `.eslintrc.json`:\n\n```json\n{\n  \"rules\": {\n     \"vitest/prefer-hooks-in-order\": \"error\"\n  }\n}\n"
        },
        "jest/prefer-hooks-on-top": {
          "description": "### What it does\n\nWhile hooks can be setup anywhere in a test file, they are always called in a\nspecific order, which means it can be confusing if they're intermixed with test\ncases.\n\n### Example\n\n```javascript\n// invalid\ndescribe('foo', () => {\n    beforeEach(() => {\n        seedMyDatabase();\n    });\n\n    it('accepts this input', () => {\n        // ...\n    });\n\n    beforeAll(() => {\n        createMyDatabase();\n    });\n\n    it('returns that value', () => {\n        // ...\n    });\n\n    describe('when the database has specific values', () => {\n        const specificValue = '...';\n        beforeEach(() => {\n            seedMyDatabase(specificValue);\n        });\n\n        it('accepts that input', () => {\n            // ...\n        });\n\n        it('throws an error', () => {\n            // ...\n        });\n\n        afterEach(() => {\n            clearLogger();\n        });\n\n        beforeEach(() => {\n            mockLogger();\n        });\n\n        it('logs a message', () => {\n            // ...\n        });\n    });\n\n    afterAll(() => {\n        removeMyDatabase();\n    });\n});\n\n// valid\ndescribe('foo', () => {\n    beforeAll(() => {\n        createMyDatabase();\n    });\n\n    beforeEach(() => {\n        seedMyDatabase();\n    });\n\n    afterAll(() => {\n        clearMyDatabase();\n    });\n\n    it('accepts this input', () => {\n        // ...\n    });\n\n    it('returns that value', () => {\n        // ...\n    });\n\n    describe('when the database has specific values', () => {\n        const specificValue = '...';\n\n        beforeEach(() => {\n            seedMyDatabase(specificValue);\n        });\n\n        beforeEach(() => {\n            mockLogger();\n        });\n\n        afterEach(() => {\n            clearLogger();\n        });\n\n        it('accepts that input', () => {\n            // ...\n        });\n\n        it('throws an error', () => {\n            // ...\n        });\n\n        it('logs a message', () => {\n            // ...\n        });\n    });\n});\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-hooks-on-top"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nWhile hooks can be setup anywhere in a test file, they are always called in a\nspecific order, which means it can be confusing if they're intermixed with test\ncases.\n\n### Example\n\n```javascript\n// invalid\ndescribe('foo', () => {\n    beforeEach(() => {\n        seedMyDatabase();\n    });\n\n    it('accepts this input', () => {\n        // ...\n    });\n\n    beforeAll(() => {\n        createMyDatabase();\n    });\n\n    it('returns that value', () => {\n        // ...\n    });\n\n    describe('when the database has specific values', () => {\n        const specificValue = '...';\n        beforeEach(() => {\n            seedMyDatabase(specificValue);\n        });\n\n        it('accepts that input', () => {\n            // ...\n        });\n\n        it('throws an error', () => {\n            // ...\n        });\n\n        afterEach(() => {\n            clearLogger();\n        });\n\n        beforeEach(() => {\n            mockLogger();\n        });\n\n        it('logs a message', () => {\n            // ...\n        });\n    });\n\n    afterAll(() => {\n        removeMyDatabase();\n    });\n});\n\n// valid\ndescribe('foo', () => {\n    beforeAll(() => {\n        createMyDatabase();\n    });\n\n    beforeEach(() => {\n        seedMyDatabase();\n    });\n\n    afterAll(() => {\n        clearMyDatabase();\n    });\n\n    it('accepts this input', () => {\n        // ...\n    });\n\n    it('returns that value', () => {\n        // ...\n    });\n\n    describe('when the database has specific values', () => {\n        const specificValue = '...';\n\n        beforeEach(() => {\n            seedMyDatabase(specificValue);\n        });\n\n        beforeEach(() => {\n            mockLogger();\n        });\n\n        afterEach(() => {\n            clearLogger();\n        });\n\n        it('accepts that input', () => {\n            // ...\n        });\n\n        it('throws an error', () => {\n            // ...\n        });\n\n        it('logs a message', () => {\n            // ...\n        });\n    });\n});\n```\n"
        },
        "jest/prefer-jest-mocked": {
          "description": "### What it does\n\nWhen working with mocks of functions using Jest, it's recommended to use the\n`jest.mocked()` helper function to properly type the mocked functions. This rule\nenforces the use of `jest.mocked()` for better type safety and readability.\n\nRestricted types:\n\n\n- `jest.Mock`\n- `jest.MockedFunction`\n- `jest.MockedClass`\n- `jest.MockedObject`\n\n### Examples\n\n```typescript\n// invalid\n(foo as jest.Mock).mockReturnValue(1);\nconst mock = (foo as jest.Mock).mockReturnValue(1);\n(foo as unknown as jest.Mock).mockReturnValue(1);\n(Obj.foo as jest.Mock).mockReturnValue(1);\n([].foo as jest.Mock).mockReturnValue(1);\n\n// valid\njest.mocked(foo).mockReturnValue(1);\nconst mock = jest.mocked(foo).mockReturnValue(1);\njest.mocked(Obj.foo).mockReturnValue(1);\njest.mocked([].foo).mockReturnValue(1);\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-jest-mocked"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nWhen working with mocks of functions using Jest, it's recommended to use the\n`jest.mocked()` helper function to properly type the mocked functions. This rule\nenforces the use of `jest.mocked()` for better type safety and readability.\n\nRestricted types:\n\n\n- `jest.Mock`\n- `jest.MockedFunction`\n- `jest.MockedClass`\n- `jest.MockedObject`\n\n### Examples\n\n```typescript\n// invalid\n(foo as jest.Mock).mockReturnValue(1);\nconst mock = (foo as jest.Mock).mockReturnValue(1);\n(foo as unknown as jest.Mock).mockReturnValue(1);\n(Obj.foo as jest.Mock).mockReturnValue(1);\n([].foo as jest.Mock).mockReturnValue(1);\n\n// valid\njest.mocked(foo).mockReturnValue(1);\nconst mock = jest.mocked(foo).mockReturnValue(1);\njest.mocked(Obj.foo).mockReturnValue(1);\njest.mocked([].foo).mockReturnValue(1);\n```\n"
        },
        "jest/prefer-lowercase-title": {
          "description": "### What it does\n\nEnforce `it`, `test` and `describe` to have descriptions that begin with a\nlowercase letter. This provides more readable test failures. This rule is not\nenabled by default.\n\n### Example\n\n```javascript\n// invalid\nit('Adds 1 + 2 to equal 3', () => {\n    expect(sum(1, 2)).toBe(3);\n});\n\n// valid\nit('adds 1 + 2 to equal 3', () => {\n    expect(sum(1, 2)).toBe(3);\n});\n```\n\n## Options\n```json\n{\n    \"jest/prefer-lowercase-title\": [\n        \"error\",\n        {\n            \"ignore\": [\"describe\", \"test\"]\n        }\n    ]\n}\n```\n\n### `ignore`\n\nThis array option controls which Jest functions are checked by this rule. There\nare three possible values:\n- `\"describe\"`\n- `\"test\"`\n- `\"it\"`\n\nBy default, none of these options are enabled (the equivalent of\n`{ \"ignore\": [] }`).\n\nExample of **correct** code for the `{ \"ignore\": [\"describe\"] }` option:\n```js\n/* eslint jest/prefer-lowercase-title: [\"error\", { \"ignore\": [\"describe\"] }] */\ndescribe('Uppercase description');\n```\n\nExample of **correct** code for the `{ \"ignore\": [\"test\"] }` option:\n\n```js\n/* eslint jest/prefer-lowercase-title: [\"error\", { \"ignore\": [\"test\"] }] */\ntest('Uppercase description');\n```\n\nExample of **correct** code for the `{ \"ignore\": [\"it\"] }` option:\n```js\n/* eslint jest/prefer-lowercase-title: [\"error\", { \"ignore\": [\"it\"] }] */\nit('Uppercase description');\n```\n\n### `allowedPrefixes`\nThis array option allows specifying prefixes, which contain capitals that titles\ncan start with. This can be useful when writing tests for API endpoints, where\nyou'd like to prefix with the HTTP method.\nBy default, nothing is allowed (the equivalent of `{ \"allowedPrefixes\": [] }`).\n\nExample of **correct** code for the `{ \"allowedPrefixes\": [\"GET\"] }` option:\n```js\n/* eslint jest/prefer-lowercase-title: [\"error\", { \"allowedPrefixes\": [\"GET\"] }] */\ndescribe('GET /live');\n```\n\n### `ignoreTopLevelDescribe`\nThis option can be set to allow only the top-level `describe` blocks to have a\ntitle starting with an upper-case letter.\nExample of **correct** code for the `{ \"ignoreTopLevelDescribe\": true }` option:\n\n```js\n/* eslint jest/prefer-lowercase-title: [\"error\", { \"ignoreTopLevelDescribe\": true }] */\ndescribe('MyClass', () => {\n    describe('#myMethod', () => {\n        it('does things', () => {\n            //\n        });\n    });\n});\n```\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-lowercase-title"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforce `it`, `test` and `describe` to have descriptions that begin with a\nlowercase letter. This provides more readable test failures. This rule is not\nenabled by default.\n\n### Example\n\n```javascript\n// invalid\nit('Adds 1 + 2 to equal 3', () => {\n    expect(sum(1, 2)).toBe(3);\n});\n\n// valid\nit('adds 1 + 2 to equal 3', () => {\n    expect(sum(1, 2)).toBe(3);\n});\n```\n\n## Options\n```json\n{\n    \"jest/prefer-lowercase-title\": [\n        \"error\",\n        {\n            \"ignore\": [\"describe\", \"test\"]\n        }\n    ]\n}\n```\n\n### `ignore`\n\nThis array option controls which Jest functions are checked by this rule. There\nare three possible values:\n- `\"describe\"`\n- `\"test\"`\n- `\"it\"`\n\nBy default, none of these options are enabled (the equivalent of\n`{ \"ignore\": [] }`).\n\nExample of **correct** code for the `{ \"ignore\": [\"describe\"] }` option:\n```js\n/* eslint jest/prefer-lowercase-title: [\"error\", { \"ignore\": [\"describe\"] }] */\ndescribe('Uppercase description');\n```\n\nExample of **correct** code for the `{ \"ignore\": [\"test\"] }` option:\n\n```js\n/* eslint jest/prefer-lowercase-title: [\"error\", { \"ignore\": [\"test\"] }] */\ntest('Uppercase description');\n```\n\nExample of **correct** code for the `{ \"ignore\": [\"it\"] }` option:\n```js\n/* eslint jest/prefer-lowercase-title: [\"error\", { \"ignore\": [\"it\"] }] */\nit('Uppercase description');\n```\n\n### `allowedPrefixes`\nThis array option allows specifying prefixes, which contain capitals that titles\ncan start with. This can be useful when writing tests for API endpoints, where\nyou'd like to prefix with the HTTP method.\nBy default, nothing is allowed (the equivalent of `{ \"allowedPrefixes\": [] }`).\n\nExample of **correct** code for the `{ \"allowedPrefixes\": [\"GET\"] }` option:\n```js\n/* eslint jest/prefer-lowercase-title: [\"error\", { \"allowedPrefixes\": [\"GET\"] }] */\ndescribe('GET /live');\n```\n\n### `ignoreTopLevelDescribe`\nThis option can be set to allow only the top-level `describe` blocks to have a\ntitle starting with an upper-case letter.\nExample of **correct** code for the `{ \"ignoreTopLevelDescribe\": true }` option:\n\n```js\n/* eslint jest/prefer-lowercase-title: [\"error\", { \"ignoreTopLevelDescribe\": true }] */\ndescribe('MyClass', () => {\n    describe('#myMethod', () => {\n        it('does things', () => {\n            //\n        });\n    });\n});\n```\n\n"
        },
        "jest/prefer-mock-promise-shorthand": {
          "description": "### What it does\n\nWhen working with mocks of functions that return promises, Jest provides some\nAPI sugar functions to reduce the amount of boilerplate you have to write.\nThese methods should be preferred when possible.\n\n### Example\n\n```javascript\n// invalid\njest.fn().mockImplementation(() => Promise.resolve(123));\njest\n  .spyOn(fs.promises, 'readFile')\n  .mockReturnValue(Promise.reject(new Error('oh noes!')));\n\nmyFunction\n  .mockReturnValueOnce(Promise.resolve(42))\n  .mockImplementationOnce(() => Promise.resolve(42))\n  .mockReturnValue(Promise.reject(new Error('too many calls!')));\n```\n\n// valid\n```javascript\njest.fn().mockResolvedValue(123);\njest.spyOn(fs.promises, 'readFile').mockRejectedValue(new Error('oh noes!'));\n\nmyFunction\n  .mockResolvedValueOnce(42)\n  .mockResolvedValueOnce(42)\n  .mockRejectedValue(new Error('too many calls!'));\n```\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-mock-promise-shorthand"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nWhen working with mocks of functions that return promises, Jest provides some\nAPI sugar functions to reduce the amount of boilerplate you have to write.\nThese methods should be preferred when possible.\n\n### Example\n\n```javascript\n// invalid\njest.fn().mockImplementation(() => Promise.resolve(123));\njest\n  .spyOn(fs.promises, 'readFile')\n  .mockReturnValue(Promise.reject(new Error('oh noes!')));\n\nmyFunction\n  .mockReturnValueOnce(Promise.resolve(42))\n  .mockImplementationOnce(() => Promise.resolve(42))\n  .mockReturnValue(Promise.reject(new Error('too many calls!')));\n```\n\n// valid\n```javascript\njest.fn().mockResolvedValue(123);\njest.spyOn(fs.promises, 'readFile').mockRejectedValue(new Error('oh noes!'));\n\nmyFunction\n  .mockResolvedValueOnce(42)\n  .mockResolvedValueOnce(42)\n  .mockRejectedValue(new Error('too many calls!'));\n```\n\n"
        },
        "jest/prefer-spy-on": {
          "description": "### What it does\n\nWhen mocking a function by overwriting a property you have to manually restore\nthe original implementation when cleaning up. When using `jest.spyOn()` Jest\nkeeps track of changes, and they can be restored with `jest.restoreAllMocks()`,\n`mockFn.mockRestore()` or by setting `restoreMocks` to `true` in the Jest\nconfig.\n\nNote: The mock created by `jest.spyOn()` still behaves the same as the original\nfunction. The original function can be overwritten with\n`mockFn.mockImplementation()` or by some of the\n[other mock functions](https://jestjs.io/docs/en/mock-function-api).\n\n### Example\n\n```javascript\n// invalid\nDate.now = jest.fn();\nDate.now = jest.fn(() => 10);\n\n// valid\njest.spyOn(Date, 'now');\njest.spyOn(Date, 'now').mockImplementation(() => 10);\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-spy-on"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nWhen mocking a function by overwriting a property you have to manually restore\nthe original implementation when cleaning up. When using `jest.spyOn()` Jest\nkeeps track of changes, and they can be restored with `jest.restoreAllMocks()`,\n`mockFn.mockRestore()` or by setting `restoreMocks` to `true` in the Jest\nconfig.\n\nNote: The mock created by `jest.spyOn()` still behaves the same as the original\nfunction. The original function can be overwritten with\n`mockFn.mockImplementation()` or by some of the\n[other mock functions](https://jestjs.io/docs/en/mock-function-api).\n\n### Example\n\n```javascript\n// invalid\nDate.now = jest.fn();\nDate.now = jest.fn(() => 10);\n\n// valid\njest.spyOn(Date, 'now');\njest.spyOn(Date, 'now').mockImplementation(() => 10);\n```\n"
        },
        "jest/prefer-strict-equal": {
          "description": "### What it does\n\nThis rule triggers a warning if `toEqual()` is used to assert equality.\n\n### Example\n\n```javascript\n// invalid\nexpect({ a: 'a', b: undefined }).toEqual({ a: 'a' });\n\n// valid\nexpect({ a: 'a', b: undefined }).toStrictEqual({ a: 'a' });\n```\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-strict-equal"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule triggers a warning if `toEqual()` is used to assert equality.\n\n### Example\n\n```javascript\n// invalid\nexpect({ a: 'a', b: undefined }).toEqual({ a: 'a' });\n\n// valid\nexpect({ a: 'a', b: undefined }).toStrictEqual({ a: 'a' });\n```\n\n"
        },
        "jest/prefer-to-be": {
          "description": "### What it does\n\nWhen asserting against primitive literals such as numbers and strings, the\nequality matchers all operate the same, but read slightly differently in code.\n\nThis rule recommends using the `toBe` matcher in these situations, as it forms\nthe most grammatically natural sentence. For `null`, `undefined`, and `NaN` this\nrule recommends using their specific `toBe` matchers, as they give better error\nmessages as well.\n\n### Example\n\n```javascript\n// valid\nexpect(value).not.toBe(5);\nexpect(getMessage()).toBe('hello world');\nexpect(loadMessage()).resolves.toBe('hello world');\nexpect(didError).not.toBe(true);\nexpect(catchError()).toStrictEqual({ message: 'oh noes!' });\n\n// invalid\nexpect(value).not.toEqual(5);\nexpect(getMessage()).toStrictEqual('hello world');\nexpect(loadMessage()).resolves.toEqual('hello world');\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-to-be"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nWhen asserting against primitive literals such as numbers and strings, the\nequality matchers all operate the same, but read slightly differently in code.\n\nThis rule recommends using the `toBe` matcher in these situations, as it forms\nthe most grammatically natural sentence. For `null`, `undefined`, and `NaN` this\nrule recommends using their specific `toBe` matchers, as they give better error\nmessages as well.\n\n### Example\n\n```javascript\n// valid\nexpect(value).not.toBe(5);\nexpect(getMessage()).toBe('hello world');\nexpect(loadMessage()).resolves.toBe('hello world');\nexpect(didError).not.toBe(true);\nexpect(catchError()).toStrictEqual({ message: 'oh noes!' });\n\n// invalid\nexpect(value).not.toEqual(5);\nexpect(getMessage()).toStrictEqual('hello world');\nexpect(loadMessage()).resolves.toEqual('hello world');\n```\n"
        },
        "jest/prefer-to-contain": {
          "description": "### What it does\n\nIn order to have a better failure message, `toContain()` should be used upon\nasserting expectations on an array containing an object.\n\n### Why is this bad?\n\nTThis rule triggers a warning if `toBe()`, `toEqual()` or `toStrictEqual()` is\nused to assert object inclusion in an array\n\n### Example\n\n```javascript\n// valid\nexpect(a).toContain(b);\nexpect(a).not.toContain(b);\n\n// invalid\nexpect(a.includes(b)).toBe(true);\nexpect(a.includes(b)).not.toBe(true);\nexpect(a.includes(b)).toBe(false);\nexpect(a.includes(b)).toEqual(true);\nexpect(a.includes(b)).toStrictEqual(true);\n```\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-to-contain"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nIn order to have a better failure message, `toContain()` should be used upon\nasserting expectations on an array containing an object.\n\n### Why is this bad?\n\nTThis rule triggers a warning if `toBe()`, `toEqual()` or `toStrictEqual()` is\nused to assert object inclusion in an array\n\n### Example\n\n```javascript\n// valid\nexpect(a).toContain(b);\nexpect(a).not.toContain(b);\n\n// invalid\nexpect(a.includes(b)).toBe(true);\nexpect(a.includes(b)).not.toBe(true);\nexpect(a.includes(b)).toBe(false);\nexpect(a.includes(b)).toEqual(true);\nexpect(a.includes(b)).toStrictEqual(true);\n```\n\n"
        },
        "jest/prefer-to-have-length": {
          "description": "### What it does\n\nIn order to have a better failure message, `toHaveLength()` should be used upon\nasserting expectations on objects length property.\n\n### Why is this bad?\n\nThis rule triggers a warning if `toBe()`, `toEqual()` or `toStrictEqual()` is\nused to assert objects length property.\n\n### Example\n\n```javascript\n// valid\nexpect.hasAssertions;\nexpect.hasAssertions();\nexpect(files).toHaveLength(1);\nexpect(files.name).toBe('file');\n\n// invalid\nexpect(files[\"length\"]).toBe(1);\nexpect(files[\"length\"]).toBe(1,);\nexpect(files[\"length\"])[\"not\"].toBe(1)\n```\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-to-have-length"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nIn order to have a better failure message, `toHaveLength()` should be used upon\nasserting expectations on objects length property.\n\n### Why is this bad?\n\nThis rule triggers a warning if `toBe()`, `toEqual()` or `toStrictEqual()` is\nused to assert objects length property.\n\n### Example\n\n```javascript\n// valid\nexpect.hasAssertions;\nexpect.hasAssertions();\nexpect(files).toHaveLength(1);\nexpect(files.name).toBe('file');\n\n// invalid\nexpect(files[\"length\"]).toBe(1);\nexpect(files[\"length\"]).toBe(1,);\nexpect(files[\"length\"])[\"not\"].toBe(1)\n```\n\n"
        },
        "jest/prefer-todo": {
          "description": "### What it does\nWhen test cases are empty then it is better to mark them as `test.todo` as it\nwill be highlighted in the summary output.\n\n### Why is this bad?\n\nThis rule triggers a warning if empty test cases are used without 'test.todo'.\n\n### Example\n\n```javascript\ntest('i need to write this test'); // invalid\ntest('i need to write this test', () => {}); // invalid\ntest.skip('i need to write this test', () => {}); // invalid\n\ntest.todo('i need to write this test');\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-todo"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nWhen test cases are empty then it is better to mark them as `test.todo` as it\nwill be highlighted in the summary output.\n\n### Why is this bad?\n\nThis rule triggers a warning if empty test cases are used without 'test.todo'.\n\n### Example\n\n```javascript\ntest('i need to write this test'); // invalid\ntest('i need to write this test', () => {}); // invalid\ntest.skip('i need to write this test', () => {}); // invalid\n\ntest.todo('i need to write this test');\n```\n"
        },
        "jest/require-hook": {
          "description": "### What it does\nThis rule flags any expression that is either at the toplevel of a test file or\ndirectly within the body of a `describe`, _except_ for the following:\n\n- `import` statements\n- `const` variables\n- `let` _declarations_, and initializations to `null` or `undefined`\n- Classes\n- Types\n- Calls to the standard Jest globals\n\n### Example\n```javascript\n// invalid\nimport { database, isCity } from '../database';\nimport { Logger } from '../../../src/Logger';\nimport { loadCities } from '../api';\n\njest.mock('../api');\n\nconst initializeCityDatabase = () => {\n    database.addCity('Vienna');\n    database.addCity('San Juan');\n    database.addCity('Wellington');\n};\n\nconst clearCityDatabase = () => {\n    database.clear();\n};\n\ninitializeCityDatabase();\n\ntest('that persists cities', () => {\n    expect(database.cities.length).toHaveLength(3);\n});\ntest('city database has Vienna', () => {\n    expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n    expect(isCity('San Juan')).toBeTruthy();\n});\n\ndescribe('when loading cities from the api', () => {\n    let consoleWarnSpy = jest.spyOn(console, 'warn');\n    loadCities.mockResolvedValue(['Wellington', 'London']);\n\n    it('does not duplicate cities', async () => {\n        await database.loadCities();\n        expect(database.cities).toHaveLength(4);\n    });\n});\nclearCityDatabase();\n\n// valid\nimport { database, isCity } from '../database';\nimport { Logger } from '../../../src/Logger';\nimport { loadCities } from '../api';\n\njest.mock('../api');\nconst initializeCityDatabase = () => {\n    database.addCity('Vienna');\n    database.addCity('San Juan');\n    database.addCity('Wellington');\n};\n\nconst clearCityDatabase = () => {\n    database.clear();\n};\n\nbeforeEach(() => {\n    initializeCityDatabase();\n});\n\ntest('that persists cities', () => {\n    expect(database.cities.length).toHaveLength(3);\n});\n\ntest('city database has Vienna', () => {\n    expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n    expect(isCity('San Juan')).toBeTruthy();\n});\n\ndescribe('when loading cities from the api', () => {\n    let consoleWarnSpy;\n    beforeEach(() => {\n        consoleWarnSpy = jest.spyOn(console, 'warn');\n        loadCities.mockResolvedValue(['Wellington', 'London']);\n    });\n\n    it('does not duplicate cities', async () => {\n        await database.loadCities();\n        expect(database.cities).toHaveLength(4);\n    });\n});\nafterEach(() => {\n    clearCityDatabase();\n});\n```\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/require-hook"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nThis rule flags any expression that is either at the toplevel of a test file or\ndirectly within the body of a `describe`, _except_ for the following:\n\n- `import` statements\n- `const` variables\n- `let` _declarations_, and initializations to `null` or `undefined`\n- Classes\n- Types\n- Calls to the standard Jest globals\n\n### Example\n```javascript\n// invalid\nimport { database, isCity } from '../database';\nimport { Logger } from '../../../src/Logger';\nimport { loadCities } from '../api';\n\njest.mock('../api');\n\nconst initializeCityDatabase = () => {\n    database.addCity('Vienna');\n    database.addCity('San Juan');\n    database.addCity('Wellington');\n};\n\nconst clearCityDatabase = () => {\n    database.clear();\n};\n\ninitializeCityDatabase();\n\ntest('that persists cities', () => {\n    expect(database.cities.length).toHaveLength(3);\n});\ntest('city database has Vienna', () => {\n    expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n    expect(isCity('San Juan')).toBeTruthy();\n});\n\ndescribe('when loading cities from the api', () => {\n    let consoleWarnSpy = jest.spyOn(console, 'warn');\n    loadCities.mockResolvedValue(['Wellington', 'London']);\n\n    it('does not duplicate cities', async () => {\n        await database.loadCities();\n        expect(database.cities).toHaveLength(4);\n    });\n});\nclearCityDatabase();\n\n// valid\nimport { database, isCity } from '../database';\nimport { Logger } from '../../../src/Logger';\nimport { loadCities } from '../api';\n\njest.mock('../api');\nconst initializeCityDatabase = () => {\n    database.addCity('Vienna');\n    database.addCity('San Juan');\n    database.addCity('Wellington');\n};\n\nconst clearCityDatabase = () => {\n    database.clear();\n};\n\nbeforeEach(() => {\n    initializeCityDatabase();\n});\n\ntest('that persists cities', () => {\n    expect(database.cities.length).toHaveLength(3);\n});\n\ntest('city database has Vienna', () => {\n    expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n    expect(isCity('San Juan')).toBeTruthy();\n});\n\ndescribe('when loading cities from the api', () => {\n    let consoleWarnSpy;\n    beforeEach(() => {\n        consoleWarnSpy = jest.spyOn(console, 'warn');\n        loadCities.mockResolvedValue(['Wellington', 'London']);\n    });\n\n    it('does not duplicate cities', async () => {\n        await database.loadCities();\n        expect(database.cities).toHaveLength(4);\n    });\n});\nafterEach(() => {\n    clearCityDatabase();\n});\n```\n\n"
        },
        "jest/require-to-throw-message": {
          "description": "### What it does\nThis rule triggers a warning if `toThrow()` or `toThrowError()` is used without an error message.\n\n### Example\n```javascript\n// invalid\ntest('all the things', async () => {\n    expect(() => a()).toThrow();\n    expect(() => a()).toThrowError();\n    await expect(a()).rejects.toThrow();\n    await expect(a()).rejects.toThrowError();\n});\n\n// valid\ntest('all the things', async () => {\n  expect(() => a()).toThrow('a');\n  expect(() => a()).toThrowError('a');\n  await expect(a()).rejects.toThrow('a');\n  await expect(a()).rejects.toThrowError('a');\n});\n```\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/require-to-throw-message"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nThis rule triggers a warning if `toThrow()` or `toThrowError()` is used without an error message.\n\n### Example\n```javascript\n// invalid\ntest('all the things', async () => {\n    expect(() => a()).toThrow();\n    expect(() => a()).toThrowError();\n    await expect(a()).rejects.toThrow();\n    await expect(a()).rejects.toThrowError();\n});\n\n// valid\ntest('all the things', async () => {\n  expect(() => a()).toThrow('a');\n  expect(() => a()).toThrowError('a');\n  await expect(a()).rejects.toThrow('a');\n  await expect(a()).rejects.toThrowError('a');\n});\n```\n\n"
        },
        "jest/require-top-level-describe": {
          "description": "### What it does\n\nThis rule triggers a warning if a test case (`test` and `it`) or a hook\n(`beforeAll`, `beforeEach`, `afterEach`, `afterAll`) is not located in a\ntop-level `describe` block.\n\n### Example\n\n```javascript\n// invalid\nAbove a describe block\ntest('my test', () => {});\ndescribe('test suite', () => {\n    it('test', () => {});\n});\n// Below a describe block\ndescribe('test suite', () => {});\ntest('my test', () => {});\n// Same for hooks\nbeforeAll('my beforeAll', () => {});\ndescribe('test suite', () => {});\nafterEach('my afterEach', () => {});\n\n//valid\n// Above a describe block\n// In a describe block\ndescribe('test suite', () => {\n    test('my test', () => {});\n});\n\n// In a nested describe block\ndescribe('test suite', () => {\n    test('my test', () => {});\ndescribe('another test suite', () => {\n    test('my other test', () => {});\n});\n});\n```\n\n### Options\n\nYou can also enforce a limit on the number of describes allowed at the top-level\nusing the `maxNumberOfTopLevelDescribes` option:\n\n```json\n{\n  \"jest/require-top-level-describe\": [\n    \"error\",\n    {\n      \"maxNumberOfTopLevelDescribes\": 2\n    }\n  ]\n}\n```\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/require-top-level-describe"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule triggers a warning if a test case (`test` and `it`) or a hook\n(`beforeAll`, `beforeEach`, `afterEach`, `afterAll`) is not located in a\ntop-level `describe` block.\n\n### Example\n\n```javascript\n// invalid\nAbove a describe block\ntest('my test', () => {});\ndescribe('test suite', () => {\n    it('test', () => {});\n});\n// Below a describe block\ndescribe('test suite', () => {});\ntest('my test', () => {});\n// Same for hooks\nbeforeAll('my beforeAll', () => {});\ndescribe('test suite', () => {});\nafterEach('my afterEach', () => {});\n\n//valid\n// Above a describe block\n// In a describe block\ndescribe('test suite', () => {\n    test('my test', () => {});\n});\n\n// In a nested describe block\ndescribe('test suite', () => {\n    test('my test', () => {});\ndescribe('another test suite', () => {\n    test('my other test', () => {});\n});\n});\n```\n\n### Options\n\nYou can also enforce a limit on the number of describes allowed at the top-level\nusing the `maxNumberOfTopLevelDescribes` option:\n\n```json\n{\n  \"jest/require-top-level-describe\": [\n    \"error\",\n    {\n      \"maxNumberOfTopLevelDescribes\": 2\n    }\n  ]\n}\n```\n\n"
        },
        "jest/valid-describe-callback": {
          "description": "### What it does\n\nThis rule validates that the second parameter of a `describe()` function is a\ncallback function. This callback function:\n- should not be\n[async](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)\n- should not contain any parameters\n- should not contain any `return` statements\n\n### Why is this bad?\n\nUsing an improper `describe()` callback function can lead to unexpected test\nerrors.\n\n### Example\n\n```javascript\n// Async callback functions are not allowed\ndescribe('myFunction()', async () => {\n  // ...\n});\n\n// Callback function parameters are not allowed\ndescribe('myFunction()', done => {\n  // ...\n});\n\n// Returning a value from a describe block is not allowed\ndescribe('myFunction', () =>\n  it('returns a truthy value', () => {\n    expect(myFunction()).toBeTruthy();\n}));\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/valid-describe-callback"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule validates that the second parameter of a `describe()` function is a\ncallback function. This callback function:\n- should not be\n[async](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)\n- should not contain any parameters\n- should not contain any `return` statements\n\n### Why is this bad?\n\nUsing an improper `describe()` callback function can lead to unexpected test\nerrors.\n\n### Example\n\n```javascript\n// Async callback functions are not allowed\ndescribe('myFunction()', async () => {\n  // ...\n});\n\n// Callback function parameters are not allowed\ndescribe('myFunction()', done => {\n  // ...\n});\n\n// Returning a value from a describe block is not allowed\ndescribe('myFunction', () =>\n  it('returns a truthy value', () => {\n    expect(myFunction()).toBeTruthy();\n}));\n```\n"
        },
        "jest/valid-expect": {
          "description": "### What it does\n\nThis rule triggers a warning if `expect()` is called with more than one argument\nor without arguments. It would also issue a warning if there is nothing called\non `expect()`, e.g.:\n\n### Example\n```javascript\nexpect();\nexpect('something');\nexpect(true).toBeDefined;\nexpect(Promise.resolve('Hi!')).resolves.toBe('Hi!');\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/valid-expect"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule triggers a warning if `expect()` is called with more than one argument\nor without arguments. It would also issue a warning if there is nothing called\non `expect()`, e.g.:\n\n### Example\n```javascript\nexpect();\nexpect('something');\nexpect(true).toBeDefined;\nexpect(Promise.resolve('Hi!')).resolves.toBe('Hi!');\n```\n"
        },
        "jest/valid-title": {
          "description": "### What it does\n\nChecks that the title of Jest blocks are valid by ensuring that titles are:\n\n- not empty,\n- is a string,\n- not prefixed with their block name,\n- have no leading or trailing spaces\n\n### Example\n```javascript\ndescribe('', () => {});\ndescribe('foo', () => {\n  it('', () => {});\n});\nit('', () => {});\ntest('', () => {});\nxdescribe('', () => {});\nxit('', () => {});\nxtest('', () => {});\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/valid-title"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nChecks that the title of Jest blocks are valid by ensuring that titles are:\n\n- not empty,\n- is a string,\n- not prefixed with their block name,\n- have no leading or trailing spaces\n\n### Example\n```javascript\ndescribe('', () => {});\ndescribe('foo', () => {\n  it('', () => {});\n});\nit('', () => {});\ntest('', () => {});\nxdescribe('', () => {});\nxit('', () => {});\nxtest('', () => {});\n```\n"
        },
        "jsdoc/check-access": {
          "description": "### What it does\nChecks that `@access` tags use one of the following values:\n- \"package\", \"private\", \"protected\", \"public\"\n\nAlso reports:\n- Mixing of `@access` with `@public`, `@private`, `@protected`, or `@package` on the same doc block.\n- Use of multiple instances of `@access` (or the `@public`, etc) on the same doc block.\n\n### Why is this bad?\nIt is important to have a consistent way of specifying access levels.\n\n### Example\n```javascript\n// Passing\n/** @access private */\n\n/** @private */\n\n// Failing\n/** @access private @public */\n\n/** @access invalidlevel */\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/check-access"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nChecks that `@access` tags use one of the following values:\n- \"package\", \"private\", \"protected\", \"public\"\n\nAlso reports:\n- Mixing of `@access` with `@public`, `@private`, `@protected`, or `@package` on the same doc block.\n- Use of multiple instances of `@access` (or the `@public`, etc) on the same doc block.\n\n### Why is this bad?\nIt is important to have a consistent way of specifying access levels.\n\n### Example\n```javascript\n// Passing\n/** @access private */\n\n/** @private */\n\n// Failing\n/** @access private @public */\n\n/** @access invalidlevel */\n```\n"
        },
        "jsdoc/check-property-names": {
          "description": "### What it does\nEnsures that property names in JSDoc are not duplicated on the same block and that nested properties have defined roots.\n\n### Why is this bad?\n`@property` tags with the same name can be confusing and may indicate a mistake.\n\n### Example\n```javascript\n// Passing\n/**\n * @typedef {object} state\n * @property {number} foo\n */\n/**\n * @typedef {object} state\n * @property {object} foo\n * @property {number} foo.bar\n */\n\n// Failing\n/**\n * @typedef {object} state\n * @property {number} foo\n * @property {string} foo\n */\n\n/**\n * @typedef {object} state\n * @property {number} foo.bar\n */\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/check-property-names"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nEnsures that property names in JSDoc are not duplicated on the same block and that nested properties have defined roots.\n\n### Why is this bad?\n`@property` tags with the same name can be confusing and may indicate a mistake.\n\n### Example\n```javascript\n// Passing\n/**\n * @typedef {object} state\n * @property {number} foo\n */\n/**\n * @typedef {object} state\n * @property {object} foo\n * @property {number} foo.bar\n */\n\n// Failing\n/**\n * @typedef {object} state\n * @property {number} foo\n * @property {string} foo\n */\n\n/**\n * @typedef {object} state\n * @property {number} foo.bar\n */\n```\n"
        },
        "jsdoc/check-tag-names": {
          "description": "### What it does\nReports invalid block tag names.\nAdditionally checks for tag names that are redundant when using a type checker such as TypeScript.\n\n### Why is this bad?\nUsing invalid tags can lead to confusion and make the documentation harder to read.\n\n### Example\n```javascript\n// Passing\n/** @param */\n\n// Failing\n/** @Param */\n/** @foo */\n\n/**\n * This is redundant when typed.\n * @type {string}\n */\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/check-tag-names"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nReports invalid block tag names.\nAdditionally checks for tag names that are redundant when using a type checker such as TypeScript.\n\n### Why is this bad?\nUsing invalid tags can lead to confusion and make the documentation harder to read.\n\n### Example\n```javascript\n// Passing\n/** @param */\n\n// Failing\n/** @Param */\n/** @foo */\n\n/**\n * This is redundant when typed.\n * @type {string}\n */\n```\n"
        },
        "jsdoc/empty-tags": {
          "description": "### What it does\nExpects the following tags to be empty of any content:\n- `@abstract`\n- `@async`\n- `@generator`\n- `@global`\n- `@hideconstructor`\n- `@ignore`\n- `@inner`\n- `@instance`\n- `@override`\n- `@readonly`\n- `@inheritDoc`\n- `@internal`\n- `@overload`\n- `@package`\n- `@private`\n- `@protected`\n- `@public`\n- `@static`\n\n### Why is this bad?\nThe void tags should be empty.\n\n### Example\n```javascript\n// Passing\n/** @async */\n\n/** @private */\n\n// Failing\n/** @async foo */\n\n/** @private bar */\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/empty-tags"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nExpects the following tags to be empty of any content:\n- `@abstract`\n- `@async`\n- `@generator`\n- `@global`\n- `@hideconstructor`\n- `@ignore`\n- `@inner`\n- `@instance`\n- `@override`\n- `@readonly`\n- `@inheritDoc`\n- `@internal`\n- `@overload`\n- `@package`\n- `@private`\n- `@protected`\n- `@public`\n- `@static`\n\n### Why is this bad?\nThe void tags should be empty.\n\n### Example\n```javascript\n// Passing\n/** @async */\n\n/** @private */\n\n// Failing\n/** @async foo */\n\n/** @private bar */\n```\n"
        },
        "jsdoc/implements-on-classes": {
          "description": "### What it does\nReports an issue with any non-constructor function using `@implements`.\n\n### Why is this bad?\nConstructor functions should be\nwhether marked with `@class`, `@constructs`, or being an ES6 class constructor.\n\n### Example\n```javascript\n// Passing\nclass Foo {\n  /**\n   * @implements {SomeClass}\n   */\n  constructor() {}\n}\n/**\n * @implements {SomeClass}\n * @class\n */\nfunction quux () {}\n\n// Failing\n/**\n * @implements {SomeClass}\n */\nfunction quux () {}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/implements-on-classes"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nReports an issue with any non-constructor function using `@implements`.\n\n### Why is this bad?\nConstructor functions should be\nwhether marked with `@class`, `@constructs`, or being an ES6 class constructor.\n\n### Example\n```javascript\n// Passing\nclass Foo {\n  /**\n   * @implements {SomeClass}\n   */\n  constructor() {}\n}\n/**\n * @implements {SomeClass}\n * @class\n */\nfunction quux () {}\n\n// Failing\n/**\n * @implements {SomeClass}\n */\nfunction quux () {}\n```\n"
        },
        "jsdoc/no-defaults": {
          "description": "### What it does\nThis rule reports defaults being used on the relevant portion of `@param` or `@default`.\nIt also optionally reports the presence of the square-bracketed optional arguments at all.\n\n### Why is this bad?\nThe rule is intended to prevent the indication of defaults on tags\nwhere this would be redundant with ES6 default parameters.\n\n### Example\n```javascript\n// Passing\n/** @param {number} foo */\nfunction quux (foo) {}\n/** @param foo */\nfunction quux (foo) {}\n\n// Failing\n/** @param {number} [foo=\"7\"] */\nfunction quux (foo) {}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-defaults"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nThis rule reports defaults being used on the relevant portion of `@param` or `@default`.\nIt also optionally reports the presence of the square-bracketed optional arguments at all.\n\n### Why is this bad?\nThe rule is intended to prevent the indication of defaults on tags\nwhere this would be redundant with ES6 default parameters.\n\n### Example\n```javascript\n// Passing\n/** @param {number} foo */\nfunction quux (foo) {}\n/** @param foo */\nfunction quux (foo) {}\n\n// Failing\n/** @param {number} [foo=\"7\"] */\nfunction quux (foo) {}\n```\n"
        },
        "jsdoc/require-param": {
          "description": "### What it does\nRequires that all function parameters are documented with JSDoc `@param` tags.\n\n### Why is this bad?\nThe rule is aimed at enforcing code quality and maintainability by requiring that all function parameters are documented.\n\n### Example\n```javascript\n// Passing\n/** @param foo */\nfunction quux (foo) {}\n\n// Failing\n/** @param foo */\nfunction quux (foo, bar) {}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/require-param"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nRequires that all function parameters are documented with JSDoc `@param` tags.\n\n### Why is this bad?\nThe rule is aimed at enforcing code quality and maintainability by requiring that all function parameters are documented.\n\n### Example\n```javascript\n// Passing\n/** @param foo */\nfunction quux (foo) {}\n\n// Failing\n/** @param foo */\nfunction quux (foo, bar) {}\n```\n"
        },
        "jsdoc/require-param-description": {
          "description": "### What it does\nRequires that each `@param` tag has a description value.\n\n### Why is this bad?\nThe description of a param should be documented.\n\n### Example\n```javascript\n// Passing\n/** @param foo Foo. */\nfunction quux (foo) {}\n\n// Failing\n/** @param foo */\nfunction quux (foo) {}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/require-param-description"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nRequires that each `@param` tag has a description value.\n\n### Why is this bad?\nThe description of a param should be documented.\n\n### Example\n```javascript\n// Passing\n/** @param foo Foo. */\nfunction quux (foo) {}\n\n// Failing\n/** @param foo */\nfunction quux (foo) {}\n```\n"
        },
        "jsdoc/require-param-name": {
          "description": "### What it does\nRequires that all `@param` tags have names.\n\n### Why is this bad?\nThe name of a param should be documented.\n\n### Example\n```javascript\n// Passing\n/** @param {SomeType} foo */\nfunction quux (foo) {}\n\n// Failing\n/** @param {SomeType} */\nfunction quux (foo) {}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/require-param-name"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nRequires that all `@param` tags have names.\n\n### Why is this bad?\nThe name of a param should be documented.\n\n### Example\n```javascript\n// Passing\n/** @param {SomeType} foo */\nfunction quux (foo) {}\n\n// Failing\n/** @param {SomeType} */\nfunction quux (foo) {}\n```\n"
        },
        "jsdoc/require-param-type": {
          "description": "### What it does\nRequires that each `@param` tag has a type value (within curly brackets).\n\n### Why is this bad?\nThe type of a parameter should be documented.\n\n### Example\n```javascript\n// Passing\n/** @param {SomeType} foo */\nfunction quux (foo) {}\n\n// Failing\n/** @param foo */\nfunction quux (foo) {}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/require-param-type"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nRequires that each `@param` tag has a type value (within curly brackets).\n\n### Why is this bad?\nThe type of a parameter should be documented.\n\n### Example\n```javascript\n// Passing\n/** @param {SomeType} foo */\nfunction quux (foo) {}\n\n// Failing\n/** @param foo */\nfunction quux (foo) {}\n```\n"
        },
        "jsdoc/require-property": {
          "description": "### What it does\nRequires that all `@typedef` and `@namespace` tags have `@property` tags\nwhen their type is a plain `object`, `Object`, or `PlainObject`.\n\n### Why is this bad?\nObject type should have properties defined.\n\n### Example\n```javascript\n// Passing\n/**\n * @typedef {Object} SomeTypedef\n * @property {SomeType} propName Prop description\n */\n/**\n * @typedef {object} Foo\n * @property someProp\n */\n\n// Failing\n/**\n * @typedef {Object} SomeTypedef\n */\n/**\n * @namespace {Object} SomeNamesoace\n */\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/require-property"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nRequires that all `@typedef` and `@namespace` tags have `@property` tags\nwhen their type is a plain `object`, `Object`, or `PlainObject`.\n\n### Why is this bad?\nObject type should have properties defined.\n\n### Example\n```javascript\n// Passing\n/**\n * @typedef {Object} SomeTypedef\n * @property {SomeType} propName Prop description\n */\n/**\n * @typedef {object} Foo\n * @property someProp\n */\n\n// Failing\n/**\n * @typedef {Object} SomeTypedef\n */\n/**\n * @namespace {Object} SomeNamesoace\n */\n```\n"
        },
        "jsdoc/require-property-description": {
          "description": "### What it does\nRequires that all `@property` tags have descriptions.\n\n### Why is this bad?\nThe description of a property should be documented.\n\n### Example\n```javascript\n// Passing\n/**\n * @typedef {SomeType} SomeTypedef\n * @property {number} foo Foo.\n */\n\n// Failing\n/**\n * @typedef {SomeType} SomeTypedef\n * @property {number} foo\n */\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/require-property-description"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nRequires that all `@property` tags have descriptions.\n\n### Why is this bad?\nThe description of a property should be documented.\n\n### Example\n```javascript\n// Passing\n/**\n * @typedef {SomeType} SomeTypedef\n * @property {number} foo Foo.\n */\n\n// Failing\n/**\n * @typedef {SomeType} SomeTypedef\n * @property {number} foo\n */\n```\n"
        },
        "jsdoc/require-property-name": {
          "description": "### What it does\nRequires that all `@property` tags have names.\n\n### Why is this bad?\nThe name of a property type should be documented.\n\n### Example\n```javascript\n// Passing\n/**\n * @typedef {SomeType} SomeTypedef\n * @property {number} foo\n */\n\n// Failing\n/**\n * @typedef {SomeType} SomeTypedef\n * @property {number}\n */\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/require-property-name"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nRequires that all `@property` tags have names.\n\n### Why is this bad?\nThe name of a property type should be documented.\n\n### Example\n```javascript\n// Passing\n/**\n * @typedef {SomeType} SomeTypedef\n * @property {number} foo\n */\n\n// Failing\n/**\n * @typedef {SomeType} SomeTypedef\n * @property {number}\n */\n```\n"
        },
        "jsdoc/require-property-type": {
          "description": "### What it does\nRequires that each `@property` tag has a type value (within curly brackets).\n\n### Why is this bad?\nThe type of a property should be documented.\n\n### Example\n```javascript\n// Passing\n/**\n * @typedef {SomeType} SomeTypedef\n * @property {number} foo\n */\n\n// Failing\n/**\n * @typedef {SomeType} SomeTypedef\n * @property foo\n */\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/require-property-type"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nRequires that each `@property` tag has a type value (within curly brackets).\n\n### Why is this bad?\nThe type of a property should be documented.\n\n### Example\n```javascript\n// Passing\n/**\n * @typedef {SomeType} SomeTypedef\n * @property {number} foo\n */\n\n// Failing\n/**\n * @typedef {SomeType} SomeTypedef\n * @property foo\n */\n```\n"
        },
        "jsdoc/require-returns": {
          "description": "### What it does\nRequires that return statements are documented.\nWill also report if multiple `@returns` tags are present.\n\n### Why is this bad?\nThe rule is intended to prevent the omission of `@returns` tag when necessary.\n\n### Example\n```javascript\n// Passing\n/** @returns Foo. */\nfunction quux () { return foo; }\n\n// Failing\n/** Foo. */\nfunction quux () { return foo; }\n/**\n * @returns Foo!\n * @returns Foo?\n */\nfunction quux () { return foo; }\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/require-returns"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nRequires that return statements are documented.\nWill also report if multiple `@returns` tags are present.\n\n### Why is this bad?\nThe rule is intended to prevent the omission of `@returns` tag when necessary.\n\n### Example\n```javascript\n// Passing\n/** @returns Foo. */\nfunction quux () { return foo; }\n\n// Failing\n/** Foo. */\nfunction quux () { return foo; }\n/**\n * @returns Foo!\n * @returns Foo?\n */\nfunction quux () { return foo; }\n```\n"
        },
        "jsdoc/require-returns-description": {
          "description": "### What it does\nRequires that the `@returns` tag has a description value.\nThe error will not be reported if the return value is `void `or `undefined` or if it is `Promise<void>` or `Promise<undefined>`.\n\n### Why is this bad?\nA `@returns` tag should have a description value.\n\n### Example\n```javascript\n// Passing\n/** @returns Foo. */\nfunction quux (foo) {}\n\n// Failing\n/** @returns */\nfunction quux (foo) {}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/require-returns-description"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nRequires that the `@returns` tag has a description value.\nThe error will not be reported if the return value is `void `or `undefined` or if it is `Promise<void>` or `Promise<undefined>`.\n\n### Why is this bad?\nA `@returns` tag should have a description value.\n\n### Example\n```javascript\n// Passing\n/** @returns Foo. */\nfunction quux (foo) {}\n\n// Failing\n/** @returns */\nfunction quux (foo) {}\n```\n"
        },
        "jsdoc/require-returns-type": {
          "description": "### What it does\nRequires that `@returns` tag has a type value (in curly brackets).\n\n### Why is this bad?\nA `@returns` tag should have a type value.\n\n### Example\n```javascript\n// Passing\n/** @returns {string} */\nfunction quux (foo) {}\n\n// Failing\n/** @returns */\nfunction quux (foo) {}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/require-returns-type"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nRequires that `@returns` tag has a type value (in curly brackets).\n\n### Why is this bad?\nA `@returns` tag should have a type value.\n\n### Example\n```javascript\n// Passing\n/** @returns {string} */\nfunction quux (foo) {}\n\n// Failing\n/** @returns */\nfunction quux (foo) {}\n```\n"
        },
        "jsdoc/require-yields": {
          "description": "### What it does\nRequires that yields are documented.\nWill also report if multiple `@yields` tags are present.\n\n### Why is this bad?\nThe rule is intended to prevent the omission of `@yields` tags when they are necessary.\n\n### Example\n```javascript\n// Passing\n/** * @yields Foo */\nfunction * quux (foo) { yield foo; }\n\n// Failing\nfunction * quux (foo) { yield foo; }\n/**\n * @yields {undefined}\n * @yields {void}\n */\nfunction * quux (foo) {}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/require-yields"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nRequires that yields are documented.\nWill also report if multiple `@yields` tags are present.\n\n### Why is this bad?\nThe rule is intended to prevent the omission of `@yields` tags when they are necessary.\n\n### Example\n```javascript\n// Passing\n/** * @yields Foo */\nfunction * quux (foo) { yield foo; }\n\n// Failing\nfunction * quux (foo) { yield foo; }\n/**\n * @yields {undefined}\n * @yields {void}\n */\nfunction * quux (foo) {}\n```\n"
        },
        "jsx_a11y/alt-text": {
          "description": "### What it does\n\nEnforce that all elements that require alternative text have meaningful\ninformation to relay back to the end user.\n\n### Why is this necessary?\n\nAlternative text is a critical component of accessibility for screen\nreader users, enabling them to understand the content and function\nof an element.\n\n### What it checks\n\nThis rule checks for alternative text on the following elements:\n`<img>`, `<area>`, `<input type=\"image\">`, and `<object>`.\n\n### How to fix it\n\nEnsure that the `alt` attribute is present and contains meaningful\ntext that describes the element's content or purpose.\n\n### Example\n```javascript\n// Bad\n<img src=\"flower.jpg\">\n\n// Good\n<img src=\"flower.jpg\" alt=\"A close-up of a white daisy\">\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/alt-text"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforce that all elements that require alternative text have meaningful\ninformation to relay back to the end user.\n\n### Why is this necessary?\n\nAlternative text is a critical component of accessibility for screen\nreader users, enabling them to understand the content and function\nof an element.\n\n### What it checks\n\nThis rule checks for alternative text on the following elements:\n`<img>`, `<area>`, `<input type=\"image\">`, and `<object>`.\n\n### How to fix it\n\nEnsure that the `alt` attribute is present and contains meaningful\ntext that describes the element's content or purpose.\n\n### Example\n```javascript\n// Bad\n<img src=\"flower.jpg\">\n\n// Good\n<img src=\"flower.jpg\" alt=\"A close-up of a white daisy\">\n```\n"
        },
        "jsx_a11y/anchor-has-content": {
          "description": "### What it does\n\nEnforce that anchors have content and that the content is accessible to screen readers.\nAccessible means that it is not hidden using the `aria-hidden` prop.\n\nAlternatively, you may use the `title` prop or the `aria-label` prop.\n\n### Why is this bad?\n\n\n### Example\n\n#### good\n\n```\n<a>Anchor Content!</a>\n <a><TextWrapper /></a>\n <a dangerouslySetInnerHTML={{ __html: 'foo' }} />\n <a title='foo' />\n <a aria-label='foo' />\n```\n\n#### bad\n\n```\n<a />\n<a><TextWrapper aria-hidden /></a>\n```\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/anchor-has-content"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforce that anchors have content and that the content is accessible to screen readers.\nAccessible means that it is not hidden using the `aria-hidden` prop.\n\nAlternatively, you may use the `title` prop or the `aria-label` prop.\n\n### Why is this bad?\n\n\n### Example\n\n#### good\n\n```\n<a>Anchor Content!</a>\n <a><TextWrapper /></a>\n <a dangerouslySetInnerHTML={{ __html: 'foo' }} />\n <a title='foo' />\n <a aria-label='foo' />\n```\n\n#### bad\n\n```\n<a />\n<a><TextWrapper aria-hidden /></a>\n```\n\n"
        },
        "jsx_a11y/anchor-is-valid": {
          "description": "### What it does\nThe HTML <a> element, with a valid href attribute, is formally defined as representing a **hyperlink**.\nThat is, a link between one HTML document and another, or between one location inside an HTML document and another location inside the same document.\n\nWhile before it was possible to attach logic to an anchor element, with the advent of JSX libraries,\nit's now  easier to attach logic to any HTML element, anchors included.\n\nThis rule is designed to prevent users to attach logic at the click of anchors, and also makes\nsure that the `href` provided to the anchor element is valid. If the anchor has logic attached to it,\nthe rules suggests to turn it to a `button`, because that's likely what the user wants.\n\nAnchor `<a></a>` elements should be used for navigation, while `<button></button>` should be\nused for user interaction.\n\nConsider the following:\n\n```javascript\n<a href=\"javascript:void(0)\" onClick={foo}>Perform action</a>\n<a href=\"#\" onClick={foo}>Perform action</a>\n<a onClick={foo}>Perform action</a>\n````\n\nAll these anchor implementations indicate that the element is only used to execute JavaScript code. All the above should be replaced with:\n\n```javascript\n<button onClick={foo}>Perform action</button>\n```\n`\n### Why is this bad?\nThere are **many reasons** why an anchor should not have a logic and have a correct `href` attribute:\n- it can disrupt the correct flow of the user navigation e.g. a user that wants to open the link\nin another tab, but the default \"click\" behaviour is prevented\n- it can source of invalid links, and crawlers can't navigate the website, risking to penalise SEO ranking\n\n### Example\n\n#### Valid\n\n```javascript\n<a href={`https://www.javascript.com`}>navigate here</a>\n```\n\n```javascript\n<a href={somewhere}>navigate here</a>\n```\n\n```javascript\n<a {...spread}>navigate here</a>\n```\n\n#### Invalid\n\n```javascript\n<a href={null}>navigate here</a>\n```\n```javascript\n<a href={undefined}>navigate here</a>\n```\n```javascript\n<a href>navigate here</a>\n```\n```javascript\n<a href=\"javascript:void(0)\">navigate here</a>\n```\n```javascript\n<a href=\"https://example.com\" onClick={something}>navigate here</a>\n```\n\n### Reference\n\n- [WCAG 2.1.1](https://www.w3.org/WAI/WCAG21/Understanding/keyboard)\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/anchor-is-valid"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nThe HTML <a> element, with a valid href attribute, is formally defined as representing a **hyperlink**.\nThat is, a link between one HTML document and another, or between one location inside an HTML document and another location inside the same document.\n\nWhile before it was possible to attach logic to an anchor element, with the advent of JSX libraries,\nit's now  easier to attach logic to any HTML element, anchors included.\n\nThis rule is designed to prevent users to attach logic at the click of anchors, and also makes\nsure that the `href` provided to the anchor element is valid. If the anchor has logic attached to it,\nthe rules suggests to turn it to a `button`, because that's likely what the user wants.\n\nAnchor `<a></a>` elements should be used for navigation, while `<button></button>` should be\nused for user interaction.\n\nConsider the following:\n\n```javascript\n<a href=\"javascript:void(0)\" onClick={foo}>Perform action</a>\n<a href=\"#\" onClick={foo}>Perform action</a>\n<a onClick={foo}>Perform action</a>\n````\n\nAll these anchor implementations indicate that the element is only used to execute JavaScript code. All the above should be replaced with:\n\n```javascript\n<button onClick={foo}>Perform action</button>\n```\n`\n### Why is this bad?\nThere are **many reasons** why an anchor should not have a logic and have a correct `href` attribute:\n- it can disrupt the correct flow of the user navigation e.g. a user that wants to open the link\nin another tab, but the default \"click\" behaviour is prevented\n- it can source of invalid links, and crawlers can't navigate the website, risking to penalise SEO ranking\n\n### Example\n\n#### Valid\n\n```javascript\n<a href={`https://www.javascript.com`}>navigate here</a>\n```\n\n```javascript\n<a href={somewhere}>navigate here</a>\n```\n\n```javascript\n<a {...spread}>navigate here</a>\n```\n\n#### Invalid\n\n```javascript\n<a href={null}>navigate here</a>\n```\n```javascript\n<a href={undefined}>navigate here</a>\n```\n```javascript\n<a href>navigate here</a>\n```\n```javascript\n<a href=\"javascript:void(0)\">navigate here</a>\n```\n```javascript\n<a href=\"https://example.com\" onClick={something}>navigate here</a>\n```\n\n### Reference\n\n- [WCAG 2.1.1](https://www.w3.org/WAI/WCAG21/Understanding/keyboard)\n"
        },
        "jsx_a11y/aria-activedescendant-has-tabindex": {
          "description": "### What it does\n\nEnforce elements with aria-activedescendant are tabbable.\n\n### Example\n```jsx\n// Good\n<CustomComponent />\n<CustomComponent aria-activedescendant={someID} />\n<CustomComponent aria-activedescendant={someID} tabIndex={0} />\n<CustomComponent aria-activedescendant={someID} tabIndex={-1} />\n<div />\n<input />\n<div tabIndex={0} />\n<div aria-activedescendant={someID} tabIndex={0} />\n<div aria-activedescendant={someID} tabIndex=\"0\" />\n<div aria-activedescendant={someID} tabIndex={1} />\n<div aria-activedescendant={someID} tabIndex={-1} />\n<div aria-activedescendant={someID} tabIndex=\"-1\" />\n<input aria-activedescendant={someID} />\n<input aria-activedescendant={someID} tabIndex={0} />\n<input aria-activedescendant={someID} tabIndex={-1} />\n\n// Bad\n<div aria-activedescendant={someID} />\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/aria-activedescendant-has-tabindex"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforce elements with aria-activedescendant are tabbable.\n\n### Example\n```jsx\n// Good\n<CustomComponent />\n<CustomComponent aria-activedescendant={someID} />\n<CustomComponent aria-activedescendant={someID} tabIndex={0} />\n<CustomComponent aria-activedescendant={someID} tabIndex={-1} />\n<div />\n<input />\n<div tabIndex={0} />\n<div aria-activedescendant={someID} tabIndex={0} />\n<div aria-activedescendant={someID} tabIndex=\"0\" />\n<div aria-activedescendant={someID} tabIndex={1} />\n<div aria-activedescendant={someID} tabIndex={-1} />\n<div aria-activedescendant={someID} tabIndex=\"-1\" />\n<input aria-activedescendant={someID} />\n<input aria-activedescendant={someID} tabIndex={0} />\n<input aria-activedescendant={someID} tabIndex={-1} />\n\n// Bad\n<div aria-activedescendant={someID} />\n```\n"
        },
        "jsx_a11y/aria-props": {
          "description": "### What it does\nEnforces that elements do not use invalid ARIA attributes.\n\n### Why is this bad?\nUsing invalid ARIA attributes can mislead screen readers and other assistive technologies.\nIt may cause the accessibility features of the website to fail, making it difficult\nfor users with disabilities to use the site effectively.\n\n### Example\n```javascript\n// Bad\n<input aria-labeledby=\"address_label\" />\n\n// Good\n<input aria-labelledby=\"address_label\" />\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/aria-props"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nEnforces that elements do not use invalid ARIA attributes.\n\n### Why is this bad?\nUsing invalid ARIA attributes can mislead screen readers and other assistive technologies.\nIt may cause the accessibility features of the website to fail, making it difficult\nfor users with disabilities to use the site effectively.\n\n### Example\n```javascript\n// Bad\n<input aria-labeledby=\"address_label\" />\n\n// Good\n<input aria-labelledby=\"address_label\" />\n```\n"
        },
        "jsx_a11y/aria-role": {
          "description": "### What it does\nElements with ARIA roles must use a valid, non-abstract ARIA role. A reference to role definitions can be found at [WAI-ARIA](https://www.w3.org/TR/wai-aria/#role_definitions) site.\n\n### Why is this bad?\nThe intent of this Success Criterion is to ensure that Assistive Technologies (AT) can gather information about,\nactivate (or set) and keep up to date on the status of user interface controls in the content(such as screen readers, screen magnifiers, and speech recognition software, used by people with disabilities).\n\nWhen standard controls from accessible technologies are used, this process is straightforward. If the user interface elements are used according to specification the conditions of this provision will be met.\n\nIf custom controls are created, however, or interface elements are programmed (in code or script) to have a different role and/or function than usual,\nthen additional measures need to be taken to ensure that the controls provide important information to assistive technologies and allow themselves to be controlled by assistive technologies.\nA particularly important state of a user interface control is whether or not it has focus. The focus state of a control can be programmatically determined, and notifications about change of focus are sent to user agents and assistive technology.\nOther examples of user interface control state are whether or not a checkbox or radio button has been selected, or whether or not a collapsible tree or list node is expanded or collapsed.\n\n### Rule options\nThis rule takes one optional object argument of type object:\n```\n{\n    \"rules\": {\n        \"jsx-a11y/aria-role\": [ 2, {\n            \"allowedInvalidRoles\": [\"text\"],\n            \"ignoreNonDOM\": true\n        }],\n    }\n }\n```\nallowedInvalidRules is an optional string array of custom roles that should be allowed in addition to the ARIA spec, such as for cases when you need to use a non-standard role.\n\nFor the ignoreNonDOM option, this determines if developer created components are checked.\n\n### Example\n// good\n```javascript\n<div role=\"button\"></div>     <!-- Good: \"button\" is a valid ARIA role -->\n<div role={role}></div>       <!-- Good: role is a variable & cannot be determined until runtime. -->\n<div></div>                   <!-- Good: No ARIA role -->\n<Foo role={role}></Foo>       <!-- Good: ignoreNonDOM is set to true -->\n```\n\n// bad\n```javascript\n <div role=\"datepicker\"></div> <!-- Bad: \"datepicker\" is not an ARIA role -->\n <div role=\"range\"></div>      <!-- Bad: \"range\" is an _abstract_ ARIA role -->\n <div role=\"\"></div>           <!-- Bad: An empty ARIA role is not allowed -->\n <Foo role={role}></Foo>       <!-- Bad: ignoreNonDOM is set to false or not set -->\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/aria-role"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nElements with ARIA roles must use a valid, non-abstract ARIA role. A reference to role definitions can be found at [WAI-ARIA](https://www.w3.org/TR/wai-aria/#role_definitions) site.\n\n### Why is this bad?\nThe intent of this Success Criterion is to ensure that Assistive Technologies (AT) can gather information about,\nactivate (or set) and keep up to date on the status of user interface controls in the content(such as screen readers, screen magnifiers, and speech recognition software, used by people with disabilities).\n\nWhen standard controls from accessible technologies are used, this process is straightforward. If the user interface elements are used according to specification the conditions of this provision will be met.\n\nIf custom controls are created, however, or interface elements are programmed (in code or script) to have a different role and/or function than usual,\nthen additional measures need to be taken to ensure that the controls provide important information to assistive technologies and allow themselves to be controlled by assistive technologies.\nA particularly important state of a user interface control is whether or not it has focus. The focus state of a control can be programmatically determined, and notifications about change of focus are sent to user agents and assistive technology.\nOther examples of user interface control state are whether or not a checkbox or radio button has been selected, or whether or not a collapsible tree or list node is expanded or collapsed.\n\n### Rule options\nThis rule takes one optional object argument of type object:\n```\n{\n    \"rules\": {\n        \"jsx-a11y/aria-role\": [ 2, {\n            \"allowedInvalidRoles\": [\"text\"],\n            \"ignoreNonDOM\": true\n        }],\n    }\n }\n```\nallowedInvalidRules is an optional string array of custom roles that should be allowed in addition to the ARIA spec, such as for cases when you need to use a non-standard role.\n\nFor the ignoreNonDOM option, this determines if developer created components are checked.\n\n### Example\n// good\n```javascript\n<div role=\"button\"></div>     <!-- Good: \"button\" is a valid ARIA role -->\n<div role={role}></div>       <!-- Good: role is a variable & cannot be determined until runtime. -->\n<div></div>                   <!-- Good: No ARIA role -->\n<Foo role={role}></Foo>       <!-- Good: ignoreNonDOM is set to true -->\n```\n\n// bad\n```javascript\n <div role=\"datepicker\"></div> <!-- Bad: \"datepicker\" is not an ARIA role -->\n <div role=\"range\"></div>      <!-- Bad: \"range\" is an _abstract_ ARIA role -->\n <div role=\"\"></div>           <!-- Bad: An empty ARIA role is not allowed -->\n <Foo role={role}></Foo>       <!-- Bad: ignoreNonDOM is set to false or not set -->\n```\n"
        },
        "jsx_a11y/aria-unsupported-elements": {
          "description": "### What it does\n\nCertain reserved DOM elements do not support ARIA roles, states and properties. This is often because they are not visible, for example `meta`, `html`, `script`, `style`. This rule enforces that these DOM elements do not contain the `role` and/or `aria-*` props.\n\n### Example\n\n```jsx\n// Good\n\t<meta charset=\"UTF-8\" />\n\n// Bad\n<meta charset=\"UTF-8\" aria-hidden=\"false\" />\n```\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/aria-unsupported-elements"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nCertain reserved DOM elements do not support ARIA roles, states and properties. This is often because they are not visible, for example `meta`, `html`, `script`, `style`. This rule enforces that these DOM elements do not contain the `role` and/or `aria-*` props.\n\n### Example\n\n```jsx\n// Good\n\t<meta charset=\"UTF-8\" />\n\n// Bad\n<meta charset=\"UTF-8\" aria-hidden=\"false\" />\n```\n\n"
        },
        "jsx_a11y/autocomplete-valid": {
          "description": "### What it does\nEnforces that an element's autocomplete attribute must be a valid value.\n\n### Why is this bad?\nIncorrectly using the autocomplete attribute may decrease the accessibility of the website for users.\n\n### Example\n```javascript\n// Bad\n<input autocomplete=\"invalid-value\" />\n\n// Good\n<input autocomplete=\"name\" />\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/autocomplete-valid"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nEnforces that an element's autocomplete attribute must be a valid value.\n\n### Why is this bad?\nIncorrectly using the autocomplete attribute may decrease the accessibility of the website for users.\n\n### Example\n```javascript\n// Bad\n<input autocomplete=\"invalid-value\" />\n\n// Good\n<input autocomplete=\"name\" />\n```\n"
        },
        "jsx_a11y/click-events-have-key-events": {
          "description": "### What it does\n\nEnforce onClick is accompanied by at least one of the following: onKeyUp, onKeyDown, onKeyPress.\n\n### Why is this bad?\n\nCoding for the keyboard is important for users with physical disabilities who cannot use a mouse, AT compatibility, and screenreader users.\nThis does not apply for interactive or hidden elements.\n\n### Example\n```jsx\n// Good\n<div onClick={() => void 0} onKeyDown={() => void 0} />\n\n// Bad\n<div onClick={() => void 0} />\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/click-events-have-key-events"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforce onClick is accompanied by at least one of the following: onKeyUp, onKeyDown, onKeyPress.\n\n### Why is this bad?\n\nCoding for the keyboard is important for users with physical disabilities who cannot use a mouse, AT compatibility, and screenreader users.\nThis does not apply for interactive or hidden elements.\n\n### Example\n```jsx\n// Good\n<div onClick={() => void 0} onKeyDown={() => void 0} />\n\n// Bad\n<div onClick={() => void 0} />\n```\n"
        },
        "jsx_a11y/heading-has-content": {
          "description": "### What it does\n\nEnforce that heading elements (h1, h2, etc.) have content and\nthat the content is accessible to screen readers.\nAccessible means that it is not hidden using the aria-hidden prop.\n\n### Why is this bad?\n\nScreen readers alert users to the presence of a heading tag.\nIf the heading is empty or the text cannot be accessed,\nthis could either confuse users or even prevent them\nfrom accessing information on the page's structure.\n\n### Example\n```javascript\n// Bad\n<h1 />\n\n// Good\n<h1>Foo</h1>\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/heading-has-content"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforce that heading elements (h1, h2, etc.) have content and\nthat the content is accessible to screen readers.\nAccessible means that it is not hidden using the aria-hidden prop.\n\n### Why is this bad?\n\nScreen readers alert users to the presence of a heading tag.\nIf the heading is empty or the text cannot be accessed,\nthis could either confuse users or even prevent them\nfrom accessing information on the page's structure.\n\n### Example\n```javascript\n// Bad\n<h1 />\n\n// Good\n<h1>Foo</h1>\n```\n"
        },
        "jsx_a11y/html-has-lang": {
          "description": "### What it does\n\nEnsures that every HTML document has a lang attribute\n\n### Why is this bad?\nIf the language of a webpage is not specified,\nthe screen reader assumes the default language set by the user.\nLanguage settings become an issue for users who speak multiple languages\nand access website in more than one language.\n\n\n### Example\n```javascript\n// Bad\n<html />\n\n// Good\n<html lang=\"en\" />\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/html-has-lang"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnsures that every HTML document has a lang attribute\n\n### Why is this bad?\nIf the language of a webpage is not specified,\nthe screen reader assumes the default language set by the user.\nLanguage settings become an issue for users who speak multiple languages\nand access website in more than one language.\n\n\n### Example\n```javascript\n// Bad\n<html />\n\n// Good\n<html lang=\"en\" />\n```\n"
        },
        "jsx_a11y/iframe-has-title": {
          "description": "### What it does\n\nEnforce iframe elements have a title attribute.\n\n### Why is this necessary?\n\nScreen reader users rely on a iframe title to describe the contents of the iframe.\nNavigating through iframe and iframe elements quickly becomes difficult and confusing for users of this technology if the markup does not contain a title attribute.\n\n### What it checks\n\nThis rule checks for title property on iframe element.\n\n### Example\n```javascript\n// Bad\n<iframe />\n<iframe {...props} />\n<iframe title=\"\" />\n<iframe title={''} />\n<iframe title={``} />\n<iframe title={undefined} />\n<iframe title={false} />\n<iframe title={true} />\n<iframe title={42} />\n\n// Good\n<iframe title=\"This is a unique title\" />\n<iframe title={uniqueTitle} />\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/iframe-has-title"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforce iframe elements have a title attribute.\n\n### Why is this necessary?\n\nScreen reader users rely on a iframe title to describe the contents of the iframe.\nNavigating through iframe and iframe elements quickly becomes difficult and confusing for users of this technology if the markup does not contain a title attribute.\n\n### What it checks\n\nThis rule checks for title property on iframe element.\n\n### Example\n```javascript\n// Bad\n<iframe />\n<iframe {...props} />\n<iframe title=\"\" />\n<iframe title={''} />\n<iframe title={``} />\n<iframe title={undefined} />\n<iframe title={false} />\n<iframe title={true} />\n<iframe title={42} />\n\n// Good\n<iframe title=\"This is a unique title\" />\n<iframe title={uniqueTitle} />\n```\n"
        },
        "jsx_a11y/img-redundant-alt": {
          "description": "### What it does\n\nEnforce img alt attribute does not contain the word image, picture, or photo. Screenreaders already announce img elements as an image.\nThere is no need to use words such as image, photo, and/or picture.\n\n### Why is this necessary?\n\nAlternative text is a critical component of accessibility for screen\nreader users, enabling them to understand the content and function\nof an element.\n\n### What it checks\n\nThis rule checks for alternative text on the following elements:\n`<img>` and the components which you define in options.components with the exception of components which is hidden from screen reader.\n\n### Example\n```javascript\n// Bad\n<img src=\"foo\" alt=\"Photo of foo being weird.\" />\n<img src=\"bar\" alt=\"Image of me at a bar!\" />\n<img src=\"baz\" alt=\"Picture of baz fixing a bug.\" />\n\n// Good\n<img src=\"foo\" alt=\"Foo eating a sandwich.\" />\n<img src=\"bar\" aria-hidden alt=\"Picture of me taking a photo of an image\" /> // Will pass because it is hidden.\n<img src=\"baz\" alt={`Baz taking a ${photo}`} /> // This is valid since photo is a variable name.\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/img-redundant-alt"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforce img alt attribute does not contain the word image, picture, or photo. Screenreaders already announce img elements as an image.\nThere is no need to use words such as image, photo, and/or picture.\n\n### Why is this necessary?\n\nAlternative text is a critical component of accessibility for screen\nreader users, enabling them to understand the content and function\nof an element.\n\n### What it checks\n\nThis rule checks for alternative text on the following elements:\n`<img>` and the components which you define in options.components with the exception of components which is hidden from screen reader.\n\n### Example\n```javascript\n// Bad\n<img src=\"foo\" alt=\"Photo of foo being weird.\" />\n<img src=\"bar\" alt=\"Image of me at a bar!\" />\n<img src=\"baz\" alt=\"Picture of baz fixing a bug.\" />\n\n// Good\n<img src=\"foo\" alt=\"Foo eating a sandwich.\" />\n<img src=\"bar\" aria-hidden alt=\"Picture of me taking a photo of an image\" /> // Will pass because it is hidden.\n<img src=\"baz\" alt={`Baz taking a ${photo}`} /> // This is valid since photo is a variable name.\n```\n"
        },
        "jsx_a11y/lang": {
          "description": "### What it does\n\nThe lang prop on the <html> element must be a valid IETF's BCP 47 language tag.\n\n### Why is this bad?\n\nIf the language of a webpage is not specified as valid,\nthe screen reader assumes the default language set by the user.\nLanguage settings become an issue for users who speak multiple languages\nand access website in more than one language.\n\n\n### Example\n\n// good\n```javascript\n<html lang=\"en\">\n<html lang=\"en-US\">\n```\n\n// bad\n```javascript\n<html>\n<html lang=\"foo\">\n````\n\n### Resources\n- [eslint-plugin-jsx-a11y/lang](https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/lang.md)\n- [IANA Language Subtag Registry](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry)\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/lang"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThe lang prop on the <html> element must be a valid IETF's BCP 47 language tag.\n\n### Why is this bad?\n\nIf the language of a webpage is not specified as valid,\nthe screen reader assumes the default language set by the user.\nLanguage settings become an issue for users who speak multiple languages\nand access website in more than one language.\n\n\n### Example\n\n// good\n```javascript\n<html lang=\"en\">\n<html lang=\"en-US\">\n```\n\n// bad\n```javascript\n<html>\n<html lang=\"foo\">\n````\n\n### Resources\n- [eslint-plugin-jsx-a11y/lang](https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/lang.md)\n- [IANA Language Subtag Registry](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry)\n"
        },
        "jsx_a11y/media-has-caption": {
          "description": "### What it does\nChecks if `<audio>` and `<video>` elements have a `<track>` element for captions.\nThis ensures media content is accessible to all users, including those with hearing impairments.\n\n### Why is this bad?\nWithout captions, audio and video content is not accessible to users who are deaf or hard of hearing.\nCaptions are also useful for users in noisy environments or where audio is not available.\n\n### Example\n```jsx\n// Good\n<audio><track kind=\"captions\" src=\"caption_file.vtt\" /></audio>\n<video><track kind=\"captions\" src=\"caption_file.vtt\" /></video>\n\n// Bad\n<audio></audio>\n<video></video>\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/media-has-caption"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nChecks if `<audio>` and `<video>` elements have a `<track>` element for captions.\nThis ensures media content is accessible to all users, including those with hearing impairments.\n\n### Why is this bad?\nWithout captions, audio and video content is not accessible to users who are deaf or hard of hearing.\nCaptions are also useful for users in noisy environments or where audio is not available.\n\n### Example\n```jsx\n// Good\n<audio><track kind=\"captions\" src=\"caption_file.vtt\" /></audio>\n<video><track kind=\"captions\" src=\"caption_file.vtt\" /></video>\n\n// Bad\n<audio></audio>\n<video></video>\n```\n"
        },
        "jsx_a11y/mouse-events-have-key-events": {
          "description": "### What it does\n\nEnforce onmouseover/onmouseout are accompanied by onfocus/onblur.\n\n### Why is this bad?\n\nCoding for the keyboard is important for users with physical disabilities who cannot use a mouse,\nAT compatibility, and screenreader users.\n\n### Example\n```jsx\n// Good\n<div onMouseOver={() => void 0} onFocus={() => void 0} />\n\n// Bad\n<div onMouseOver={() => void 0} />\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/mouse-events-have-key-events"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforce onmouseover/onmouseout are accompanied by onfocus/onblur.\n\n### Why is this bad?\n\nCoding for the keyboard is important for users with physical disabilities who cannot use a mouse,\nAT compatibility, and screenreader users.\n\n### Example\n```jsx\n// Good\n<div onMouseOver={() => void 0} onFocus={() => void 0} />\n\n// Bad\n<div onMouseOver={() => void 0} />\n```\n"
        },
        "jsx_a11y/no-access-key": {
          "description": "### What it does\nEnforces that the `accessKey` prop is not used on any element to avoid complications with keyboard commands used by a screenreader.\n\n### Why is this bad?\nAccess keys are HTML attributes that allow web developers to assign keyboard shortcuts to elements.\nInconsistencies between keyboard shortcuts and keyboard commands used by screenreaders and keyboard-only users create accessibility complications so to avoid complications, access keys should not be used.\n\n### Example\n```javascript\n// Bad\n<div accessKey=\"h\" />\n\n// Good\n<div />\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-access-key"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nEnforces that the `accessKey` prop is not used on any element to avoid complications with keyboard commands used by a screenreader.\n\n### Why is this bad?\nAccess keys are HTML attributes that allow web developers to assign keyboard shortcuts to elements.\nInconsistencies between keyboard shortcuts and keyboard commands used by screenreaders and keyboard-only users create accessibility complications so to avoid complications, access keys should not be used.\n\n### Example\n```javascript\n// Bad\n<div accessKey=\"h\" />\n\n// Good\n<div />\n```\n"
        },
        "jsx_a11y/no-aria-hidden-on-focusable": {
          "description": "### What it does\nEnforces that `aria-hidden=\"true\"` is not set on focusable elements.\n\n### Why is this bad?\n`aria-hidden=\"true\"` on focusable elements can lead to confusion or unexpected behavior for screen reader users.\n\n### Example\n```javascript\n// Bad\n<div aria-hidden=\"true\" tabIndex=\"0\" />\n\n// Good\n<div aria-hidden=\"true\" />\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-aria-hidden-on-focusable"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nEnforces that `aria-hidden=\"true\"` is not set on focusable elements.\n\n### Why is this bad?\n`aria-hidden=\"true\"` on focusable elements can lead to confusion or unexpected behavior for screen reader users.\n\n### Example\n```javascript\n// Bad\n<div aria-hidden=\"true\" tabIndex=\"0\" />\n\n// Good\n<div aria-hidden=\"true\" />\n```\n"
        },
        "jsx_a11y/no-autofocus": {
          "description": "### What it does\nEnforce that autoFocus prop is not used on elements. Autofocusing elements can cause usability issues for sighted and non-sighted users, alike.\n\n### Rule Option\nThis rule takes one optional object argument of type object:\n\n```\n{\n    \"rules\": {\n        \"jsx-a11y/no-autofocus\": [ 2, {\n            \"ignoreNonDOM\": true\n        }],\n    }\n}\n```\n\nFor the `ignoreNonDOM` option, this determines if developer created components are checked.\n\n### Example\n// good\n\n```javascript\n<div />\n```\n\n// bad\n\n```\n<div autoFocus />\n<div autoFocus=\"true\" />\n<div autoFocus=\"false\" />\n<div autoFocus={undefined} />\n```\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-autofocus"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nEnforce that autoFocus prop is not used on elements. Autofocusing elements can cause usability issues for sighted and non-sighted users, alike.\n\n### Rule Option\nThis rule takes one optional object argument of type object:\n\n```\n{\n    \"rules\": {\n        \"jsx-a11y/no-autofocus\": [ 2, {\n            \"ignoreNonDOM\": true\n        }],\n    }\n}\n```\n\nFor the `ignoreNonDOM` option, this determines if developer created components are checked.\n\n### Example\n// good\n\n```javascript\n<div />\n```\n\n// bad\n\n```\n<div autoFocus />\n<div autoFocus=\"true\" />\n<div autoFocus=\"false\" />\n<div autoFocus={undefined} />\n```\n\n"
        },
        "jsx_a11y/no-distracting-elements": {
          "description": "### What it does\n\nEnforces that no distracting elements are used.\n\n### Why is this necessary?\n\nElements that can be visually distracting can cause accessibility issues with visually impaired users.\nSuch elements are most likely deprecated, and should be avoided. By default, <marquee> and <blink> elements are visually distracting.\n\n### What it checks\n\nThis rule checks for marquee and blink element.\n\n### Example\n```javascript\n// Bad\n<marquee />\n<marquee {...props} />\n<marquee lang={undefined} />\n<blink />\n<blink {...props} />\n<blink foo={undefined} />\n\n// Good\n<div />\n<Marquee />\n<Blink />\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-distracting-elements"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforces that no distracting elements are used.\n\n### Why is this necessary?\n\nElements that can be visually distracting can cause accessibility issues with visually impaired users.\nSuch elements are most likely deprecated, and should be avoided. By default, <marquee> and <blink> elements are visually distracting.\n\n### What it checks\n\nThis rule checks for marquee and blink element.\n\n### Example\n```javascript\n// Bad\n<marquee />\n<marquee {...props} />\n<marquee lang={undefined} />\n<blink />\n<blink {...props} />\n<blink foo={undefined} />\n\n// Good\n<div />\n<Marquee />\n<Blink />\n```\n"
        },
        "jsx_a11y/no-redundant-roles": {
          "description": "### What it does\nEnforces that the explicit role property is not the same as implicit/default role property on element.\n\n### Why is this bad?\nRedundant roles can lead to confusion and verbosity in the codebase.\n\n### Example\n```javascript\n// Bad\n<nav role=\"navigation\" />\n\n// Good\n<nav />\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-redundant-roles"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nEnforces that the explicit role property is not the same as implicit/default role property on element.\n\n### Why is this bad?\nRedundant roles can lead to confusion and verbosity in the codebase.\n\n### Example\n```javascript\n// Bad\n<nav role=\"navigation\" />\n\n// Good\n<nav />\n```\n"
        },
        "jsx_a11y/prefer-tag-over-role": {
          "description": "### What it does\nEnforces using semantic HTML tags over `role` attribute.\n\n### Why is this bad?\nUsing semantic HTML tags can improve accessibility and readability of the code.\n\n### Example\n```javascript\n// Bad\n<div role=\"button\" />\n\n// Good\n<button />\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-tag-over-role"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nEnforces using semantic HTML tags over `role` attribute.\n\n### Why is this bad?\nUsing semantic HTML tags can improve accessibility and readability of the code.\n\n### Example\n```javascript\n// Bad\n<div role=\"button\" />\n\n// Good\n<button />\n```\n"
        },
        "jsx_a11y/role-has-required-aria-props": {
          "description": "### What it does\nEnforces that elements with ARIA roles must have all required attributes for that role.\n\n### Why is this bad?\nCertain ARIA roles require specific attributes to express necessary semantics for assistive technology.\n\n### Example\n```javascript\n// Bad\n<div role=\"checkbox\" />\n\n// Good\n<div role=\"checkbox\" aria-checked=\"false\" />\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/role-has-required-aria-props"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nEnforces that elements with ARIA roles must have all required attributes for that role.\n\n### Why is this bad?\nCertain ARIA roles require specific attributes to express necessary semantics for assistive technology.\n\n### Example\n```javascript\n// Bad\n<div role=\"checkbox\" />\n\n// Good\n<div role=\"checkbox\" aria-checked=\"false\" />\n```\n"
        },
        "jsx_a11y/role-supports-aria-props": {
          "description": "### What it does\n\nEnforce that elements with explicit or implicit roles defined contain only `aria-*` properties supported by that `role`. Many ARIA attributes (states and properties) can only be used on elements with particular roles. Some elements have implicit roles, such as `<a href=\"#\" />`, which will resolve to `role=\"link\"`.\n\n### Example\n```jsx\n// Good\n<ul role=\"radiogroup\" aria-required \"aria-labelledby\"=\"foo\">\n    <li tabIndex=\"-1\" role=\"radio\" aria-checked=\"false\">Rainbow Trout</li>\n    <li tabIndex=\"-1\" role=\"radio\" aria-checked=\"false\">Brook Trout</li>\n    <li tabIndex=\"0\" role=\"radio\" aria-checked=\"true\">Lake Trout</li>\n</ul>\n\n// Bad\n<ul role=\"radiogroup\" \"aria-labelledby\"=\"foo\">\n    <li aria-required tabIndex=\"-1\" role=\"radio\" aria-checked=\"false\">Rainbow Trout</li>\n    <li aria-required tabIndex=\"-1\" role=\"radio\" aria-checked=\"false\">Brook Trout</li>\n    <li aria-required tabIndex=\"0\" role=\"radio\" aria-checked=\"true\">Lake Trout</li>\n</ul>\n```\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/role-supports-aria-props"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforce that elements with explicit or implicit roles defined contain only `aria-*` properties supported by that `role`. Many ARIA attributes (states and properties) can only be used on elements with particular roles. Some elements have implicit roles, such as `<a href=\"#\" />`, which will resolve to `role=\"link\"`.\n\n### Example\n```jsx\n// Good\n<ul role=\"radiogroup\" aria-required \"aria-labelledby\"=\"foo\">\n    <li tabIndex=\"-1\" role=\"radio\" aria-checked=\"false\">Rainbow Trout</li>\n    <li tabIndex=\"-1\" role=\"radio\" aria-checked=\"false\">Brook Trout</li>\n    <li tabIndex=\"0\" role=\"radio\" aria-checked=\"true\">Lake Trout</li>\n</ul>\n\n// Bad\n<ul role=\"radiogroup\" \"aria-labelledby\"=\"foo\">\n    <li aria-required tabIndex=\"-1\" role=\"radio\" aria-checked=\"false\">Rainbow Trout</li>\n    <li aria-required tabIndex=\"-1\" role=\"radio\" aria-checked=\"false\">Brook Trout</li>\n    <li aria-required tabIndex=\"0\" role=\"radio\" aria-checked=\"true\">Lake Trout</li>\n</ul>\n```\n\n"
        },
        "jsx_a11y/scope": {
          "description": "### What it does\n\nThe scope prop should be used only on <th> elements.\n\n### Why is this bad?\nThe scope attribute makes table navigation much easier for screen reader users, provided that it is used correctly.\nIncorrectly used, scope can make table navigation much harder and less efficient.\nA screen reader operates under the assumption that a table has a header and that this header specifies a scope. Because of the way screen readers function, having an accurate header makes viewing a table far more accessible and more efficient for people who use the device.\n\n### Example\n```javascript\n// Bad\n<div scope />\n\n// Good\n<th scope=\"col\" />\n<th scope={scope} />\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/scope"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThe scope prop should be used only on <th> elements.\n\n### Why is this bad?\nThe scope attribute makes table navigation much easier for screen reader users, provided that it is used correctly.\nIncorrectly used, scope can make table navigation much harder and less efficient.\nA screen reader operates under the assumption that a table has a header and that this header specifies a scope. Because of the way screen readers function, having an accurate header makes viewing a table far more accessible and more efficient for people who use the device.\n\n### Example\n```javascript\n// Bad\n<div scope />\n\n// Good\n<th scope=\"col\" />\n<th scope={scope} />\n```\n"
        },
        "jsx_a11y/tabindex-no-positive": {
          "description": "### What it does\nEnforces that positive values for the tabIndex attribute are not used in JSX.\n\n### Why is this bad?\nUsing tabIndex values greater than 0 can make navigation and interaction difficult for keyboard and assistive technology users, disrupting the logical order of content.\n\n### Example\n```javascript\n// Bad\n<span tabIndex=\"1\">foo</span>\n\n// Good\n<span tabIndex=\"0\">foo</span>\n<span tabIndex=\"-1\">bar</span>\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/tabindex-no-positive"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nEnforces that positive values for the tabIndex attribute are not used in JSX.\n\n### Why is this bad?\nUsing tabIndex values greater than 0 can make navigation and interaction difficult for keyboard and assistive technology users, disrupting the logical order of content.\n\n### Example\n```javascript\n// Bad\n<span tabIndex=\"1\">foo</span>\n\n// Good\n<span tabIndex=\"0\">foo</span>\n<span tabIndex=\"-1\">bar</span>\n```\n"
        },
        "max-classes-per-file": {
          "description": "### What it does\n\nEnforce a maximum number of classes per file\n\n### Why is this bad?\n\nFiles containing multiple classes can often result in a less navigable and poorly\nstructured codebase. Best practice is to keep each file limited to a single responsibility.\n\n### Example\n```javascript\nclass Foo {}\nclass Bar {}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/max-classes-per-file"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforce a maximum number of classes per file\n\n### Why is this bad?\n\nFiles containing multiple classes can often result in a less navigable and poorly\nstructured codebase. Best practice is to keep each file limited to a single responsibility.\n\n### Example\n```javascript\nclass Foo {}\nclass Bar {}\n```\n"
        },
        "max-lines": {
          "description": "### What it does\nEnforce a maximum number of lines per file\n\n### Why is this bad?\n\nSome people consider large files a code smell. Large files tend to do a lot of things and can make it hard following what’s going.\nWhile there is not an objective maximum number of lines considered acceptable in a file, most people would agree it should not be in the thousands. Recommendations usually range from 100 to 500 lines.\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/max-lines"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nEnforce a maximum number of lines per file\n\n### Why is this bad?\n\nSome people consider large files a code smell. Large files tend to do a lot of things and can make it hard following what’s going.\nWhile there is not an objective maximum number of lines considered acceptable in a file, most people would agree it should not be in the thousands. Recommendations usually range from 100 to 500 lines.\n\n### Example\n```javascript\n```\n"
        },
        "max-params": {
          "description": "### What it does\nEnforce a maximum number of parameters in function definitions\n\n### Why is this bad?\nFunctions that take numerous parameters can be difficult to read and write because it requires the memorization of what each parameter is, its type, and the order they should appear in. As a result, many coders adhere to a convention that caps the number of parameters a function can take.\n\n### Example\n```javascript\nfunction foo (bar, baz, qux, qxx) {\n    doSomething();\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/max-params"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nEnforce a maximum number of parameters in function definitions\n\n### Why is this bad?\nFunctions that take numerous parameters can be difficult to read and write because it requires the memorization of what each parameter is, its type, and the order they should appear in. As a result, many coders adhere to a convention that caps the number of parameters a function can take.\n\n### Example\n```javascript\nfunction foo (bar, baz, qux, qxx) {\n    doSomething();\n}\n```\n"
        },
        "nextjs/google-font-display": {
          "description": "### What it does\n\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/google-font-display"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n"
        },
        "nextjs/google-font-preconnect": {
          "description": "### What it does\n\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/google-font-preconnect"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n"
        },
        "nextjs/inline-script-id": {
          "description": "### What it does\n\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/inline-script-id"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n"
        },
        "nextjs/next-script-for-ga": {
          "description": "### What it does\n\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/next-script-for-ga"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n"
        },
        "nextjs/no-assign-module-variable": {
          "description": "### What it does\n\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-assign-module-variable"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n"
        },
        "nextjs/no-async-client-component": {
          "description": "### What it does\n\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-async-client-component"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n"
        },
        "nextjs/no-before-interactive-script-outside-document": {
          "description": "### What it does\nPrevent usage of `next/script`'s `beforeInteractive` strategy outside of `pages/_document.js`.\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-before-interactive-script-outside-document"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nPrevent usage of `next/script`'s `beforeInteractive` strategy outside of `pages/_document.js`.\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n"
        },
        "nextjs/no-css-tags": {
          "description": "### What it does\n\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-css-tags"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n"
        },
        "nextjs/no-document-import-in-page": {
          "description": "### What it does\nPrevent importing `next/document` outside of `pages/_document.js`.\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-document-import-in-page"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nPrevent importing `next/document` outside of `pages/_document.js`.\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n"
        },
        "nextjs/no-duplicate-head": {
          "description": "### What it does\nPrevent duplicate usage of <Head> in pages/_document.js.\n\n### Why is this bad?\nThis can cause unexpected behavior in your application.\n\n### Example\n```javascript\nimport Document, { Html, Head, Main, NextScript } from 'next/document'\nclass MyDocument extends Document {\n  static async getInitialProps(ctx) {\n  }\n  render() {\n    return (\n      <Html>\n        <Head />\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n   )\n }\n}\nexport default MyDocument\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-duplicate-head"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nPrevent duplicate usage of <Head> in pages/_document.js.\n\n### Why is this bad?\nThis can cause unexpected behavior in your application.\n\n### Example\n```javascript\nimport Document, { Html, Head, Main, NextScript } from 'next/document'\nclass MyDocument extends Document {\n  static async getInitialProps(ctx) {\n  }\n  render() {\n    return (\n      <Html>\n        <Head />\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n   )\n }\n}\nexport default MyDocument\n```\n"
        },
        "nextjs/no-head-element": {
          "description": "### What it does\nPrevent usage of `<head>` element.\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-head-element"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nPrevent usage of `<head>` element.\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n"
        },
        "nextjs/no-head-import-in-document": {
          "description": "### What it does\n\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-head-import-in-document"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n"
        },
        "nextjs/no-img-element": {
          "description": "### What it does\n\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-img-element"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n"
        },
        "nextjs/no-page-custom-font": {
          "description": "### What it does\nPrevent page-only custom fonts.\n\n### Why is this bad?\n* The custom font you're adding was added to a page - this only adds the font to the specific page and not the entire application.\n* The custom font you're adding was added to a separate component within pages/_document.js - this disables automatic font optimization.\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-page-custom-font"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nPrevent page-only custom fonts.\n\n### Why is this bad?\n* The custom font you're adding was added to a page - this only adds the font to the specific page and not the entire application.\n* The custom font you're adding was added to a separate component within pages/_document.js - this disables automatic font optimization.\n\n### Example\n```javascript\n```\n"
        },
        "nextjs/no-script-component-in-head": {
          "description": "### What it does\n\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-script-component-in-head"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n"
        },
        "nextjs/no-styled-jsx-in-document": {
          "description": "### What it does\n\nPrevent usage of styled-jsx in pages/_document.js.\n\n### Why is this bad?\n\nCustom CSS like styled-jsx is not allowed in a [Custom Document](https://nextjs.org/docs/pages/building-your-application/routing/custom-document).\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-styled-jsx-in-document"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nPrevent usage of styled-jsx in pages/_document.js.\n\n### Why is this bad?\n\nCustom CSS like styled-jsx is not allowed in a [Custom Document](https://nextjs.org/docs/pages/building-your-application/routing/custom-document).\n\n### Example\n```javascript\n```\n"
        },
        "nextjs/no-sync-scripts": {
          "description": "### What it does\n\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-sync-scripts"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n"
        },
        "nextjs/no-title-in-document-head": {
          "description": "### What it does\n\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-title-in-document-head"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n"
        },
        "nextjs/no-typos": {
          "description": "### What it does\nPrevent common typos in Next.js's data fetching functions\n\n### Why is this bad?\n\n\n### Example\n```javascript\nexport default function Page() {\n  return <div></div>;\n}\nexport async function getServurSideProps(){};\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-typos"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nPrevent common typos in Next.js's data fetching functions\n\n### Why is this bad?\n\n\n### Example\n```javascript\nexport default function Page() {\n  return <div></div>;\n}\nexport async function getServurSideProps(){};\n```\n"
        },
        "nextjs/no-unwanted-polyfillio": {
          "description": "### What it does\nPrevent duplicate polyfills from Polyfill.io.\n\n### Why is this bad?\nYou are using polyfills from Polyfill.io and including polyfills already shipped with Next.js. This unnecessarily increases page weight which can affect loading performance.\n\n### Example\n```javascript\n<script src='https://polyfill.io/v3/polyfill.min.js?features=Array.prototype.copyWithin'></script>\n\n<script src='https://polyfill.io/v3/polyfill.min.js?features=WeakSet%2CPromise%2CPromise.prototype.finally%2Ces2015%2Ces5%2Ces6'></script>\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-unwanted-polyfillio"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nPrevent duplicate polyfills from Polyfill.io.\n\n### Why is this bad?\nYou are using polyfills from Polyfill.io and including polyfills already shipped with Next.js. This unnecessarily increases page weight which can affect loading performance.\n\n### Example\n```javascript\n<script src='https://polyfill.io/v3/polyfill.min.js?features=Array.prototype.copyWithin'></script>\n\n<script src='https://polyfill.io/v3/polyfill.min.js?features=WeakSet%2CPromise%2CPromise.prototype.finally%2Ces2015%2Ces5%2Ces6'></script>\n```\n"
        },
        "no-array-constructor": {
          "description": "### What it does\nDisallow array constructor\n\n### Why is this bad?\n\nUse of the Array constructor to construct a new array is generally discouraged in favor of array literal notation because of the single-argument pitfall and because the Array global may be redefined.\nThe exception is when the Array constructor is used to intentionally create sparse arrays of a specified size by giving the constructor a single numeric argument.\n\n### Example\n```javascript\nlet arr = new Array();\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-array-constructor"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow array constructor\n\n### Why is this bad?\n\nUse of the Array constructor to construct a new array is generally discouraged in favor of array literal notation because of the single-argument pitfall and because the Array global may be redefined.\nThe exception is when the Array constructor is used to intentionally create sparse arrays of a specified size by giving the constructor a single numeric argument.\n\n### Example\n```javascript\nlet arr = new Array();\n```\n"
        },
        "no-async-promise-executor": {
          "description": "### What it does\nDisallow using an async function as a Promise executor\n\n### Why is this bad?\nThe `new Promise` constructor accepts an executor function as an argument,\nwhich has `resolve` and `reject` parameters that can be used to control the state of the created Promise.\nFor example:\n\n### Example\n```javascript\nconst result = new Promise(function executor(resolve, reject) {\n  readFile('foo.txt', function(err, result) {\n    if (err) {\n      reject(err);\n    } else {\n      resolve(result);\n    }\n  });\n});\n```\n\nThe executor function can also be an `async function`. However, this is usually a mistake, for a few reasons:\n\n- If an async executor function throws an error, the error will be lost and won’t cause the newly-constructed `Promise` to reject.This could make it difficult to debug and handle some errors.\n- If a Promise executor function is using `await`, this is usually a sign that it is not actually necessary to use the `new Promise` constructor, or the scope of the `new Promise` constructor can be reduced.\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-async-promise-executor"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow using an async function as a Promise executor\n\n### Why is this bad?\nThe `new Promise` constructor accepts an executor function as an argument,\nwhich has `resolve` and `reject` parameters that can be used to control the state of the created Promise.\nFor example:\n\n### Example\n```javascript\nconst result = new Promise(function executor(resolve, reject) {\n  readFile('foo.txt', function(err, result) {\n    if (err) {\n      reject(err);\n    } else {\n      resolve(result);\n    }\n  });\n});\n```\n\nThe executor function can also be an `async function`. However, this is usually a mistake, for a few reasons:\n\n- If an async executor function throws an error, the error will be lost and won’t cause the newly-constructed `Promise` to reject.This could make it difficult to debug and handle some errors.\n- If a Promise executor function is using `await`, this is usually a sign that it is not actually necessary to use the `new Promise` constructor, or the scope of the `new Promise` constructor can be reduced.\n"
        },
        "no-await-in-loop": {
          "description": "### What it does\n\nThis rule disallows the use of await within loop bodies. (for, for-in, for-of, while, do-while).\n\n### Why is this bad?\n\nIt potentially indicates that the async operations are not being effectively parallelized.\nInstead, they are being run in series, which can lead to poorer performance.\n\n### Example\nBad:\n```javascript\nfor (const user of users) {\n  const userRecord = await getUserRecord(user);\n}\n```\n\nGood:\n```javascript\nawait Promise.all(users.map(user => getUserRecord(user)));\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-await-in-loop"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule disallows the use of await within loop bodies. (for, for-in, for-of, while, do-while).\n\n### Why is this bad?\n\nIt potentially indicates that the async operations are not being effectively parallelized.\nInstead, they are being run in series, which can lead to poorer performance.\n\n### Example\nBad:\n```javascript\nfor (const user of users) {\n  const userRecord = await getUserRecord(user);\n}\n```\n\nGood:\n```javascript\nawait Promise.all(users.map(user => getUserRecord(user)));\n```\n"
        },
        "no-bitwise": {
          "description": "### What it does\n\nDisallow bitwise operators\n\n### Why is this bad?\n\nThe use of bitwise operators in JavaScript is very rare and often `&` or `|` is simply a mistyped `&&` or `||`,\nwhich will lead to unexpected behavior.\n\n### Example\n\n```javascript\nvar x = y | z;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-bitwise"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow bitwise operators\n\n### Why is this bad?\n\nThe use of bitwise operators in JavaScript is very rare and often `&` or `|` is simply a mistyped `&&` or `||`,\nwhich will lead to unexpected behavior.\n\n### Example\n\n```javascript\nvar x = y | z;\n```\n"
        },
        "no-caller": {
          "description": "### What it does\n\nDisallow the use of arguments.caller or arguments.callee\n\n### Why is this bad?\n\nThe use of arguments.caller and arguments.callee make several code optimizations impossible.\nThey have been deprecated in future versions of JavaScript and their use is forbidden in ECMAScript 5 while in strict mode.\n\n### Example\n```javascript\nfunction foo(n) {\n    if (n <= 0) {\n        return;\n    }\n\n    arguments.callee(n - 1);\n}\n\n[1,2,3,4,5].map(function(n) {\n   return !(n > 1) ? 1 : arguments.callee(n - 1) * n;\n});\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-caller"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow the use of arguments.caller or arguments.callee\n\n### Why is this bad?\n\nThe use of arguments.caller and arguments.callee make several code optimizations impossible.\nThey have been deprecated in future versions of JavaScript and their use is forbidden in ECMAScript 5 while in strict mode.\n\n### Example\n```javascript\nfunction foo(n) {\n    if (n <= 0) {\n        return;\n    }\n\n    arguments.callee(n - 1);\n}\n\n[1,2,3,4,5].map(function(n) {\n   return !(n > 1) ? 1 : arguments.callee(n - 1) * n;\n});\n```\n"
        },
        "no-case-declarations": {
          "description": "### What it does\nDisallow lexical declarations in case clauses.\n\n### Why is this bad?\nThe reason is that the lexical declaration is visible\nin the entire switch block but it only gets initialized when it is assigned,\nwhich will only happen if the case where it is defined is reached.\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-case-declarations"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow lexical declarations in case clauses.\n\n### Why is this bad?\nThe reason is that the lexical declaration is visible\nin the entire switch block but it only gets initialized when it is assigned,\nwhich will only happen if the case where it is defined is reached.\n\n### Example\n```javascript\n```\n"
        },
        "no-class-assign": {
          "description": "### What it does\nDisallow reassigning class variables.\n\n### Why is this bad?\n`ClassDeclaration` creates a variable that can be re-assigned,\nbut the re-assignment is a mistake in most cases.\n\n### Example\n```javascript\nclass A {}\nA = 123;\nlet a = new A() // Error\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-class-assign"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow reassigning class variables.\n\n### Why is this bad?\n`ClassDeclaration` creates a variable that can be re-assigned,\nbut the re-assignment is a mistake in most cases.\n\n### Example\n```javascript\nclass A {}\nA = 123;\nlet a = new A() // Error\n```\n"
        },
        "no-compare-neg-zero": {
          "description": "### What it does\nDisallow comparing against -0\n\n### Why is this bad?\nThe rule should warn against code that tries to compare against -0,\nsince that will not work as intended. That is, code like x === -0 will\npass for both +0 and -0. The author probably intended Object.is(x, -0).\n\n### Example\n```javascript\nif (x === -0) {}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-compare-neg-zero"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow comparing against -0\n\n### Why is this bad?\nThe rule should warn against code that tries to compare against -0,\nsince that will not work as intended. That is, code like x === -0 will\npass for both +0 and -0. The author probably intended Object.is(x, -0).\n\n### Example\n```javascript\nif (x === -0) {}\n```\n"
        },
        "no-cond-assign": {
          "description": "### What it does\n\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-cond-assign"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n"
        },
        "no-console": {
          "description": "### What it does\nDisallows using the global console object.\n\n### Why is this bad?\nIn JavaScript that is designed to be executed in the browser,\nit’s considered a best practice to avoid using methods on console.\nSuch messages are considered to be for debugging purposes and therefore\nnot suitable to ship to the client.\n\n### Example\n```javascript\nconsole.log('here');\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-console"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallows using the global console object.\n\n### Why is this bad?\nIn JavaScript that is designed to be executed in the browser,\nit’s considered a best practice to avoid using methods on console.\nSuch messages are considered to be for debugging purposes and therefore\nnot suitable to ship to the client.\n\n### Example\n```javascript\nconsole.log('here');\n```\n"
        },
        "no-const-assign": {
          "description": "### What it does\nDisallow reassigning const variables\n\n### Why is this bad?\nWe cannot modify variables that are declared using const keyword.\nIt will raise a runtime error.\n\n### Example\n```javascript\nconst a = 0;\na = 1;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-const-assign"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow reassigning const variables\n\n### Why is this bad?\nWe cannot modify variables that are declared using const keyword.\nIt will raise a runtime error.\n\n### Example\n```javascript\nconst a = 0;\na = 1;\n```\n"
        },
        "no-constant-binary-expression": {
          "description": "### What it does\nDisallow expressions where the operation doesn't affect the value\n\n### Why is this bad?\nComparisons which will always evaluate to true or false and logical expressions (||, &&, ??) which either always\nshort-circuit or never short-circuit are both likely indications of programmer error.\n\nThese errors are especially common in complex expressions where operator precedence is easy to misjudge.\n\nAdditionally, this rule detects comparisons to newly constructed objects/arrays/functions/etc.\nIn JavaScript, where objects are compared by reference, a newly constructed object can never === any other value.\nThis can be surprising for programmers coming from languages where objects are compared by value.\n\n### Example\n```javascript\n// One might think this would evaluate as `a + (b ?? c)`:\nconst x = a + b ?? c;\n\n// But it actually evaluates as `(a + b) ?? c`. Since `a + b` can never be null,\n// the `?? c` has no effect.\n\n// Programmers coming from a language where objects are compared by value might expect this to work:\nconst isEmpty = x === [];\n\n// However, this will always result in `isEmpty` being `false`.\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-constant-binary-expression"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow expressions where the operation doesn't affect the value\n\n### Why is this bad?\nComparisons which will always evaluate to true or false and logical expressions (||, &&, ??) which either always\nshort-circuit or never short-circuit are both likely indications of programmer error.\n\nThese errors are especially common in complex expressions where operator precedence is easy to misjudge.\n\nAdditionally, this rule detects comparisons to newly constructed objects/arrays/functions/etc.\nIn JavaScript, where objects are compared by reference, a newly constructed object can never === any other value.\nThis can be surprising for programmers coming from languages where objects are compared by value.\n\n### Example\n```javascript\n// One might think this would evaluate as `a + (b ?? c)`:\nconst x = a + b ?? c;\n\n// But it actually evaluates as `(a + b) ?? c`. Since `a + b` can never be null,\n// the `?? c` has no effect.\n\n// Programmers coming from a language where objects are compared by value might expect this to work:\nconst isEmpty = x === [];\n\n// However, this will always result in `isEmpty` being `false`.\n```\n"
        },
        "no-constant-condition": {
          "description": "### What it does\n\nDisallow constant expressions in conditions\n\n### Why is this bad?\n\nA constant expression (for example, a literal) as a test condition might be a typo or development trigger for a specific behavior.\n\n### Example\n\n```javascript\nif (false) {\n   doSomethingUnfinished();\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-constant-condition"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow constant expressions in conditions\n\n### Why is this bad?\n\nA constant expression (for example, a literal) as a test condition might be a typo or development trigger for a specific behavior.\n\n### Example\n\n```javascript\nif (false) {\n   doSomethingUnfinished();\n}\n```\n"
        },
        "no-constructor-return": {
          "description": "### What it does\n\nDisallow returning value from constructor\n\n### Why is this bad?\n\nIn JavaScript, returning a value in the constructor of a class may be a mistake.\nForbidding this pattern prevents mistakes resulting from unfamiliarity with the language or a copy-paste error.\n\n### Example\nBad:\n```rust\nclass C {\n    constructor() { return 42; }\n}\n```\n\nGood:\n```rust\nclass C {\n    constructor() { this.value = 42; }\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-constructor-return"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow returning value from constructor\n\n### Why is this bad?\n\nIn JavaScript, returning a value in the constructor of a class may be a mistake.\nForbidding this pattern prevents mistakes resulting from unfamiliarity with the language or a copy-paste error.\n\n### Example\nBad:\n```rust\nclass C {\n    constructor() { return 42; }\n}\n```\n\nGood:\n```rust\nclass C {\n    constructor() { this.value = 42; }\n}\n```\n"
        },
        "no-continue": {
          "description": "### What it does\nDisallow `continue` statements\n\n### Why is this bad?\nThe continue statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration. When used incorrectly it makes code less testable, less readable and less maintainable. Structured control flow statements such as if should be used instead.\n\n### Example\n```javascript\nvar sum = 0,\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-continue"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow `continue` statements\n\n### Why is this bad?\nThe continue statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration. When used incorrectly it makes code less testable, less readable and less maintainable. Structured control flow statements such as if should be used instead.\n\n### Example\n```javascript\nvar sum = 0,\n```\n"
        },
        "no-control-regex": {
          "description": "### What it does\n\nDisallows control characters and some escape sequences that match\ncontrol characters in regular expressions.\n\n### Why is this bad?\n\nControl characters are special, invisible characters in the ASCII range\n0-31. These characters are rarely used in JavaScript strings so a\nregular expression containing elements that explicitly match these\ncharacters is most likely a mistake.\n\n### Example\n\nExamples of **incorrect** code for this rule:\n\n```javascript\nvar pattern1 = /\\x00/;\nvar pattern2 = /\\x0C/;\nvar pattern3 = /\\x1F/;\nvar pattern4 = /\\u000C/;\nvar pattern5 = /\\u{C}/u;\nvar pattern6 = new RegExp(\"\\x0C\"); // raw U+000C character in the pattern\nvar pattern7 = new RegExp(\"\\\\x0C\"); // \\x0C pattern\n```\n\nExamples of **correct** code for this rule:\n\n```javascript\nvar pattern1 = /\\x20/;\nvar pattern2 = /\\u0020/;\nvar pattern3 = /\\u{20}/u;\nvar pattern4 = /\\t/;\nvar pattern5 = /\\n/;\nvar pattern6 = new RegExp(\"\\x20\");\nvar pattern7 = new RegExp(\"\\\\t\");\nvar pattern8 = new RegExp(\"\\\\n\");\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-control-regex"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallows control characters and some escape sequences that match\ncontrol characters in regular expressions.\n\n### Why is this bad?\n\nControl characters are special, invisible characters in the ASCII range\n0-31. These characters are rarely used in JavaScript strings so a\nregular expression containing elements that explicitly match these\ncharacters is most likely a mistake.\n\n### Example\n\nExamples of **incorrect** code for this rule:\n\n```javascript\nvar pattern1 = /\\x00/;\nvar pattern2 = /\\x0C/;\nvar pattern3 = /\\x1F/;\nvar pattern4 = /\\u000C/;\nvar pattern5 = /\\u{C}/u;\nvar pattern6 = new RegExp(\"\\x0C\"); // raw U+000C character in the pattern\nvar pattern7 = new RegExp(\"\\\\x0C\"); // \\x0C pattern\n```\n\nExamples of **correct** code for this rule:\n\n```javascript\nvar pattern1 = /\\x20/;\nvar pattern2 = /\\u0020/;\nvar pattern3 = /\\u{20}/u;\nvar pattern4 = /\\t/;\nvar pattern5 = /\\n/;\nvar pattern6 = new RegExp(\"\\x20\");\nvar pattern7 = new RegExp(\"\\\\t\");\nvar pattern8 = new RegExp(\"\\\\n\");\n```\n"
        },
        "no-debugger": {
          "description": "### What it does\nChecks for usage of the `debugger` statement\n\n### Why is this bad?\n`debugger` statements do not affect functionality when a debugger isn't attached.\nThey're most commonly an accidental debugging leftover.\n\n### Example\n```javascript\nconst data = await getData();\nconst result = complexCalculation(data);\ndebugger;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-debugger"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nChecks for usage of the `debugger` statement\n\n### Why is this bad?\n`debugger` statements do not affect functionality when a debugger isn't attached.\nThey're most commonly an accidental debugging leftover.\n\n### Example\n```javascript\nconst data = await getData();\nconst result = complexCalculation(data);\ndebugger;\n```\n"
        },
        "no-delete-var": {
          "description": "### What it does\n\nThe purpose of the delete operator is to remove a property from an object.\n\n### Why is this bad?\n\nUsing the delete operator on a variable might lead to unexpected behavior.\n\n### Example\n```javascript\nvar x;\ndelete x;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-delete-var"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThe purpose of the delete operator is to remove a property from an object.\n\n### Why is this bad?\n\nUsing the delete operator on a variable might lead to unexpected behavior.\n\n### Example\n```javascript\nvar x;\ndelete x;\n```\n"
        },
        "no-div-regex": {
          "description": "### What it does\n\nDisallow equal signs explicitly at the beginning of regular expressions.\n\n### Why is this bad?\n\nCharacters /= at the beginning of a regular expression literal can be confused with a\ndivision assignment operator.\n\n### Example\n```javascript\nfunction bar() { return /=foo/; }\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-div-regex"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow equal signs explicitly at the beginning of regular expressions.\n\n### Why is this bad?\n\nCharacters /= at the beginning of a regular expression literal can be confused with a\ndivision assignment operator.\n\n### Example\n```javascript\nfunction bar() { return /=foo/; }\n```\n"
        },
        "no-dupe-class-members": {
          "description": "### What it does\nDisallow duplicate class members\n\n### Why is this bad?\nIf there are declarations of the same name in class members,\nthe last declaration overwrites other declarations silently. It can cause unexpected behaviors.\n\n### Example\n```javascript\nclass A {\n  foo() { console.log(\"foo\") }\n  foo = 123;\n}\nlet a = new A();\na.foo() // Uncaught TypeError: a.foo is not a function\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-dupe-class-members"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow duplicate class members\n\n### Why is this bad?\nIf there are declarations of the same name in class members,\nthe last declaration overwrites other declarations silently. It can cause unexpected behaviors.\n\n### Example\n```javascript\nclass A {\n  foo() { console.log(\"foo\") }\n  foo = 123;\n}\nlet a = new A();\na.foo() // Uncaught TypeError: a.foo is not a function\n```\n"
        },
        "no-dupe-else-if": {
          "description": "### What it does\n\nDisallow duplicate conditions in if-else-if chains\n\n### Why is this bad?\n\nif-else-if chains are commonly used when there is a need to execute only one branch (or at most one branch) out of several possible branches, based on certain conditions.\nTwo identical test conditions in the same chain are almost always a mistake in the code. Unless there are side effects in the expressions,\na duplicate will evaluate to the same true or false value as the identical expression earlier in the chain, meaning that its branch can never execute.\n\n\n### Example\n```javascript\nif (a) {\nfoo();\n} else if (b) {\n    bar();\n} else if (b) {\n    baz();\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-dupe-else-if"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow duplicate conditions in if-else-if chains\n\n### Why is this bad?\n\nif-else-if chains are commonly used when there is a need to execute only one branch (or at most one branch) out of several possible branches, based on certain conditions.\nTwo identical test conditions in the same chain are almost always a mistake in the code. Unless there are side effects in the expressions,\na duplicate will evaluate to the same true or false value as the identical expression earlier in the chain, meaning that its branch can never execute.\n\n\n### Example\n```javascript\nif (a) {\nfoo();\n} else if (b) {\n    bar();\n} else if (b) {\n    baz();\n}\n```\n"
        },
        "no-dupe-keys": {
          "description": "### What it does\n\nDisallow duplicate keys in object literals\n\n### Why is this bad?\n\nMultiple properties with the same key in object literals can cause unexpected behavior in your application.\n\n### Example\n```javascript\nvar foo = {\n    bar: \"baz\",\n    bar: \"qux\"\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-dupe-keys"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow duplicate keys in object literals\n\n### Why is this bad?\n\nMultiple properties with the same key in object literals can cause unexpected behavior in your application.\n\n### Example\n```javascript\nvar foo = {\n    bar: \"baz\",\n    bar: \"qux\"\n}\n```\n"
        },
        "no-duplicate-case": {
          "description": "### What it does\n\nDisallow duplicate case labels\n\n### Why is this bad?\n\nIf a switch statement has duplicate test expressions in case clauses,\nit is likely that a programmer copied a case clause but forgot to change the test expression.\n\n### Example\n```javascript\nvar a = 1;\nswitch (a) {\n    case 1:\n        break;\n    case 1:\n        break;\n    case 2:\n        break;\n    default:\n        break;\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-duplicate-case"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow duplicate case labels\n\n### Why is this bad?\n\nIf a switch statement has duplicate test expressions in case clauses,\nit is likely that a programmer copied a case clause but forgot to change the test expression.\n\n### Example\n```javascript\nvar a = 1;\nswitch (a) {\n    case 1:\n        break;\n    case 1:\n        break;\n    case 2:\n        break;\n    default:\n        break;\n}\n```\n"
        },
        "no-empty": {
          "description": "### What it does\nDisallows empty block statements\n\n### Why is this bad?\nEmpty block statements, while not technically errors, usually occur due to refactoring that wasn’t completed.\nThey can cause confusion when reading code.\n\n### Example\n```javascript\nif (condition) {\n\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-empty"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallows empty block statements\n\n### Why is this bad?\nEmpty block statements, while not technically errors, usually occur due to refactoring that wasn’t completed.\nThey can cause confusion when reading code.\n\n### Example\n```javascript\nif (condition) {\n\n}\n```\n"
        },
        "no-empty-character-class": {
          "description": "### What it does\nDisallow empty character classes in regular expressions\n\n### Why is this bad?\nBecause empty character classes in regular expressions do not match anything, they might be typing mistakes.\n\n### Example\n```javascript\nvar foo = /^abc[]/;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-empty-character-class"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow empty character classes in regular expressions\n\n### Why is this bad?\nBecause empty character classes in regular expressions do not match anything, they might be typing mistakes.\n\n### Example\n```javascript\nvar foo = /^abc[]/;\n```\n"
        },
        "no-empty-function": {
          "description": "### What it does\nDisallows the usages of empty functions\n\n### Why is this bad?\nEmpty functions can reduce readability because readers need to guess whether it’s\nintentional or not. So writing a clear comment for empty functions is a good practice.\n\n### Example\n```javascript\n\nfunction foo() {\n}\n\nconst bar = () => {};\n\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-empty-function"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallows the usages of empty functions\n\n### Why is this bad?\nEmpty functions can reduce readability because readers need to guess whether it’s\nintentional or not. So writing a clear comment for empty functions is a good practice.\n\n### Example\n```javascript\n\nfunction foo() {\n}\n\nconst bar = () => {};\n\n```\n"
        },
        "no-empty-pattern": {
          "description": "### What it does\nDisallow empty destructuring patterns\n\n### Why is this bad?\nWhen using destructuring, it’s possible to create a pattern that has no effect.\nThis happens when empty curly braces are used to the right of\nan embedded object destructuring pattern, such as:\n\n```JavaScript\n// doesn't create any variables\nvar {a: {}} = foo;\n```\nIn this code, no new variables are created because a is just a location helper\nwhile the `{}` is expected to contain the variables to create, such as:\n\n```JavaScript\n// creates variable b\nvar {a: { b }} = foo;\n```\n\nIn many cases, the empty object pattern is a mistake\nwhere the author intended to use a default value instead, such as:\n\n```JavaScript\n// creates variable a\nvar {a = {}} = foo;\n```\n\nThe difference between these two patterns is subtle,\nespecially because the problematic empty pattern looks just like an object literal.\n\n### Examples of incorrect code for this rule:\n\n```JavaScript\nvar {} = foo;\nvar [] = foo;\nvar {a: {}} = foo;\nvar {a: []} = foo;\nfunction foo({}) {}\nfunction foo([]) {}\nfunction foo({a: {}}) {}\nfunction foo({a: []}) {}\n```\n\n### Examples of correct code for this rule:\n\n```JavaScript\nvar {a = {}} = foo;\nvar {a = []} = foo;\nfunction foo({a = {}}) {}\nfunction foo({a = []}) {}\n```\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-empty-pattern"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow empty destructuring patterns\n\n### Why is this bad?\nWhen using destructuring, it’s possible to create a pattern that has no effect.\nThis happens when empty curly braces are used to the right of\nan embedded object destructuring pattern, such as:\n\n```JavaScript\n// doesn't create any variables\nvar {a: {}} = foo;\n```\nIn this code, no new variables are created because a is just a location helper\nwhile the `{}` is expected to contain the variables to create, such as:\n\n```JavaScript\n// creates variable b\nvar {a: { b }} = foo;\n```\n\nIn many cases, the empty object pattern is a mistake\nwhere the author intended to use a default value instead, such as:\n\n```JavaScript\n// creates variable a\nvar {a = {}} = foo;\n```\n\nThe difference between these two patterns is subtle,\nespecially because the problematic empty pattern looks just like an object literal.\n\n### Examples of incorrect code for this rule:\n\n```JavaScript\nvar {} = foo;\nvar [] = foo;\nvar {a: {}} = foo;\nvar {a: []} = foo;\nfunction foo({}) {}\nfunction foo([]) {}\nfunction foo({a: {}}) {}\nfunction foo({a: []}) {}\n```\n\n### Examples of correct code for this rule:\n\n```JavaScript\nvar {a = {}} = foo;\nvar {a = []} = foo;\nfunction foo({a = {}}) {}\nfunction foo({a = []}) {}\n```\n\n"
        },
        "no-empty-static-block": {
          "description": "### What it does\nDisallows the usages of empty static blocks\n\n### Why is this bad?\nEmpty block statements, while not technically errors, usually occur due to refactoring that wasn’t completed.\nThey can cause confusion when reading code.\n\n### Example\n```javascript\n\nclass Foo {\n    static {\n    }\n}\n\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-empty-static-block"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallows the usages of empty static blocks\n\n### Why is this bad?\nEmpty block statements, while not technically errors, usually occur due to refactoring that wasn’t completed.\nThey can cause confusion when reading code.\n\n### Example\n```javascript\n\nclass Foo {\n    static {\n    }\n}\n\n```\n"
        },
        "no-eq-null": {
          "description": "### What it does\nDisallow null comparisons without type-checking operators.\n\n### Why is this bad?\nComparing to null without a type-checking operator (== or !=), can have unintended results as the comparison will evaluate to true when comparing to not just a null, but also an undefined value.\n\n### Example\n```javascript\nif (foo == null) {\n  bar();\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-eq-null"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow null comparisons without type-checking operators.\n\n### Why is this bad?\nComparing to null without a type-checking operator (== or !=), can have unintended results as the comparison will evaluate to true when comparing to not just a null, but also an undefined value.\n\n### Example\n```javascript\nif (foo == null) {\n  bar();\n}\n```\n"
        },
        "no-eval": {
          "description": "### What it does\nDisallows referencing the 'eval' function.\n\n### Why is this bad?\nCalling 'eval' is not supported in some secure contexts and can lead to\nvulnerabilities.\n\n### Example\n```javascript\nconst someString = \"console.log('pwned')\"\neval(someString);\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-eval"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallows referencing the 'eval' function.\n\n### Why is this bad?\nCalling 'eval' is not supported in some secure contexts and can lead to\nvulnerabilities.\n\n### Example\n```javascript\nconst someString = \"console.log('pwned')\"\neval(someString);\n```\n"
        },
        "no-ex-assign": {
          "description": "### What it does\nDisallow reassigning exceptions in catch clauses\n\n### Why is this bad?\nIf a catch clause in a try statement accidentally\n(or purposely) assigns another value to the exception parameter,\nit is impossible to refer to the error from that point on.\nSince there is no arguments object to offer alternative access to this data,\nassignment of the parameter is absolutely destructive.\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-ex-assign"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow reassigning exceptions in catch clauses\n\n### Why is this bad?\nIf a catch clause in a try statement accidentally\n(or purposely) assigns another value to the exception parameter,\nit is impossible to refer to the error from that point on.\nSince there is no arguments object to offer alternative access to this data,\nassignment of the parameter is absolutely destructive.\n\n### Example\n```javascript\n```\n"
        },
        "no-extra-boolean-cast": {
          "description": "### What it does\nThis rule disallows unnecessary boolean casts.\n\n### Why is this bad?\nIn contexts such as an if statement’s test where the result of the expression will already be coerced to a Boolean,\ncasting to a Boolean via double negation (!!) or a Boolean call is unnecessary.\n\n### Example\n```javascript\nvar foo = !!!bar;\nvar foo = Boolean(!!bar);\n\nif (!!foo) {}\nif (Boolean(foo)) {}\n\n// with \"enforceForLogicalOperands\" option enabled\nif (!!foo || bar) {}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-extra-boolean-cast"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nThis rule disallows unnecessary boolean casts.\n\n### Why is this bad?\nIn contexts such as an if statement’s test where the result of the expression will already be coerced to a Boolean,\ncasting to a Boolean via double negation (!!) or a Boolean call is unnecessary.\n\n### Example\n```javascript\nvar foo = !!!bar;\nvar foo = Boolean(!!bar);\n\nif (!!foo) {}\nif (Boolean(foo)) {}\n\n// with \"enforceForLogicalOperands\" option enabled\nif (!!foo || bar) {}\n```\n"
        },
        "no-fallthrough": {
          "description": "### What it does\n\nDisallow fallthrough of `case` statements\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-fallthrough"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow fallthrough of `case` statements\n\n"
        },
        "no-func-assign": {
          "description": "### What it does\nDisallow reassigning `function` declarations\n\n### Why is this bad?\nOverwriting/reassigning a function written as a FunctionDeclaration is often indicative of a mistake or issue.\n\n### Example\n```javascript\n\nfunction foo() {}\nfoo = bar;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-func-assign"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow reassigning `function` declarations\n\n### Why is this bad?\nOverwriting/reassigning a function written as a FunctionDeclaration is often indicative of a mistake or issue.\n\n### Example\n```javascript\n\nfunction foo() {}\nfoo = bar;\n```\n"
        },
        "no-global-assign": {
          "description": "### What it does\nDisallow modifications to read-only global variables.\n\n### Why is this bad?\nIn almost all cases, you don’t want to assign a value to these global variables as doing so could result in losing access to important functionality.\n\n### Example\n```javascript\nObject = null\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-global-assign"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow modifications to read-only global variables.\n\n### Why is this bad?\nIn almost all cases, you don’t want to assign a value to these global variables as doing so could result in losing access to important functionality.\n\n### Example\n```javascript\nObject = null\n```\n"
        },
        "no-import-assign": {
          "description": "### What it does\n\nDisallow assigning to imported bindings\n\n### Why is this bad?\n\nThe updates of imported bindings by ES Modules cause runtime errors.\n\n\n### Example\n```javascript\nimport mod, { named } from \"./mod.mjs\"\nimport * as mod_ns from \"./mod.mjs\"\n\nmod = 1          // ERROR: 'mod' is readonly.\nnamed = 2        // ERROR: 'named' is readonly.\nmod_ns.named = 3 // ERROR: The members of 'mod_ns' are readonly.\nmod_ns = {}      // ERROR: 'mod_ns' is readonly.\n// Can't extend 'mod_ns'\nObject.assign(mod_ns, { foo: \"foo\" }) // ERROR: The members of 'mod_ns' are readonly.\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-import-assign"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow assigning to imported bindings\n\n### Why is this bad?\n\nThe updates of imported bindings by ES Modules cause runtime errors.\n\n\n### Example\n```javascript\nimport mod, { named } from \"./mod.mjs\"\nimport * as mod_ns from \"./mod.mjs\"\n\nmod = 1          // ERROR: 'mod' is readonly.\nnamed = 2        // ERROR: 'named' is readonly.\nmod_ns.named = 3 // ERROR: The members of 'mod_ns' are readonly.\nmod_ns = {}      // ERROR: 'mod_ns' is readonly.\n// Can't extend 'mod_ns'\nObject.assign(mod_ns, { foo: \"foo\" }) // ERROR: The members of 'mod_ns' are readonly.\n```\n"
        },
        "no-inner-declarations": {
          "description": "### What it does\n\nDisallow variable or function declarations in nested blocks\n\n### Why is this bad?\n\nA variable declaration is permitted anywhere a statement can go, even nested deeply inside other blocks.\nThis is often undesirable due to variable hoisting, and moving declarations to the root of the program or function body can increase clarity.\nNote that block bindings (let, const) are not hoisted and therefore they are not affected by this rule.\n\n\n### Example\n```javascript\nif (test) {\n    function doSomethingElse () { }\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-inner-declarations"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow variable or function declarations in nested blocks\n\n### Why is this bad?\n\nA variable declaration is permitted anywhere a statement can go, even nested deeply inside other blocks.\nThis is often undesirable due to variable hoisting, and moving declarations to the root of the program or function body can increase clarity.\nNote that block bindings (let, const) are not hoisted and therefore they are not affected by this rule.\n\n\n### Example\n```javascript\nif (test) {\n    function doSomethingElse () { }\n}\n```\n"
        },
        "no-irregular-whitespace": {
          "description": "### What it does\nDisallows the use of irregular whitespaces in the code.\n\n### Why is this bad\nThe use of irregular whitespaces can hinder code readability and\ncreate inconsistencies, making maintenance and collaboration more challenging.\n\n### Example\n```javascript\nfunction  invalidExample  (  ) {\n    return  42;\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-irregular-whitespace"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallows the use of irregular whitespaces in the code.\n\n### Why is this bad\nThe use of irregular whitespaces can hinder code readability and\ncreate inconsistencies, making maintenance and collaboration more challenging.\n\n### Example\n```javascript\nfunction  invalidExample  (  ) {\n    return  42;\n}\n```\n"
        },
        "no-iterator": {
          "description": "### What it does\nDisallow the use of the __iterator__ property\n\n### Why is this bad?\nThe __iterator__ property was a SpiderMonkey extension to JavaScript that could be used to create custom iterators that are compatible with JavaScript’s for in and for each constructs. However, this property is now obsolete, so it should not be used. Here’s an example of how this used to work:\n\n### Example\n```javascript\nFoo.prototype.__iterator__ = function() {\n    return new FooIterator(this);\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-iterator"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow the use of the __iterator__ property\n\n### Why is this bad?\nThe __iterator__ property was a SpiderMonkey extension to JavaScript that could be used to create custom iterators that are compatible with JavaScript’s for in and for each constructs. However, this property is now obsolete, so it should not be used. Here’s an example of how this used to work:\n\n### Example\n```javascript\nFoo.prototype.__iterator__ = function() {\n    return new FooIterator(this);\n}\n```\n"
        },
        "no-loss-of-precision": {
          "description": "### What it does\n\nDisallow precision loss of number literal\n\n### Why is this bad?\n\nIt can lead to unexpected results in certain situations\nFor example, when performing mathematical operations\n\n### Example\n\n```javascript\nvar x = 2e999;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-loss-of-precision"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow precision loss of number literal\n\n### Why is this bad?\n\nIt can lead to unexpected results in certain situations\nFor example, when performing mathematical operations\n\n### Example\n\n```javascript\nvar x = 2e999;\n```\n"
        },
        "no-multi-str": {
          "description": "### What it does\n\nDisallow multiline strings.\n\n### Why is this bad?\n\nSome consider this to be a bad practice as it was an undocumented feature of JavaScript\nthat was only formalized later.\n\n### Example\n```javascript\nvar x = \"Line 1 \\\n Line 2\";\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-multi-str"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow multiline strings.\n\n### Why is this bad?\n\nSome consider this to be a bad practice as it was an undocumented feature of JavaScript\nthat was only formalized later.\n\n### Example\n```javascript\nvar x = \"Line 1 \\\n Line 2\";\n```\n"
        },
        "no-new": {
          "description": "### What it does\n\nDisallow new operators outside of assignments or comparisons.\n\n### Why is this bad?\n\nCalling new without assigning or comparing it the reference is thrown away and in many\ncases the constructor can be replaced with a function.\n\n### Example\n```javascript\nnew Person();\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-new"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow new operators outside of assignments or comparisons.\n\n### Why is this bad?\n\nCalling new without assigning or comparing it the reference is thrown away and in many\ncases the constructor can be replaced with a function.\n\n### Example\n```javascript\nnew Person();\n```\n"
        },
        "no-new-native-nonconstructor": {
          "description": "### What it does\n\nDisallow new operators with global non-constructor functions (Symbol, BigInt)\n\n### Why is this bad?\n\nBoth new Symbol and new BigInt throw a type error because they are functions and not classes.\nIt is easy to make this mistake by assuming the uppercase letters indicate classes.\n\n### Example\n```javascript\n// throws a TypeError\nlet foo = new Symbol(\"foo\");\n\n// throws a TypeError\nlet result = new BigInt(9007199254740991);\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-new-native-nonconstructor"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow new operators with global non-constructor functions (Symbol, BigInt)\n\n### Why is this bad?\n\nBoth new Symbol and new BigInt throw a type error because they are functions and not classes.\nIt is easy to make this mistake by assuming the uppercase letters indicate classes.\n\n### Example\n```javascript\n// throws a TypeError\nlet foo = new Symbol(\"foo\");\n\n// throws a TypeError\nlet result = new BigInt(9007199254740991);\n```\n"
        },
        "no-new-wrappers": {
          "description": "### What it does\n\nDisallow new operators with the String, Number, and Boolean objects\n\n### Why is this bad?\n\nThe first problem is that primitive wrapper objects are, in fact, objects. That means typeof will return \"object\" instead of \"string\", \"number\", or \"boolean\".\nThe second problem comes with boolean objects. Every object is truthy, that means an instance of Boolean always resolves to true even when its actual value is false.\nhttps://eslint.org/docs/latest/rules/no-new-wrappers\n\n### Example\n```javascript\nvar stringObject = new String('Hello world');\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-new-wrappers"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow new operators with the String, Number, and Boolean objects\n\n### Why is this bad?\n\nThe first problem is that primitive wrapper objects are, in fact, objects. That means typeof will return \"object\" instead of \"string\", \"number\", or \"boolean\".\nThe second problem comes with boolean objects. Every object is truthy, that means an instance of Boolean always resolves to true even when its actual value is false.\nhttps://eslint.org/docs/latest/rules/no-new-wrappers\n\n### Example\n```javascript\nvar stringObject = new String('Hello world');\n```\n"
        },
        "no-nonoctal-decimal-escape": {
          "description": "### What it does\nThis rule disallows \\8 and \\9 escape sequences in string literals\n\n### Why is this bad?\nECMAScript specification treats \\8 and \\9 in string literals as a legacy feature\n\n### Example\n```javascript\nincorrect:\n\"\\8\"\n\"\\9\"\ncorrect:\n\"8\"\n\"\\\\9\"\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-nonoctal-decimal-escape"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nThis rule disallows \\8 and \\9 escape sequences in string literals\n\n### Why is this bad?\nECMAScript specification treats \\8 and \\9 in string literals as a legacy feature\n\n### Example\n```javascript\nincorrect:\n\"\\8\"\n\"\\9\"\ncorrect:\n\"8\"\n\"\\\\9\"\n```\n"
        },
        "no-obj-calls": {
          "description": "### What it does\nDisallow calling some global objects as functions\n\n### Why is this bad?\nSome global objects are not intended to be called as functions.\nCalling them as functions will usually result in a TypeError being thrown.\n\n### Example\n```javascript\n// Bad\nlet math = Math();\nlet newMath = new Math();\n\nlet json = JSON();\nlet newJson = new JSON();\n\nlet atomics = Atomics();\nlet newAtomics = new Atomics();\n\nlet intl = Intl();\nlet newIntl = new Intl();\n\nlet reflect = Reflect();\nlet newReflect = new Reflect();\n\n// Good\nlet area = r => 2 * Math.PI * r * r;\nlet object = JSON.parse(\"{}\");\nlet first = Atomics.load(sharedArray, 0);\nlet segmenterFrom = Intl.Segmenter(\"fr\", { granularity: \"word\" });\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-obj-calls"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow calling some global objects as functions\n\n### Why is this bad?\nSome global objects are not intended to be called as functions.\nCalling them as functions will usually result in a TypeError being thrown.\n\n### Example\n```javascript\n// Bad\nlet math = Math();\nlet newMath = new Math();\n\nlet json = JSON();\nlet newJson = new JSON();\n\nlet atomics = Atomics();\nlet newAtomics = new Atomics();\n\nlet intl = Intl();\nlet newIntl = new Intl();\n\nlet reflect = Reflect();\nlet newReflect = new Reflect();\n\n// Good\nlet area = r => 2 * Math.PI * r * r;\nlet object = JSON.parse(\"{}\");\nlet first = Atomics.load(sharedArray, 0);\nlet segmenterFrom = Intl.Segmenter(\"fr\", { granularity: \"word\" });\n```\n"
        },
        "no-proto": {
          "description": "### What it does\nDisallow the use of the __proto__ property\n\n### Why is this bad?\n__proto__ property has been deprecated as of ECMAScript 3.1 and shouldn’t be used in the code. Use Object.getPrototypeOf and Object.setPrototypeOf instead.\n\n### Example\n```javascript\n/*eslint no-proto: \"error\"*/\n\nvar a = obj.__proto__;\n\nvar a = obj[\"__proto__\"];\n\nobj.__proto__ = b;\n\nobj[\"__proto__\"] = b;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-proto"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow the use of the __proto__ property\n\n### Why is this bad?\n__proto__ property has been deprecated as of ECMAScript 3.1 and shouldn’t be used in the code. Use Object.getPrototypeOf and Object.setPrototypeOf instead.\n\n### Example\n```javascript\n/*eslint no-proto: \"error\"*/\n\nvar a = obj.__proto__;\n\nvar a = obj[\"__proto__\"];\n\nobj.__proto__ = b;\n\nobj[\"__proto__\"] = b;\n```\n"
        },
        "no-prototype-builtins": {
          "description": "### What it does\n\nDisallow calling some Object.prototype methods directly on objects\n\n### Why is this bad?\n\nIn ECMAScript 5.1, Object.create was added, which enables the creation of objects with a specified [[Prototype]].\nObject.create(null) is a common pattern used to create objects that will be used as a Map.\nThis can lead to errors when it is assumed that objects will have properties from Object.prototype. This rule prevents calling some Object.prototype methods directly from an object.\nAdditionally, objects can have properties that shadow the builtins on Object.prototype, potentially causing unintended behavior or denial-of-service security vulnerabilities.\nFor example, it would be unsafe for a webserver to parse JSON input from a client and call hasOwnProperty directly on the resulting object, because a malicious client could send a JSON value like {\"hasOwnProperty\": 1} and cause the server to crash.\n\nTo avoid subtle bugs like this, it’s better to always call these methods from Object.prototype. For example, foo.hasOwnProperty(\"bar\") should be replaced with Object.prototype.hasOwnProperty.call(foo, \"bar\").\n\n\n### Example\n```javascript\nvar hasBarProperty = foo.hasOwnProperty(\"bar\");\nvar isPrototypeOfBar = foo.isPrototypeOf(bar);\nvar barIsEnumerable = foo.propertyIsEnumerable(\"bar\");\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-prototype-builtins"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow calling some Object.prototype methods directly on objects\n\n### Why is this bad?\n\nIn ECMAScript 5.1, Object.create was added, which enables the creation of objects with a specified [[Prototype]].\nObject.create(null) is a common pattern used to create objects that will be used as a Map.\nThis can lead to errors when it is assumed that objects will have properties from Object.prototype. This rule prevents calling some Object.prototype methods directly from an object.\nAdditionally, objects can have properties that shadow the builtins on Object.prototype, potentially causing unintended behavior or denial-of-service security vulnerabilities.\nFor example, it would be unsafe for a webserver to parse JSON input from a client and call hasOwnProperty directly on the resulting object, because a malicious client could send a JSON value like {\"hasOwnProperty\": 1} and cause the server to crash.\n\nTo avoid subtle bugs like this, it’s better to always call these methods from Object.prototype. For example, foo.hasOwnProperty(\"bar\") should be replaced with Object.prototype.hasOwnProperty.call(foo, \"bar\").\n\n\n### Example\n```javascript\nvar hasBarProperty = foo.hasOwnProperty(\"bar\");\nvar isPrototypeOfBar = foo.isPrototypeOf(bar);\nvar barIsEnumerable = foo.propertyIsEnumerable(\"bar\");\n```\n"
        },
        "no-redeclare": {
          "description": "### What it does\n\nDisallow variable redeclaration\n\n### Why is this bad?\n\nn JavaScript, it’s possible to redeclare the same variable name using var. This can lead to confusion as to where the variable is actually declared and initialized.\n\n### Example\n```javascript\nvar a = 3;\nvar a = 10;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-redeclare"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow variable redeclaration\n\n### Why is this bad?\n\nn JavaScript, it’s possible to redeclare the same variable name using var. This can lead to confusion as to where the variable is actually declared and initialized.\n\n### Example\n```javascript\nvar a = 3;\nvar a = 10;\n```\n"
        },
        "no-regex-spaces": {
          "description": "### What it does\nDisallow 2+ consecutive spaces in regular expressions.\n\n### Why is this bad?\n\nIn a regular expression, it is hard to tell how many spaces are\nintended to be matched. It is better to use only one space and\nthen specify how many spaces are expected using a quantifier.\n\n```javascript\nvar re = /foo {3}bar/;\n```\n\n### Example\n```javascript\nvar re = /foo   bar/;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-regex-spaces"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow 2+ consecutive spaces in regular expressions.\n\n### Why is this bad?\n\nIn a regular expression, it is hard to tell how many spaces are\nintended to be matched. It is better to use only one space and\nthen specify how many spaces are expected using a quantifier.\n\n```javascript\nvar re = /foo {3}bar/;\n```\n\n### Example\n```javascript\nvar re = /foo   bar/;\n```\n"
        },
        "no-restricted-globals": {
          "description": "### What it does\n\nThis rule allows you to specify global variable names that you don't want to use in your application.\n\n### Why is this bad?\n\nDisallowing usage of specific global variables can be useful if you want to allow a set of global\nvariables by enabling an environment, but still want to disallow some of those.\n\nFor instance, early Internet Explorer versions exposed the current DOM event as a global variable\n`event`, but using this variable has been considered as a bad practice for a long time. Restricting\nthis will make sure this variable isn't used in browser code.\n\n### Example\n\nIf we have options:\n\n```json\n\"no-restricted-globals\": [\"error\", \"event\"]\n```\n\nThe following patterns are considered problems:\n\n```javascript\nfunction onClick() {\n   console.log(event);    // Unexpected global variable 'event'. Use local parameter instead.\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-restricted-globals"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule allows you to specify global variable names that you don't want to use in your application.\n\n### Why is this bad?\n\nDisallowing usage of specific global variables can be useful if you want to allow a set of global\nvariables by enabling an environment, but still want to disallow some of those.\n\nFor instance, early Internet Explorer versions exposed the current DOM event as a global variable\n`event`, but using this variable has been considered as a bad practice for a long time. Restricting\nthis will make sure this variable isn't used in browser code.\n\n### Example\n\nIf we have options:\n\n```json\n\"no-restricted-globals\": [\"error\", \"event\"]\n```\n\nThe following patterns are considered problems:\n\n```javascript\nfunction onClick() {\n   console.log(event);    // Unexpected global variable 'event'. Use local parameter instead.\n}\n```\n"
        },
        "no-script-url": {
          "description": "### What it does\nDisallow javascript: urls\n\n### Why is this bad?\nUsing javascript: URLs is considered by some as a form of eval. Code passed in javascript: URLs has to be parsed and evaluated by the browser in the same way that eval is processed.\n\n### Example\n```javascript\n/*eslint no-script-url: \"error\"*/\n\nlocation.href = \"javascript:void(0)\";\n\nlocation.href = `javascript:void(0)`;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-script-url"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow javascript: urls\n\n### Why is this bad?\nUsing javascript: URLs is considered by some as a form of eval. Code passed in javascript: URLs has to be parsed and evaluated by the browser in the same way that eval is processed.\n\n### Example\n```javascript\n/*eslint no-script-url: \"error\"*/\n\nlocation.href = \"javascript:void(0)\";\n\nlocation.href = `javascript:void(0)`;\n```\n"
        },
        "no-self-assign": {
          "description": "### What it does\n\nDisallow assignments where both sides are exactly the same\n\n### Why is this bad?\n\nSelf assignments have no effect, so probably those are an error due to incomplete refactoring. Those indicate that what you should do is still remaining.\n\n### Example\n```javascript\nfoo = foo;\n[bar, baz] = [bar, qiz];\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-self-assign"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow assignments where both sides are exactly the same\n\n### Why is this bad?\n\nSelf assignments have no effect, so probably those are an error due to incomplete refactoring. Those indicate that what you should do is still remaining.\n\n### Example\n```javascript\nfoo = foo;\n[bar, baz] = [bar, qiz];\n```\n"
        },
        "no-self-compare": {
          "description": "### What it does\n\nDisallow comparisons where both sides are exactly the same\n\n### Why is this bad?\n\nComparing a variable against itself is usually an error, either a typo or refactoring error.\nIt is confusing to the reader and may potentially introduce a runtime error.\n\n### Example\n```javascript\nvar x = 10;\nif (x === x) {\n  x = 20;\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-self-compare"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow comparisons where both sides are exactly the same\n\n### Why is this bad?\n\nComparing a variable against itself is usually an error, either a typo or refactoring error.\nIt is confusing to the reader and may potentially introduce a runtime error.\n\n### Example\n```javascript\nvar x = 10;\nif (x === x) {\n  x = 20;\n}\n```\n"
        },
        "no-setter-return": {
          "description": "### What it does\n\nSetters cannot return values.\n\n### Why is this bad?\n\nWhile returning a value from a setter does not produce an error, the returned value is\nbeing ignored. Therefore, returning a value from a setter is either unnecessary or a\npossible error, since the returned value cannot be used.\n\n### Example\n\n```javascript\nclass URL {\n  set origin() {\n    return true;\n  }\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-setter-return"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nSetters cannot return values.\n\n### Why is this bad?\n\nWhile returning a value from a setter does not produce an error, the returned value is\nbeing ignored. Therefore, returning a value from a setter is either unnecessary or a\npossible error, since the returned value cannot be used.\n\n### Example\n\n```javascript\nclass URL {\n  set origin() {\n    return true;\n  }\n}\n```\n"
        },
        "no-shadow-restricted-names": {
          "description": "### What it does\n\nDisallow redefine the global variables like 'undefined', 'NaN', 'Infinity', 'eval', 'arguments'.\n\n### Why is this bad?\n\n\n### Example\n```javascript\nfunction NaN(){}\n\n!function(Infinity){};\n\nvar undefined = 5;\n\ntry {} catch(eval){}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-shadow-restricted-names"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow redefine the global variables like 'undefined', 'NaN', 'Infinity', 'eval', 'arguments'.\n\n### Why is this bad?\n\n\n### Example\n```javascript\nfunction NaN(){}\n\n!function(Infinity){};\n\nvar undefined = 5;\n\ntry {} catch(eval){}\n```\n"
        },
        "no-sparse-arrays": {
          "description": "### What it does\n\nDisallow sparse arrays.\n\n### Why is this bad?\n\nThe confusion around sparse arrays is enough that it’s recommended to avoid using them unless you are certain that they are useful in your code.\n\n### Example\n```javascript\nvar items = [,,];\nvar colors = [ \"red\",, \"blue\" ];\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-sparse-arrays"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow sparse arrays.\n\n### Why is this bad?\n\nThe confusion around sparse arrays is enough that it’s recommended to avoid using them unless you are certain that they are useful in your code.\n\n### Example\n```javascript\nvar items = [,,];\nvar colors = [ \"red\",, \"blue\" ];\n```\n"
        },
        "no-template-curly-in-string": {
          "description": "### What it does\nDisallow template literal placeholder syntax in regular strings\n\n### Why is this bad?\nECMAScript 6 allows programmers to create strings containing variable or expressions using template literals, instead of string concatenation, by writing expressions like ${variable} between two backtick quotes (`). It can be easy to use the wrong quotes when wanting to use template literals, by writing \"${variable}\", and end up with the literal value \"${variable}\" instead of a string containing the value of the injected expressions.\n\n### Example\n```javascript\n/*eslint no-template-curly-in-string: \"error\"*/\n\"Hello ${name}!\";\n'Hello ${name}!';\n\"Time: ${12 * 60 * 60 * 1000}\";\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-template-curly-in-string"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow template literal placeholder syntax in regular strings\n\n### Why is this bad?\nECMAScript 6 allows programmers to create strings containing variable or expressions using template literals, instead of string concatenation, by writing expressions like ${variable} between two backtick quotes (`). It can be easy to use the wrong quotes when wanting to use template literals, by writing \"${variable}\", and end up with the literal value \"${variable}\" instead of a string containing the value of the injected expressions.\n\n### Example\n```javascript\n/*eslint no-template-curly-in-string: \"error\"*/\n\"Hello ${name}!\";\n'Hello ${name}!';\n\"Time: ${12 * 60 * 60 * 1000}\";\n```\n"
        },
        "no-ternary": {
          "description": "### What it does\nDisallow ternary operators\n\n### Why is this bad?\nThe ternary operator is used to conditionally assign a value to a variable. Some believe that the use of ternary operators leads to unclear code.\n\n### Example\n```javascript\nvar foo = isBar ? baz : qux;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-ternary"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow ternary operators\n\n### Why is this bad?\nThe ternary operator is used to conditionally assign a value to a variable. Some believe that the use of ternary operators leads to unclear code.\n\n### Example\n```javascript\nvar foo = isBar ? baz : qux;\n```\n"
        },
        "no-this-before-super": {
          "description": "### What it does\nRequires calling `super()` before using `this` or `super`.\n\n### Why is this bad?\nGetters should always return a value.\nIf they don't, it's probably a mistake.\n\n### Example\n```javascript\nclass A1 extends B {\n    constructor() {\n        // super() needs to be called first\n        this.a = 0;\n        super();\n    }\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-this-before-super"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nRequires calling `super()` before using `this` or `super`.\n\n### Why is this bad?\nGetters should always return a value.\nIf they don't, it's probably a mistake.\n\n### Example\n```javascript\nclass A1 extends B {\n    constructor() {\n        // super() needs to be called first\n        this.a = 0;\n        super();\n    }\n}\n```\n"
        },
        "no-undef": {
          "description": "### What it does\n\nDisallow the use of undeclared variables.\n\n### Why is this bad?\n\nIt is most likely a potential ReferenceError caused by a misspelling of a variable or parameter name.\n\n### Example\n```javascript\nvar foo = someFunction();\nvar bar = a + 1;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-undef"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow the use of undeclared variables.\n\n### Why is this bad?\n\nIt is most likely a potential ReferenceError caused by a misspelling of a variable or parameter name.\n\n### Example\n```javascript\nvar foo = someFunction();\nvar bar = a + 1;\n```\n"
        },
        "no-undefined": {
          "description": "### What it does\nDisallow the use of `undefined` as an identifier\n\n### Why is this bad?\n\n\n### Example of bad code\n```javascript\n\nvar foo = undefined;\n\nvar undefined = \"foo\";\n\nif (foo === undefined) {\n...\n}\n\nfunction baz(undefined) {\n...\n}\n\nbar(undefined, \"lorem\");\n\n```\n\n### Example of good code\n```javascript\nvar foo = void 0;\n\nvar Undefined = \"foo\";\n\nif (typeof foo === \"undefined\") {\n...\n}\n\nglobal.undefined = \"foo\";\n\nbar(void 0, \"lorem\");\n```\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-undefined"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow the use of `undefined` as an identifier\n\n### Why is this bad?\n\n\n### Example of bad code\n```javascript\n\nvar foo = undefined;\n\nvar undefined = \"foo\";\n\nif (foo === undefined) {\n...\n}\n\nfunction baz(undefined) {\n...\n}\n\nbar(undefined, \"lorem\");\n\n```\n\n### Example of good code\n```javascript\nvar foo = void 0;\n\nvar Undefined = \"foo\";\n\nif (typeof foo === \"undefined\") {\n...\n}\n\nglobal.undefined = \"foo\";\n\nbar(void 0, \"lorem\");\n```\n\n"
        },
        "no-unreachable": {
          "description": "### What it does\n\nDisallow unreachable code after `return`, `throw`, `continue`, and `break` statements\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-unreachable"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow unreachable code after `return`, `throw`, `continue`, and `break` statements\n\n"
        },
        "no-unsafe-finally": {
          "description": "### What it does\n\nDisallow control flow statements in finally blocks\n\n### Why is this bad?\n\nJavaScript suspends the control flow statements of try and catch blocks until the execution of finally block finishes.\nSo, when return, throw, break, or continue is used in finally, control flow statements inside try and catch are overwritten, which is considered as unexpected behavior.\n\n### Example\n```javascript\n// We expect this function to return 1;\n(() => {\n    try {\n        return 1; // 1 is returned but suspended until finally block ends\n    } catch(err) {\n        return 2;\n    } finally {\n        return 3; // 3 is returned before 1, which we did not expect\n    }\n})();\n\n// > 3\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-unsafe-finally"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow control flow statements in finally blocks\n\n### Why is this bad?\n\nJavaScript suspends the control flow statements of try and catch blocks until the execution of finally block finishes.\nSo, when return, throw, break, or continue is used in finally, control flow statements inside try and catch are overwritten, which is considered as unexpected behavior.\n\n### Example\n```javascript\n// We expect this function to return 1;\n(() => {\n    try {\n        return 1; // 1 is returned but suspended until finally block ends\n    } catch(err) {\n        return 2;\n    } finally {\n        return 3; // 3 is returned before 1, which we did not expect\n    }\n})();\n\n// > 3\n```\n"
        },
        "no-unsafe-negation": {
          "description": "### What it does\nDisallow negating the left operand of relational operators\n\n### Why is this bad?\nJust as developers might type -a + b when they mean -(a + b) for the negative of a sum,\nthey might type !key in object by mistake when they almost certainly mean !(key in object)\nto test that a key is not in an object. !obj instanceof Ctor is similar.\n\n### Example\n```javascript\nif (!key in object) {\n  //operator precedence makes it equivalent to (!key) in object\n  //and type conversion makes it equivalent to (key ? \"false\" : \"true\") in object\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-unsafe-negation"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow negating the left operand of relational operators\n\n### Why is this bad?\nJust as developers might type -a + b when they mean -(a + b) for the negative of a sum,\nthey might type !key in object by mistake when they almost certainly mean !(key in object)\nto test that a key is not in an object. !obj instanceof Ctor is similar.\n\n### Example\n```javascript\nif (!key in object) {\n  //operator precedence makes it equivalent to (!key) in object\n  //and type conversion makes it equivalent to (key ? \"false\" : \"true\") in object\n}\n```\n"
        },
        "no-unsafe-optional-chaining": {
          "description": "### What it does\n\nDisallow use of optional chaining in contexts where the undefined value is not allowed\n\n### Why is this bad?\n\nThe optional chaining (?.) expression can short-circuit with a return value of undefined.\nTherefore, treating an evaluated optional chaining expression as a function, object, number, etc.,\ncan cause TypeError or unexpected results. For example:\n\n### Example\n```javascript\nvar obj = undefined;\n1 in obj?.foo;  // TypeError\nwith (obj?.foo);  // TypeError\nfor (bar of obj?.foo);  // TypeError\nbar instanceof obj?.foo;  // TypeError\nconst { bar } = obj?.foo;  // TypeError\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-unsafe-optional-chaining"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow use of optional chaining in contexts where the undefined value is not allowed\n\n### Why is this bad?\n\nThe optional chaining (?.) expression can short-circuit with a return value of undefined.\nTherefore, treating an evaluated optional chaining expression as a function, object, number, etc.,\ncan cause TypeError or unexpected results. For example:\n\n### Example\n```javascript\nvar obj = undefined;\n1 in obj?.foo;  // TypeError\nwith (obj?.foo);  // TypeError\nfor (bar of obj?.foo);  // TypeError\nbar instanceof obj?.foo;  // TypeError\nconst { bar } = obj?.foo;  // TypeError\n```\n"
        },
        "no-unused-labels": {
          "description": "### What it does\n\nDisallow unused labels\n\n\n### Why is this bad?\n\nLabels that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring.\n\n### Example\n```javascript\nOUTER_LOOP:\nfor (const student of students) {\n    if (checkScores(student.scores)) {\n        continue;\n    }\n    doSomething(student);\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-unused-labels"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow unused labels\n\n\n### Why is this bad?\n\nLabels that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring.\n\n### Example\n```javascript\nOUTER_LOOP:\nfor (const student of students) {\n    if (checkScores(student.scores)) {\n        continue;\n    }\n    doSomething(student);\n}\n```\n"
        },
        "no-unused-private-class-members": {
          "description": "### What it does\n\nDisallow unused private class members\n\n### Why is this bad?\n\nPrivate class members that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such class members take up space in the code and can lead to confusion by readers.\n\n### Example\n```javascript\n\n/// bad\nclass A {\n\t\t#unusedMember = 5;\n\t}\n\n\tclass B {\n\t\t\t#usedOnlyInWrite = 5;\n\t\t\tmethod() {\n\t\t\t\t\tthis.#usedOnlyInWrite = 42;\n\t\t\t}\n\t}\n\n\tclass C {\n\t\t\t#usedOnlyToUpdateItself = 5;\n\t\t\tmethod() {\n\t\t\t\t\tthis.#usedOnlyToUpdateItself++;\n\t\t\t}\n\t}\n\n\tclass D {\n\t\t\t#unusedMethod() {}\n\t}\n\n\tclass E {\n\t\t\tget #unusedAccessor() {}\n\t\t\tset #unusedAccessor(value) {}\n\t}\n\n/// Good\nclass A {\n\t\t#usedMember = 42;\n\t\tmethod() {\n\t\t\t\treturn this.#usedMember;\n\t\t}\n\t}\n\tclass B {\n\t\t\t#usedMethod() {\n\t\t\t\t\treturn 42;\n\t\t\t}\n\t\t\tanotherMethod() {\n\t\t\t\t\treturn this.#usedMethod();\n\t\t\t}\n\t}\n\tclass C {\n\t\t\tget #usedAccessor() {}\n\t\t\tset #usedAccessor(value) {}\n\n\t\t\tmethod() {\n\t\t\t\t\tthis.#usedAccessor = 42;\n\t\t\t}\n\t}\n\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-unused-private-class-members"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow unused private class members\n\n### Why is this bad?\n\nPrivate class members that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such class members take up space in the code and can lead to confusion by readers.\n\n### Example\n```javascript\n\n/// bad\nclass A {\n\t\t#unusedMember = 5;\n\t}\n\n\tclass B {\n\t\t\t#usedOnlyInWrite = 5;\n\t\t\tmethod() {\n\t\t\t\t\tthis.#usedOnlyInWrite = 42;\n\t\t\t}\n\t}\n\n\tclass C {\n\t\t\t#usedOnlyToUpdateItself = 5;\n\t\t\tmethod() {\n\t\t\t\t\tthis.#usedOnlyToUpdateItself++;\n\t\t\t}\n\t}\n\n\tclass D {\n\t\t\t#unusedMethod() {}\n\t}\n\n\tclass E {\n\t\t\tget #unusedAccessor() {}\n\t\t\tset #unusedAccessor(value) {}\n\t}\n\n/// Good\nclass A {\n\t\t#usedMember = 42;\n\t\tmethod() {\n\t\t\t\treturn this.#usedMember;\n\t\t}\n\t}\n\tclass B {\n\t\t\t#usedMethod() {\n\t\t\t\t\treturn 42;\n\t\t\t}\n\t\t\tanotherMethod() {\n\t\t\t\t\treturn this.#usedMethod();\n\t\t\t}\n\t}\n\tclass C {\n\t\t\tget #usedAccessor() {}\n\t\t\tset #usedAccessor(value) {}\n\n\t\t\tmethod() {\n\t\t\t\t\tthis.#usedAccessor = 42;\n\t\t\t}\n\t}\n\n```\n"
        },
        "no-useless-catch": {
          "description": "### What it does\n\nDisallow unnecessary catch clauses\n\n### Why is this bad?\n\nA catch clause that only rethrows the original error is redundant,\nand has no effect on the runtime behavior of the program.\nThese redundant clauses can be a source of confusion and code bloat,\nso it’s better to disallow these unnecessary catch clauses.\n\n### Example\n```javascript\ntry {\n  doSomethingThatMightThrow();\n} catch (e) {\n  throw e;\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-useless-catch"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow unnecessary catch clauses\n\n### Why is this bad?\n\nA catch clause that only rethrows the original error is redundant,\nand has no effect on the runtime behavior of the program.\nThese redundant clauses can be a source of confusion and code bloat,\nso it’s better to disallow these unnecessary catch clauses.\n\n### Example\n```javascript\ntry {\n  doSomethingThatMightThrow();\n} catch (e) {\n  throw e;\n}\n```\n"
        },
        "no-useless-concat": {
          "description": "### What it does\n\nDisallow unnecessary concatenation of literals or template literals\n\n### Why is this bad?\n\nIt’s unnecessary to concatenate two strings together.\n\n### Example\n```javascript\nvar foo = \"a\" + \"b\";\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-useless-concat"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow unnecessary concatenation of literals or template literals\n\n### Why is this bad?\n\nIt’s unnecessary to concatenate two strings together.\n\n### Example\n```javascript\nvar foo = \"a\" + \"b\";\n```\n"
        },
        "no-useless-constructor": {
          "description": "### What it does\n\nDisallow unnecessary constructors\n\nThis rule flags class constructors that can be safely removed without\nchanging how the class works.\n\nES2015 provides a default class constructor if one is not specified. As\nsuch, it is unnecessary to provide an empty constructor or one that\nsimply delegates into its parent class, as in the following examples:\n\n\n### Example\n\nExamples of **incorrect** code for this rule:\n```javascript\nclass A {\n    constructor () {\n    }\n}\n\nclass B extends A {\n    constructor (...args) {\n      super(...args);\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n```javascript\nclass A { }\n\nclass B {\n    constructor () {\n        doSomething();\n    }\n}\n\nclass C extends A {\n    constructor() {\n        super('foo');\n    }\n}\n\nclass D extends A {\n    constructor() {\n        super();\n        doSomething();\n    }\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-useless-constructor"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow unnecessary constructors\n\nThis rule flags class constructors that can be safely removed without\nchanging how the class works.\n\nES2015 provides a default class constructor if one is not specified. As\nsuch, it is unnecessary to provide an empty constructor or one that\nsimply delegates into its parent class, as in the following examples:\n\n\n### Example\n\nExamples of **incorrect** code for this rule:\n```javascript\nclass A {\n    constructor () {\n    }\n}\n\nclass B extends A {\n    constructor (...args) {\n      super(...args);\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n```javascript\nclass A { }\n\nclass B {\n    constructor () {\n        doSomething();\n    }\n}\n\nclass C extends A {\n    constructor() {\n        super('foo');\n    }\n}\n\nclass D extends A {\n    constructor() {\n        super();\n        doSomething();\n    }\n}\n```\n"
        },
        "no-useless-escape": {
          "description": "### What it does\n\nDisallow unnecessary escape characters\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-useless-escape"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow unnecessary escape characters\n\n### Why is this bad?\n\n\n### Example\n```javascript\n```\n"
        },
        "no-useless-rename": {
          "description": "### What it does\n\nDisallow renaming import, export, and destructured assignments to the same name.\n\n### Why is this bad?\n\nIt is unnecessary to rename a variable to the same name.\n\n### Example\n```javascript\n// Bad\nimport { foo as foo } from 'foo';\nconst { bar: bar } = obj;\nexport { baz as baz };\n\n// Good\nimport { foo } from 'foo';\nconst { bar: renamed } = obj;\nexport { baz };\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-useless-rename"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow renaming import, export, and destructured assignments to the same name.\n\n### Why is this bad?\n\nIt is unnecessary to rename a variable to the same name.\n\n### Example\n```javascript\n// Bad\nimport { foo as foo } from 'foo';\nconst { bar: bar } = obj;\nexport { baz as baz };\n\n// Good\nimport { foo } from 'foo';\nconst { bar: renamed } = obj;\nexport { baz };\n```\n"
        },
        "no-var": {
          "description": "### What it does\nECMAScript 6 allows programmers to create variables with block scope instead of function scope using the `let` and `const` keywords.\nBlock scope is common in many other programming languages and helps programmers avoid mistakes\n\n### Why is this bad?\nUsing `var` in an es6 environment triggers this error\n\n### Example\n```javascript\n// error\nvar x = \"y\";\nvar CONFIG = {};\n\n// success\nlet x = \"y\";\nconst CONFIG = {};\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-var"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nECMAScript 6 allows programmers to create variables with block scope instead of function scope using the `let` and `const` keywords.\nBlock scope is common in many other programming languages and helps programmers avoid mistakes\n\n### Why is this bad?\nUsing `var` in an es6 environment triggers this error\n\n### Example\n```javascript\n// error\nvar x = \"y\";\nvar CONFIG = {};\n\n// success\nlet x = \"y\";\nconst CONFIG = {};\n```\n"
        },
        "no-void": {
          "description": "### What it does\n\nDisallow `void` operators.\n\n### Example\n\n```javascript\n// error\nvoid 0;\nvar foo = void 0;\n\n// success\n\"var foo = bar()\",\n\"foo.void()\",\n\"foo.void = bar\",\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-void"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow `void` operators.\n\n### Example\n\n```javascript\n// error\nvoid 0;\nvar foo = void 0;\n\n// success\n\"var foo = bar()\",\n\"foo.void()\",\n\"foo.void = bar\",\n```\n"
        },
        "no-with": {
          "description": "### What it does\nDisallow `with` statements\n\n### Why is this bad?\nThe with statement is potentially problematic because it adds members of an object to the current scope, making it impossible to tell what a variable inside the block actually refers to.\n\n### Example\n```javascript\nwith (point) {\n    r = Math.sqrt(x * x + y * y); // is r a member of point?\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-with"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow `with` statements\n\n### Why is this bad?\nThe with statement is potentially problematic because it adds members of an object to the current scope, making it impossible to tell what a variable inside the block actually refers to.\n\n### Example\n```javascript\nwith (point) {\n    r = Math.sqrt(x * x + y * y); // is r a member of point?\n}\n```\n"
        },
        "oxc/approx-constant": {
          "description": "### What it does\n\nDisallows the use of approximate constants, instead preferring the use of the constants in the `Math` object.\n\n### Why is this bad?\n\nApproximate constants are not as accurate as the constants in the `Math` object.\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/approx-constant"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallows the use of approximate constants, instead preferring the use of the constants in the `Math` object.\n\n### Why is this bad?\n\nApproximate constants are not as accurate as the constants in the `Math` object.\n\n### Example\n```javascript\n```\n"
        },
        "oxc/bad-array-method-on-arguments": {
          "description": "### What it does\nThis rule applies when an array method is called on the arguments object itself.\n\n### Why is this bad?\nThe arguments object is not an array, but an array-like object. It should be converted to a real array before calling an array method.\nOtherwise, a TypeError exception will be thrown because of the non-existent method.\n\n### Example\n```javascript\nfunction add(x, y) {\n  return x + y;\n}\nfunction sum() {\n  return arguments.reduce(add, 0);\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/bad-array-method-on-arguments"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nThis rule applies when an array method is called on the arguments object itself.\n\n### Why is this bad?\nThe arguments object is not an array, but an array-like object. It should be converted to a real array before calling an array method.\nOtherwise, a TypeError exception will be thrown because of the non-existent method.\n\n### Example\n```javascript\nfunction add(x, y) {\n  return x + y;\n}\nfunction sum() {\n  return arguments.reduce(add, 0);\n}\n```\n"
        },
        "oxc/bad-bitwise-operator": {
          "description": "### What it does\nThis rule applies when bitwise operators are used where logical operators are expected.\n\n### Why is this bad?\nBitwise operators have different results from logical operators and a `TypeError` exception may be thrown because short-circuit evaluation is not applied.\n(In short-circuit evaluation, right operand evaluation is skipped according to left operand value, e.g. `x` is `false` in `x && y`.)\n\nIt is obvious that logical operators are expected in the following code patterns:\n```javascript\ne && e.x\ne || {}\ne || ''\n```\n\n### Example\n```javascript\nif (obj & obj.prop) {\n console.log(obj.prop);\n}\noptions = options | {};\ninput |= '';\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/bad-bitwise-operator"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nThis rule applies when bitwise operators are used where logical operators are expected.\n\n### Why is this bad?\nBitwise operators have different results from logical operators and a `TypeError` exception may be thrown because short-circuit evaluation is not applied.\n(In short-circuit evaluation, right operand evaluation is skipped according to left operand value, e.g. `x` is `false` in `x && y`.)\n\nIt is obvious that logical operators are expected in the following code patterns:\n```javascript\ne && e.x\ne || {}\ne || ''\n```\n\n### Example\n```javascript\nif (obj & obj.prop) {\n console.log(obj.prop);\n}\noptions = options | {};\ninput |= '';\n```\n"
        },
        "oxc/bad-char-at-comparison": {
          "description": "### What it does\n\nThis rule warns when the return value of the `charAt` method is used to compare a string of length greater than 1.\n\n### Why is this bad?\n\nThe `charAt` method returns a string of length 1. If the return value is compared with a string of length greater than 1, the comparison will always be false.\n\n### Example\n```javascript\n// Bad: The return value of the `charAt` method is compared with a string of length greater than 1.\na.charAt(4) === 'a2';\na.charAt(4) === '/n';\n\n// Good: The return value of the `charAt` method is compared with a string of length 1.\na.charAt(4) === 'a'\na.charAt(4) === '\\n';\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/bad-char-at-comparison"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule warns when the return value of the `charAt` method is used to compare a string of length greater than 1.\n\n### Why is this bad?\n\nThe `charAt` method returns a string of length 1. If the return value is compared with a string of length greater than 1, the comparison will always be false.\n\n### Example\n```javascript\n// Bad: The return value of the `charAt` method is compared with a string of length greater than 1.\na.charAt(4) === 'a2';\na.charAt(4) === '/n';\n\n// Good: The return value of the `charAt` method is compared with a string of length 1.\na.charAt(4) === 'a'\na.charAt(4) === '\\n';\n```\n"
        },
        "oxc/bad-comparison-sequence": {
          "description": "### What it does\nThis rule applies when the comparison operator is applied two or more times in a row.\n\n### Why is this bad?\nBecause comparison operator is a binary operator, it is impossible to compare three or more operands at once.\nIf comparison operator is used to compare three or more operands, only the first two operands are compared and the rest is compared with its result of boolean type.\n\n### Example\n```javascript\nif (a == b == c) {\n console.log(\"a, b, and c are the same\");\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/bad-comparison-sequence"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nThis rule applies when the comparison operator is applied two or more times in a row.\n\n### Why is this bad?\nBecause comparison operator is a binary operator, it is impossible to compare three or more operands at once.\nIf comparison operator is used to compare three or more operands, only the first two operands are compared and the rest is compared with its result of boolean type.\n\n### Example\n```javascript\nif (a == b == c) {\n console.log(\"a, b, and c are the same\");\n}\n```\n"
        },
        "oxc/bad-min-max-func": {
          "description": "### What it does\n\nChecks whether the clamp function `Math.min(Math.max(x, y), z)` always evaluate to a\nconstant result because the arguments are in the wrong order.\n\n### Example\n```javascript\nMath.min(Math.max(100, x), 0);\nMath.max(1000, Math.min(0, z));\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/bad-min-max-func"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nChecks whether the clamp function `Math.min(Math.max(x, y), z)` always evaluate to a\nconstant result because the arguments are in the wrong order.\n\n### Example\n```javascript\nMath.min(Math.max(100, x), 0);\nMath.max(1000, Math.min(0, z));\n```\n"
        },
        "oxc/bad-object-literal-comparison": {
          "description": "### What it does\n\nChecks for comparisons between object and array literals.\n\n### Why is this bad?\n\nComparing a variable to an object or array literal will always return false as object and array literals are never equal to each other.\n\nIf you want to check if an object or array is empty, use `Object.entries()` or `Object.keys()` and their lengths.\n\n### Example\n```javascript\n// Bad\nif (x === {}) { }\nif (arr !== []) { }\n\n\n// Good\nif (typeof x === 'object' && Object.keys(x).length === 0) { }\nif (Array.isArray(x) && x.length === 0) { }\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/bad-object-literal-comparison"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nChecks for comparisons between object and array literals.\n\n### Why is this bad?\n\nComparing a variable to an object or array literal will always return false as object and array literals are never equal to each other.\n\nIf you want to check if an object or array is empty, use `Object.entries()` or `Object.keys()` and their lengths.\n\n### Example\n```javascript\n// Bad\nif (x === {}) { }\nif (arr !== []) { }\n\n\n// Good\nif (typeof x === 'object' && Object.keys(x).length === 0) { }\nif (Array.isArray(x) && x.length === 0) { }\n```\n"
        },
        "oxc/bad-replace-all-arg": {
          "description": "### What it does\n\nThis rule warns when the `replaceAll` method is called with a regular expression that does not have the global flag (g).\n\n### Why is this bad?\n\nThe `replaceAll` method replaces all occurrences of a string with another string. If the global flag (g) is not used in the regular expression, only the first occurrence of the string will be replaced.\n\n### Example\n```javascript\n// Bad: The global flag (g) is missing in the regular expression.\nwithSpaces.replaceAll(/\\s+/, ',');\n\n// Good: The global flag (g) is used in the regular expression.\nwithSpaces.replaceAll(/\\s+/g, ',');\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/bad-replace-all-arg"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule warns when the `replaceAll` method is called with a regular expression that does not have the global flag (g).\n\n### Why is this bad?\n\nThe `replaceAll` method replaces all occurrences of a string with another string. If the global flag (g) is not used in the regular expression, only the first occurrence of the string will be replaced.\n\n### Example\n```javascript\n// Bad: The global flag (g) is missing in the regular expression.\nwithSpaces.replaceAll(/\\s+/, ',');\n\n// Good: The global flag (g) is used in the regular expression.\nwithSpaces.replaceAll(/\\s+/g, ',');\n```\n"
        },
        "oxc/const-comparisons": {
          "description": "### What it does\n\nChecks for redundant comparisons between constants:\n - Checks for ineffective double comparisons against constants.\n - Checks for impossible comparisons against constants.\n\n### Why is this bad?\n\nOnly one of the comparisons has any effect on the result, the programmer probably intended to flip one of the comparison operators, or compare a different value entirely.\n\n### Example\n```javascript\n// Bad\nstatus_code <= 400 && status_code > 500;\nstatus_code < 200 && status_code <= 299;\nstatus_code > 500 && status_code >= 500;\n\n// Good\nstatus_code >= 400 && status_code < 500;\n500 <= status_code && 600 > status_code;\n500 <= status_code && status_code <= 600;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/const-comparisons"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nChecks for redundant comparisons between constants:\n - Checks for ineffective double comparisons against constants.\n - Checks for impossible comparisons against constants.\n\n### Why is this bad?\n\nOnly one of the comparisons has any effect on the result, the programmer probably intended to flip one of the comparison operators, or compare a different value entirely.\n\n### Example\n```javascript\n// Bad\nstatus_code <= 400 && status_code > 500;\nstatus_code < 200 && status_code <= 299;\nstatus_code > 500 && status_code >= 500;\n\n// Good\nstatus_code >= 400 && status_code < 500;\n500 <= status_code && 600 > status_code;\n500 <= status_code && status_code <= 600;\n```\n"
        },
        "oxc/double-comparisons": {
          "description": "### What it does\n\nThis rule checks for double comparisons in logical expressions.\n\n### Why is this bad?\n\nRedundant comparisons can be confusing and make code harder to understand.\n\n### Example\n```javascript\n// Bad\nx === y || x < y;\nx < y || x === y;\n\n// Good\nx <= y;\nx >= y;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/double-comparisons"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule checks for double comparisons in logical expressions.\n\n### Why is this bad?\n\nRedundant comparisons can be confusing and make code harder to understand.\n\n### Example\n```javascript\n// Bad\nx === y || x < y;\nx < y || x === y;\n\n// Good\nx <= y;\nx >= y;\n```\n"
        },
        "oxc/erasing-op": {
          "description": "### What it does\n\nChecks for erasing operations, e.g., `x * 0``.\n\nBased on https://rust-lang.github.io/rust-clippy/master/#/erasing_op\n\n### Why is this bad?\n\nThe whole expression can be replaced by zero. This is most likely not the intended outcome and should probably be corrected.\n\n### Example\n```javascript\n// Bad\nlet x = 1;\nlet y = x * 0;\n\n// Good\nlet x = 1;\nlet y = 0;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/erasing-op"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nChecks for erasing operations, e.g., `x * 0``.\n\nBased on https://rust-lang.github.io/rust-clippy/master/#/erasing_op\n\n### Why is this bad?\n\nThe whole expression can be replaced by zero. This is most likely not the intended outcome and should probably be corrected.\n\n### Example\n```javascript\n// Bad\nlet x = 1;\nlet y = x * 0;\n\n// Good\nlet x = 1;\nlet y = 0;\n```\n"
        },
        "oxc/misrefactored-assign-op": {
          "description": "### What it does\n\nhttps://rust-lang.github.io/rust-clippy/master/#/misrefactored_assign_op\n\nChecks for `a op= a op b` or `a op= b op a` patterns.\n\n### Why is this bad?\n\nMost likely these are bugs where one meant to write `a op= b`.\n\n### Example\n```javascript\n// Bad\na += a + b;\na -= a - b;\n\n// Good\na += b;\na -= b;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/misrefactored-assign-op"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nhttps://rust-lang.github.io/rust-clippy/master/#/misrefactored_assign_op\n\nChecks for `a op= a op b` or `a op= b op a` patterns.\n\n### Why is this bad?\n\nMost likely these are bugs where one meant to write `a op= b`.\n\n### Example\n```javascript\n// Bad\na += a + b;\na -= a - b;\n\n// Good\na += b;\na -= b;\n```\n"
        },
        "oxc/missing-throw": {
          "description": "### What it does\n\nChecks whether the `throw` keyword is missing in front of a `new` expression.\n\n### Example\n```javascript\nfunction foo() { throw Error() }\nconst foo = () => { new Error() }\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/missing-throw"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nChecks whether the `throw` keyword is missing in front of a `new` expression.\n\n### Example\n```javascript\nfunction foo() { throw Error() }\nconst foo = () => { new Error() }\n```\n"
        },
        "oxc/no-accumulating-spread": {
          "description": "### What it does\nPrevents using object or array spreads on accumulators in `Array.prototype.reduce()`.\n\n### Why is this bad?\nObject and array spreads create a new object or array on each iteration.\nIn the worst case, they also cause O(n) copies (both memory and time complexity).\nWhen used on an accumulator, this can lead to `O(n^2)` memory complexity and\n`O(n^2)` time complexity.\n\nFor a more in-depth explanation, see this [blog post](https://prateeksurana.me/blog/why-using-object-spread-with-reduce-bad-idea/)\nby Prateek Surana.\n\n\n### Example\nPass\n```javascript\nfunction fn (x) {\n  // ...\n}\n\narr.reduce((acc, x) => acc.push(fn(x)), [])\nObject.keys(obj).reduce((acc, el) => {\n  acc[el] = fn(el)\n}, {})\n// spreading non-accumulators should be avoided if possible, but is not\n// banned by this rule\nObject.keys(obj).reduce((acc, el) => {\n  acc[el] = { ...obj[el] }\n  return acc\n}, {})\n```\n\nFail\n```javascript\narr.reduce((acc, x) => ({ ...acc, [x]: fn(x) }), {})\nObject.keys(obj).reduce((acc, el) => ({ ...acc, [el]: fn(el) }), {})\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-accumulating-spread"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nPrevents using object or array spreads on accumulators in `Array.prototype.reduce()`.\n\n### Why is this bad?\nObject and array spreads create a new object or array on each iteration.\nIn the worst case, they also cause O(n) copies (both memory and time complexity).\nWhen used on an accumulator, this can lead to `O(n^2)` memory complexity and\n`O(n^2)` time complexity.\n\nFor a more in-depth explanation, see this [blog post](https://prateeksurana.me/blog/why-using-object-spread-with-reduce-bad-idea/)\nby Prateek Surana.\n\n\n### Example\nPass\n```javascript\nfunction fn (x) {\n  // ...\n}\n\narr.reduce((acc, x) => acc.push(fn(x)), [])\nObject.keys(obj).reduce((acc, el) => {\n  acc[el] = fn(el)\n}, {})\n// spreading non-accumulators should be avoided if possible, but is not\n// banned by this rule\nObject.keys(obj).reduce((acc, el) => {\n  acc[el] = { ...obj[el] }\n  return acc\n}, {})\n```\n\nFail\n```javascript\narr.reduce((acc, x) => ({ ...acc, [x]: fn(x) }), {})\nObject.keys(obj).reduce((acc, el) => ({ ...acc, [el]: fn(el) }), {})\n```\n"
        },
        "oxc/no-async-await": {
          "description": "### What it does\n\nDisallows the use of async/await.\n\n### Example\n```javascript\nasync function foo() {\n   await bar();\n   return baz();\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-async-await"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallows the use of async/await.\n\n### Example\n```javascript\nasync function foo() {\n   await bar();\n   return baz();\n}\n```\n"
        },
        "oxc/no-barrel-file": {
          "description": "### What it does\n\nDisallow the use of barrel files where the file contains `export *` statements,\nand the total number of modules exceed a threshold.\n\nThe default threshold is 100;\n\nReferences:\n\n* <https://github.com/thepassle/eslint-plugin-barrel-files>\n* <https://marvinh.dev/blog/speeding-up-javascript-ecosystem-part-7>\n\n### Example\n\nInvalid:\n\n```javascript\nexport * from 'foo'; // where `foo` loads a subtree of 100 modules\nimport * as ns from 'foo'; // where `foo` loads a subtree of 100 modules\n```\n\nValid:\n\n```javascript\nexport { foo } from 'foo';\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-barrel-file"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow the use of barrel files where the file contains `export *` statements,\nand the total number of modules exceed a threshold.\n\nThe default threshold is 100;\n\nReferences:\n\n* <https://github.com/thepassle/eslint-plugin-barrel-files>\n* <https://marvinh.dev/blog/speeding-up-javascript-ecosystem-part-7>\n\n### Example\n\nInvalid:\n\n```javascript\nexport * from 'foo'; // where `foo` loads a subtree of 100 modules\nimport * as ns from 'foo'; // where `foo` loads a subtree of 100 modules\n```\n\nValid:\n\n```javascript\nexport { foo } from 'foo';\n```\n"
        },
        "oxc/no-const-enum": {
          "description": "### What it does\n\nDisallow TypeScript `const enum`\n\n### Why is this bad?\n\nConst enums are enums that should be inlined at use sites.\nConst enums are not supported by bundlers and are incompatible with the isolatedModules mode.\nTheir use can lead to import nonexistent values (because const enums are erased).\n\n### Example\n```javascript\nconst enum Color {\n   Red,\n   Green,\n   Blue\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-const-enum"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow TypeScript `const enum`\n\n### Why is this bad?\n\nConst enums are enums that should be inlined at use sites.\nConst enums are not supported by bundlers and are incompatible with the isolatedModules mode.\nTheir use can lead to import nonexistent values (because const enums are erased).\n\n### Example\n```javascript\nconst enum Color {\n   Red,\n   Green,\n   Blue\n}\n```\n"
        },
        "oxc/no-optional-chaining": {
          "description": "### What it does\n\nDisallow [optional chaining](https://github.com/tc39/proposal-optional-chaining).\n\n### Example\n\n```javascript\nconst foo = obj?.foo;\nobj.fn?.();\n```\n\n### Options\n\n```json\n{\n  \"rules\": {\n    \"no-optional-chaining\": [\n        \"error\",\n        {\n            \"message\": \"Our output target is ES2016, and optional chaining results in verbose\n            helpers and should be avoided.\",\n        }\n    ]\n  }\n}\n```\n\n- `message`: A custom help message to display when optional chaining is found.\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-optional-chaining"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow [optional chaining](https://github.com/tc39/proposal-optional-chaining).\n\n### Example\n\n```javascript\nconst foo = obj?.foo;\nobj.fn?.();\n```\n\n### Options\n\n```json\n{\n  \"rules\": {\n    \"no-optional-chaining\": [\n        \"error\",\n        {\n            \"message\": \"Our output target is ES2016, and optional chaining results in verbose\n            helpers and should be avoided.\",\n        }\n    ]\n  }\n}\n```\n\n- `message`: A custom help message to display when optional chaining is found.\n\n"
        },
        "oxc/no-rest-spread-properties": {
          "description": "### What it does\n\nDisallow [Object Rest/Spread Properties](https://github.com/tc39/proposal-object-rest-spread#readme).\n\n### Example\n\n```javascript\nlet { x, ...y } = z;\nlet z = { x, ...y };\n```\n\n### Options\n\n```json\n{\n  \"rules\": {\n    \"no-rest-spread-properties\": [\n        \"error\",\n        {\n            \"objectSpreadMessage\": \"Object spread properties are not allowed.\",\n            \"objectRestMessage\": \"Object rest properties are not allowed.\"\n        }\n    ]\n  }\n}\n```\n\n- `objectSpreadMessage`: A message to display when object spread properties are found.\n- `objectRestMessage`: A message to display when object rest properties are found.\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-rest-spread-properties"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow [Object Rest/Spread Properties](https://github.com/tc39/proposal-object-rest-spread#readme).\n\n### Example\n\n```javascript\nlet { x, ...y } = z;\nlet z = { x, ...y };\n```\n\n### Options\n\n```json\n{\n  \"rules\": {\n    \"no-rest-spread-properties\": [\n        \"error\",\n        {\n            \"objectSpreadMessage\": \"Object spread properties are not allowed.\",\n            \"objectRestMessage\": \"Object rest properties are not allowed.\"\n        }\n    ]\n  }\n}\n```\n\n- `objectSpreadMessage`: A message to display when object spread properties are found.\n- `objectRestMessage`: A message to display when object rest properties are found.\n\n"
        },
        "oxc/number-arg-out-of-range": {
          "description": "### What it does\n\nChecks whether the radix or precision arguments of number-related functions exceeds the limit.\n\n### Example\n```javascript\nvar x = 42;\nvar s_radix_64 = x.toString(64);\nvar s = x.toString(1);\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/number-arg-out-of-range"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nChecks whether the radix or precision arguments of number-related functions exceeds the limit.\n\n### Example\n```javascript\nvar x = 42;\nvar s_radix_64 = x.toString(64);\nvar s = x.toString(1);\n```\n"
        },
        "oxc/only-used-in-recursion": {
          "description": "### What it does\n\nChecks for arguments that are only used in recursion with no side-effects.\n\nInspired by https://rust-lang.github.io/rust-clippy/master/#/only_used_in_recursion\n\n### Why is this bad?\n\nSupplying an argument that is only used in recursive calls is likely a mistake.\n\nIt increase cognitive complexity and may impact performance.\n\n### Example\n```javascript\n// Bad - the argument `b` is only used in recursive calls\nfunction f(a: number, b: number): number {\n    if a == 0 {\n        return 1\n    } else {\n        return f(a - 1, b + 1)\n    }\n}\n\n// Good - the argument `b` is omitted\nfunction f(a: number): number {\n   if a == 0 {\n       return 1\n   } else {\n       return f(a - 1)\n   }\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/only-used-in-recursion"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nChecks for arguments that are only used in recursion with no side-effects.\n\nInspired by https://rust-lang.github.io/rust-clippy/master/#/only_used_in_recursion\n\n### Why is this bad?\n\nSupplying an argument that is only used in recursive calls is likely a mistake.\n\nIt increase cognitive complexity and may impact performance.\n\n### Example\n```javascript\n// Bad - the argument `b` is only used in recursive calls\nfunction f(a: number, b: number): number {\n    if a == 0 {\n        return 1\n    } else {\n        return f(a - 1, b + 1)\n    }\n}\n\n// Good - the argument `b` is omitted\nfunction f(a: number): number {\n   if a == 0 {\n       return 1\n   } else {\n       return f(a - 1)\n   }\n}\n```\n"
        },
        "oxc/uninvoked-array-callback": {
          "description": "### What it does\nThis rule applies when an Array function has a callback argument used for an array with empty slots.\n\n### Why is this bad?\nWhen the Array constructor is called with a single number argument, an array with the specified number of empty slots (not actual undefined values) is constructed.\nIf a callback function is passed to the function of this array, the callback function is never invoked because the array has no actual elements.\n\n### Example\n```javascript\n  const list = new Array(5).map(_ => createElement());\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/uninvoked-array-callback"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nThis rule applies when an Array function has a callback argument used for an array with empty slots.\n\n### Why is this bad?\nWhen the Array constructor is called with a single number argument, an array with the specified number of empty slots (not actual undefined values) is constructed.\nIf a callback function is passed to the function of this array, the callback function is never invoked because the array has no actual elements.\n\n### Example\n```javascript\n  const list = new Array(5).map(_ => createElement());\n```\n"
        },
        "prefer-exponentiation-operator": {
          "description": "### What it does\n\nDisallow the use of Math.pow in favor of the ** operator\n\n### Why is this bad?\n\nIntroduced in ES2016, the infix exponentiation operator ** is an alternative for the\nstandard Math.pow function. Infix notation is considered to be more readable and thus more\npreferable than the function notation.\n\n### Example\n```javascript\nMath.pow(a, b)\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-exponentiation-operator"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow the use of Math.pow in favor of the ** operator\n\n### Why is this bad?\n\nIntroduced in ES2016, the infix exponentiation operator ** is an alternative for the\nstandard Math.pow function. Infix notation is considered to be more readable and thus more\npreferable than the function notation.\n\n### Example\n```javascript\nMath.pow(a, b)\n```\n"
        },
        "radix": {
          "description": "### What it does\nEnforce the consistent use of the radix argument when using `parseInt()`.\n\n### Why is this bad?\nUsing the `parseInt()` function without specifying the radix can lead to unexpected results.\n\n### Example\n```javascript\n// error\nvar num = parseInt(\"071\");      // 57\n\n// success\nvar num = parseInt(\"071\", 10);  // 71\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/radix"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nEnforce the consistent use of the radix argument when using `parseInt()`.\n\n### Why is this bad?\nUsing the `parseInt()` function without specifying the radix can lead to unexpected results.\n\n### Example\n```javascript\n// error\nvar num = parseInt(\"071\");      // 57\n\n// success\nvar num = parseInt(\"071\", 10);  // 71\n```\n"
        },
        "react/button-has-type": {
          "description": "### What it does\n\nEnforces explicit `type` attribute for all the `button` HTML elements.\n\n### Why is this bad?\n\nThe default value of `type` attribute for `button` HTML element is `\"submit\"` which is often not the desired behavior and may lead to unexpected page reloads.\n\n### Example\n```javascript\n// Bad\n<button />\n<button type=\"foo\" />\n\n// Good\n<button type=\"button\" />\n<button type=\"submit\" />\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/button-has-type"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforces explicit `type` attribute for all the `button` HTML elements.\n\n### Why is this bad?\n\nThe default value of `type` attribute for `button` HTML element is `\"submit\"` which is often not the desired behavior and may lead to unexpected page reloads.\n\n### Example\n```javascript\n// Bad\n<button />\n<button type=\"foo\" />\n\n// Good\n<button type=\"button\" />\n<button type=\"submit\" />\n```\n"
        },
        "react/checked-requires-onchange-or-readonly": {
          "description": "### What it does\nThis rule enforces onChange or readonly attribute for checked property of input elements.\nIt also warns when checked and defaultChecked properties are used together.\n\n### Example\n```javascript\n// Bad\n<input type=\"checkbox\" checked />\n<input type=\"checkbox\" checked defaultChecked />\n<input type=\"radio\" checked defaultChecked />\n\nReact.createElement('input', { checked: false });\nReact.createElement('input', { type: 'checkbox', checked: true });\nReact.createElement('input', { type: 'checkbox', checked: true, defaultChecked: true });\n\n// Good\n<input type=\"checkbox\" checked onChange={() => {}} />\n<input type=\"checkbox\" checked readOnly />\n<input type=\"checkbox\" checked onChange readOnly />\n<input type=\"checkbox\" defaultChecked />\n\nReact.createElement('input', { type: 'checkbox', checked: true, onChange() {} });\nReact.createElement('input', { type: 'checkbox', checked: true, readOnly: true });\nReact.createElement('input', { type: 'checkbox', checked: true, onChange() {}, readOnly: true });\nReact.createElement('input', { type: 'checkbox', defaultChecked: true });\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/checked-requires-onchange-or-readonly"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nThis rule enforces onChange or readonly attribute for checked property of input elements.\nIt also warns when checked and defaultChecked properties are used together.\n\n### Example\n```javascript\n// Bad\n<input type=\"checkbox\" checked />\n<input type=\"checkbox\" checked defaultChecked />\n<input type=\"radio\" checked defaultChecked />\n\nReact.createElement('input', { checked: false });\nReact.createElement('input', { type: 'checkbox', checked: true });\nReact.createElement('input', { type: 'checkbox', checked: true, defaultChecked: true });\n\n// Good\n<input type=\"checkbox\" checked onChange={() => {}} />\n<input type=\"checkbox\" checked readOnly />\n<input type=\"checkbox\" checked onChange readOnly />\n<input type=\"checkbox\" defaultChecked />\n\nReact.createElement('input', { type: 'checkbox', checked: true, onChange() {} });\nReact.createElement('input', { type: 'checkbox', checked: true, readOnly: true });\nReact.createElement('input', { type: 'checkbox', checked: true, onChange() {}, readOnly: true });\nReact.createElement('input', { type: 'checkbox', defaultChecked: true });\n```\n"
        },
        "react/jsx-key": {
          "description": "### What it does\n\nEnforce `key` prop for elements in array\n\n### Example\n```javascript\n// Bad\n[1, 2, 3].map(x => <App />);\n[1, 2, 3]?.map(x => <BabelEslintApp />)\n\n// Good\n[1, 2, 3].map(x => <App key={x} />);\n[1, 2, 3]?.map(x => <BabelEslintApp key={x} />)\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/jsx-key"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforce `key` prop for elements in array\n\n### Example\n```javascript\n// Bad\n[1, 2, 3].map(x => <App />);\n[1, 2, 3]?.map(x => <BabelEslintApp />)\n\n// Good\n[1, 2, 3].map(x => <App key={x} />);\n[1, 2, 3]?.map(x => <BabelEslintApp key={x} />)\n```\n"
        },
        "react/jsx-no-comment-textnodes": {
          "description": "### What it does\n\nThis rule prevents comment strings (e.g. beginning with `//` or `/*`) from being accidentally injected as a text node in JSX statements.\n\n### Why is this bad?\n\nIn JSX, any text node that is not wrapped in curly braces is considered a literal string to be rendered. This can lead to unexpected behavior when the text contains a comment.\n\n### Example\n```javascript\n// Incorrect:\n\nconst Hello = () => {\n    return <div>// empty div</div>;\n}\n\nconst Hello = () => {\n    return <div>/* empty div */</div>;\n}\n\n// Correct:\n\nconst Hello = () => {\n    return <div>// empty div</div>;\n}\n\nconst Hello = () => {\n    return <div>{/* empty div */}</div>;\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/jsx-no-comment-textnodes"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule prevents comment strings (e.g. beginning with `//` or `/*`) from being accidentally injected as a text node in JSX statements.\n\n### Why is this bad?\n\nIn JSX, any text node that is not wrapped in curly braces is considered a literal string to be rendered. This can lead to unexpected behavior when the text contains a comment.\n\n### Example\n```javascript\n// Incorrect:\n\nconst Hello = () => {\n    return <div>// empty div</div>;\n}\n\nconst Hello = () => {\n    return <div>/* empty div */</div>;\n}\n\n// Correct:\n\nconst Hello = () => {\n    return <div>// empty div</div>;\n}\n\nconst Hello = () => {\n    return <div>{/* empty div */}</div>;\n}\n```\n"
        },
        "react/jsx-no-duplicate-props": {
          "description": "### What it does\n\nThis rule prevents duplicate props in JSX elements.\n\n### Why is this bad?\n\nHaving duplicate props in a JSX element is most likely a mistake.\nCreating JSX elements with duplicate props can cause unexpected behavior in your application.\n\n### Example\n```javascript\n// Bad\n<App a a />;\n<App foo={2} bar baz foo={3} />;\n\n// Good\n<App a />;\n<App bar baz foo={3} />;\n\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/jsx-no-duplicate-props"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule prevents duplicate props in JSX elements.\n\n### Why is this bad?\n\nHaving duplicate props in a JSX element is most likely a mistake.\nCreating JSX elements with duplicate props can cause unexpected behavior in your application.\n\n### Example\n```javascript\n// Bad\n<App a a />;\n<App foo={2} bar baz foo={3} />;\n\n// Good\n<App a />;\n<App bar baz foo={3} />;\n\n```\n"
        },
        "react/jsx-no-target-blank": {
          "description": "### What it does\nThis rule aims to prevent user generated link hrefs and form actions from creating security vulnerabilities by\nrequiring rel='noreferrer' for external link hrefs and form actions, and optionally any dynamically generated link\nhrefs and form actions.\n\n### Why is this bad?\n\nWhen creating a JSX element that has an a tag, it is often desired to have the link open in a new tab using the\ntarget='_blank' attribute. Using this attribute unaccompanied by rel='noreferrer', however, is a severe security\nvulnerability (see noreferrer docs and noopener docs for more details) This rules requires that you accompany\ntarget='_blank' attributes with rel='noreferrer'.\n\n### Example\n```javascript\n/// correct\nvar Hello = <p target=\"_blank\"></p>\nvar Hello = <a target=\"_blank\" rel=\"noreferrer\" href=\"https://example.com\"></a>\nvar Hello = <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://example.com\"></a>\nvar Hello = <a target=\"_blank\" href=\"relative/path/in/the/host\"></a>\nvar Hello = <a target=\"_blank\" href=\"/absolute/path/in/the/host\"></a>\nvar Hello = <a></a>\n/// incorrect\nvar Hello = <a target='_blank' href=\"https://example.com/\"></a>\nvar Hello = <a target='_blank' href={dynamicLink}></a>\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/jsx-no-target-blank"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nThis rule aims to prevent user generated link hrefs and form actions from creating security vulnerabilities by\nrequiring rel='noreferrer' for external link hrefs and form actions, and optionally any dynamically generated link\nhrefs and form actions.\n\n### Why is this bad?\n\nWhen creating a JSX element that has an a tag, it is often desired to have the link open in a new tab using the\ntarget='_blank' attribute. Using this attribute unaccompanied by rel='noreferrer', however, is a severe security\nvulnerability (see noreferrer docs and noopener docs for more details) This rules requires that you accompany\ntarget='_blank' attributes with rel='noreferrer'.\n\n### Example\n```javascript\n/// correct\nvar Hello = <p target=\"_blank\"></p>\nvar Hello = <a target=\"_blank\" rel=\"noreferrer\" href=\"https://example.com\"></a>\nvar Hello = <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://example.com\"></a>\nvar Hello = <a target=\"_blank\" href=\"relative/path/in/the/host\"></a>\nvar Hello = <a target=\"_blank\" href=\"/absolute/path/in/the/host\"></a>\nvar Hello = <a></a>\n/// incorrect\nvar Hello = <a target='_blank' href=\"https://example.com/\"></a>\nvar Hello = <a target='_blank' href={dynamicLink}></a>\n```\n"
        },
        "react/jsx-no-undef": {
          "description": "### What it does\nDisallow undeclared variables in JSX\n\n### Why is this bad?\nIt is most likely a potential ReferenceError caused by a misspelling of a variable or parameter name.\n\n### Example\n```jsx\nconst A = () => <App />\nconst C = <B />\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/jsx-no-undef"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow undeclared variables in JSX\n\n### Why is this bad?\nIt is most likely a potential ReferenceError caused by a misspelling of a variable or parameter name.\n\n### Example\n```jsx\nconst A = () => <App />\nconst C = <B />\n```\n"
        },
        "react/jsx-no-useless-fragment": {
          "description": "### What it does\n\nDisallow unnecessary fragments.\n\n### Why is this bad?\n\nFragments are a useful tool when you need to group multiple children without adding a node to the DOM tree. However, sometimes you might end up with a fragment with a single child. When this child is an element, string, or expression, it's not necessary to use a fragment.\n\n### Example\n```javascript\n// Bad\n<>foo</>\n<div><>foo</></div>\n\n// Good\n<>foo <div></div></>\n<div>foo</div>\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/jsx-no-useless-fragment"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow unnecessary fragments.\n\n### Why is this bad?\n\nFragments are a useful tool when you need to group multiple children without adding a node to the DOM tree. However, sometimes you might end up with a fragment with a single child. When this child is an element, string, or expression, it's not necessary to use a fragment.\n\n### Example\n```javascript\n// Bad\n<>foo</>\n<div><>foo</></div>\n\n// Good\n<>foo <div></div></>\n<div>foo</div>\n```\n"
        },
        "react/no-children-prop": {
          "description": "### What it does\n\nChildren should always be actual children, not passed in as a prop.\n\nWhen using JSX, the children should be nested between the opening and closing tags.\n\nWhen not using JSX, the children should be passed as additional arguments to `React.createElement`.\n\n### Example\n```javascript\n// Bad\n<div children='Children' />\n\n<MyComponent children={<AnotherComponent />} />\n<MyComponent children={['Child 1', 'Child 2']} />\nReact.createElement(\"div\", { children: 'Children' })\n\n// Good\n\n<div>Children</div>\n<MyComponent>Children</MyComponent>\n\n<MyComponent>\n  <span>Child 1</span>\n  <span>Child 2</span>\n</MyComponent>\n\nReact.createElement(\"div\", {}, 'Children')\nReact.createElement(\"div\", 'Child 1', 'Child 2')\n\n\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-children-prop"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nChildren should always be actual children, not passed in as a prop.\n\nWhen using JSX, the children should be nested between the opening and closing tags.\n\nWhen not using JSX, the children should be passed as additional arguments to `React.createElement`.\n\n### Example\n```javascript\n// Bad\n<div children='Children' />\n\n<MyComponent children={<AnotherComponent />} />\n<MyComponent children={['Child 1', 'Child 2']} />\nReact.createElement(\"div\", { children: 'Children' })\n\n// Good\n\n<div>Children</div>\n<MyComponent>Children</MyComponent>\n\n<MyComponent>\n  <span>Child 1</span>\n  <span>Child 2</span>\n</MyComponent>\n\nReact.createElement(\"div\", {}, 'Children')\nReact.createElement(\"div\", 'Child 1', 'Child 2')\n\n\n```\n"
        },
        "react/no-danger": {
          "description": "### What it does\n\nThis rule prevents the use of `dangerouslySetInnerHTML` prop.\n\n### Why is this bad?\n\n`dangerouslySetInnerHTML` is a way to inject HTML into your React component. This is dangerous because it can easily lead to XSS vulnerabilities.\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-danger"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule prevents the use of `dangerouslySetInnerHTML` prop.\n\n### Why is this bad?\n\n`dangerouslySetInnerHTML` is a way to inject HTML into your React component. This is dangerous because it can easily lead to XSS vulnerabilities.\n\n### Example\n```javascript\n```\n"
        },
        "react/no-direct-mutation-state": {
          "description": "### What it does\nThe restriction coder cannot directly change the value of this.state\n\n### Why is this bad?\ncalling setState() afterwards may replace the mutation you made\n\n### Example\n```javascript\n // error\n var Hello = createReactClass({\n   componentDidMount: function() {\n     this.state.name = this.props.name.toUpperCase();\n   },\n   render: function() {\n     return <div>Hello {this.state.name}</div>;\n   }\n });\n\n class Hello extends React.Component {\n   constructor(props) {\n     super(props)\n\n     doSomethingAsync(() => {\n       this.state = 'bad';\n     });\n   }\n }\n\n // success\n var Hello = createReactClass({\n   componentDidMount: function() {\n     this.setState({\n       name: this.props.name.toUpperCase();\n     });\n   },\n   render: function() {\n     return <div>Hello {this.state.name}</div>;\n   }\n });\n\n class Hello extends React.Component {\n   constructor(props) {\n     super(props)\n\n     this.state = {\n       foo: 'bar',\n     }\n   }\n }\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-direct-mutation-state"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nThe restriction coder cannot directly change the value of this.state\n\n### Why is this bad?\ncalling setState() afterwards may replace the mutation you made\n\n### Example\n```javascript\n // error\n var Hello = createReactClass({\n   componentDidMount: function() {\n     this.state.name = this.props.name.toUpperCase();\n   },\n   render: function() {\n     return <div>Hello {this.state.name}</div>;\n   }\n });\n\n class Hello extends React.Component {\n   constructor(props) {\n     super(props)\n\n     doSomethingAsync(() => {\n       this.state = 'bad';\n     });\n   }\n }\n\n // success\n var Hello = createReactClass({\n   componentDidMount: function() {\n     this.setState({\n       name: this.props.name.toUpperCase();\n     });\n   },\n   render: function() {\n     return <div>Hello {this.state.name}</div>;\n   }\n });\n\n class Hello extends React.Component {\n   constructor(props) {\n     super(props)\n\n     this.state = {\n       foo: 'bar',\n     }\n   }\n }\n```\n"
        },
        "react/no-find-dom-node": {
          "description": "### What it does\nThis rule disallows the use of `findDOMNode`.\n\n### Why is this bad?\n`findDOMNode` is an escape hatch used to access the underlying DOM node.\nIn most cases, use of this escape hatch is discouraged because it pierces the component abstraction.\n[It has been deprecated in `StrictMode`.](https://legacy.reactjs.org/docs/strict-mode.html#warning-about-deprecated-finddomnode-usage)\n\n### Example\n```javascript\nclass MyComponent extends Component {\n  componentDidMount() {\n    findDOMNode(this).scrollIntoView();\n  }\n  render() {\n    return <div />;\n  }\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-find-dom-node"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nThis rule disallows the use of `findDOMNode`.\n\n### Why is this bad?\n`findDOMNode` is an escape hatch used to access the underlying DOM node.\nIn most cases, use of this escape hatch is discouraged because it pierces the component abstraction.\n[It has been deprecated in `StrictMode`.](https://legacy.reactjs.org/docs/strict-mode.html#warning-about-deprecated-finddomnode-usage)\n\n### Example\n```javascript\nclass MyComponent extends Component {\n  componentDidMount() {\n    findDOMNode(this).scrollIntoView();\n  }\n  render() {\n    return <div />;\n  }\n}\n```\n"
        },
        "react/no-is-mounted": {
          "description": "### What it does\n\nThis rule prevents using isMounted in ES6 classes\n\n### Why is this bad?\n\nisMounted is an anti-pattern, is not available when using ES6 classes,\nand it is on its way to being officially deprecated.///\n\n### Example\n```javascript\nclass Hello extends React.Component {\n    someMethod() {\n        if (!this.isMounted()) {\n            return;\n        }\n    }\n    render() {\n        return <div onClick={this.someMethod.bind(this)}>Hello</div>;\n    }\n};\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-is-mounted"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule prevents using isMounted in ES6 classes\n\n### Why is this bad?\n\nisMounted is an anti-pattern, is not available when using ES6 classes,\nand it is on its way to being officially deprecated.///\n\n### Example\n```javascript\nclass Hello extends React.Component {\n    someMethod() {\n        if (!this.isMounted()) {\n            return;\n        }\n    }\n    render() {\n        return <div onClick={this.someMethod.bind(this)}>Hello</div>;\n    }\n};\n```\n"
        },
        "react/no-render-return-value": {
          "description": "### What it does\n\nThis rule will warn you if you try to use the ReactDOM.render() return value.\n\n### Example\n```javascript\n// Bad\nvaa inst =ReactDOM.render(<App />, document.body);\nfunction render() {\n return ReactDOM.render(<App />, document.body);\n}\n\n// Good\nReactDOM.render(<App />, document.body);\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-render-return-value"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule will warn you if you try to use the ReactDOM.render() return value.\n\n### Example\n```javascript\n// Bad\nvaa inst =ReactDOM.render(<App />, document.body);\nfunction render() {\n return ReactDOM.render(<App />, document.body);\n}\n\n// Good\nReactDOM.render(<App />, document.body);\n```\n"
        },
        "react/no-set-state": {
          "description": "### What it does\n\nDisallow the usage of `this.setState` in React components.\n\n### Why is this bad?\n\nWhen using an architecture that separates your application state from your UI components\n(e.g. Flux), it may be desirable to forbid the use of local component state. This rule is\nespecially helpful in read-only applications (that don't use forms), since local component\nstate should rarely be necessary in such cases.\n\n### Example\n```javascript\nvar Hello = createReactClass({\n  getInitialState: function() {\n    return {\n      name: this.props.name\n    };\n  },\n  handleClick: function() {\n    this.setState({\n      name: this.props.name.toUpperCase()\n    });\n  },\n  render: function() {\n    return <div onClick={this.handleClick.bind(this)}>Hello {this.state.name}</div>;\n  }\n});\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-set-state"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow the usage of `this.setState` in React components.\n\n### Why is this bad?\n\nWhen using an architecture that separates your application state from your UI components\n(e.g. Flux), it may be desirable to forbid the use of local component state. This rule is\nespecially helpful in read-only applications (that don't use forms), since local component\nstate should rarely be necessary in such cases.\n\n### Example\n```javascript\nvar Hello = createReactClass({\n  getInitialState: function() {\n    return {\n      name: this.props.name\n    };\n  },\n  handleClick: function() {\n    this.setState({\n      name: this.props.name.toUpperCase()\n    });\n  },\n  render: function() {\n    return <div onClick={this.handleClick.bind(this)}>Hello {this.state.name}</div>;\n  }\n});\n```\n"
        },
        "react/no-string-refs": {
          "description": "### What it does\n\nThis rule prevents using string literals in ref attributes.\n\n### Example\n```javascript\n// Bad\nvar Hello = createReactClass({\n  render: function() {\n    return <div ref=\"hello\">Hello, world.</div>;\n  }\n});\n\nvar Hello = createReactClass({\n  componentDidMount: function() {\n    var component = this.refs.hello;\n    // ...do something with component\n  },\n  render: function() {\n    return <div ref=\"hello\">Hello, world.</div>;\n  }\n});\n\n// Good\nvar Hello = createReactClass({\n  componentDidMount: function() {\n    var component = this.hello;\n    // ...do something with component\n  },\n  render() {\n    return <div ref={(c) => { this.hello = c; }}>Hello, world.</div>;\n  }\n});\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-string-refs"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule prevents using string literals in ref attributes.\n\n### Example\n```javascript\n// Bad\nvar Hello = createReactClass({\n  render: function() {\n    return <div ref=\"hello\">Hello, world.</div>;\n  }\n});\n\nvar Hello = createReactClass({\n  componentDidMount: function() {\n    var component = this.refs.hello;\n    // ...do something with component\n  },\n  render: function() {\n    return <div ref=\"hello\">Hello, world.</div>;\n  }\n});\n\n// Good\nvar Hello = createReactClass({\n  componentDidMount: function() {\n    var component = this.hello;\n    // ...do something with component\n  },\n  render() {\n    return <div ref={(c) => { this.hello = c; }}>Hello, world.</div>;\n  }\n});\n```\n"
        },
        "react/no-unescaped-entities": {
          "description": "### What it does\n\nThis rule prevents characters that you may have meant as JSX escape characters from being accidentally injected as a text node in JSX statements.\n\n### Why is this bad?\n\nJSX escape characters are used to inject characters into JSX statements that would otherwise be interpreted as code.\n\n### Example\nIncorrect\n\n```jsx\n<div> > </div>\n```\n\nCorrect\n\n```jsx\n<div> &gt; </div>\n```\n\n```jsx\n<div> {'>'} </div>\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-unescaped-entities"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule prevents characters that you may have meant as JSX escape characters from being accidentally injected as a text node in JSX statements.\n\n### Why is this bad?\n\nJSX escape characters are used to inject characters into JSX statements that would otherwise be interpreted as code.\n\n### Example\nIncorrect\n\n```jsx\n<div> > </div>\n```\n\nCorrect\n\n```jsx\n<div> &gt; </div>\n```\n\n```jsx\n<div> {'>'} </div>\n```\n"
        },
        "react/no-unknown-property": {
          "description": "### What it does\nDisallow usage of unknown DOM property.\n\n### Why is this bad?\nYou can use unknown property name that has no effect.\n\n### Example\n```jsx\n // Unknown properties\n const Hello = <div class=\"hello\">Hello World</div>;\n const Alphabet = <div abc=\"something\">Alphabet</div>;\n\n // Invalid aria-* attribute\n const IconButton = <div aria-foo=\"bar\" />;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-unknown-property"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow usage of unknown DOM property.\n\n### Why is this bad?\nYou can use unknown property name that has no effect.\n\n### Example\n```jsx\n // Unknown properties\n const Hello = <div class=\"hello\">Hello World</div>;\n const Alphabet = <div abc=\"something\">Alphabet</div>;\n\n // Invalid aria-* attribute\n const IconButton = <div aria-foo=\"bar\" />;\n```\n"
        },
        "react/prefer-es-6-class": {
          "description": "### What it does\n\nReact offers you two ways to create traditional components: using the ES5\ncreate-react-class module or the new ES6 class system.\n\n### Why is this bad?\n\nThis rule enforces a consistent React class style.\n\n### Example\n```javascript\nvar Hello = createReactClass({\n  render: function() {\n    return <div>Hello {this.props.name}</div>;\n  }\n});\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-es-6-class"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nReact offers you two ways to create traditional components: using the ES5\ncreate-react-class module or the new ES6 class system.\n\n### Why is this bad?\n\nThis rule enforces a consistent React class style.\n\n### Example\n```javascript\nvar Hello = createReactClass({\n  render: function() {\n    return <div>Hello {this.props.name}</div>;\n  }\n});\n```\n"
        },
        "react/react-in-jsx-scope": {
          "description": "### What it does\n\nDisallow missing React when using JSX\n\n### Why is this bad?\n\nWhen using JSX, `<a />` expands to `React.createElement(\"a\")`. Therefore the `React` variable must be in scope.\n\n### Example\n```javascript\n// Bad\nvar a = <a />;\n\n// Good\nimport React from \"react\";\nvar a = <a />;\n\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/react-in-jsx-scope"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow missing React when using JSX\n\n### Why is this bad?\n\nWhen using JSX, `<a />` expands to `React.createElement(\"a\")`. Therefore the `React` variable must be in scope.\n\n### Example\n```javascript\n// Bad\nvar a = <a />;\n\n// Good\nimport React from \"react\";\nvar a = <a />;\n\n```\n"
        },
        "react/require-render-return": {
          "description": "### What it does\nEnforce ES5 or ES6 class for returning value in render function\n\n### Why is this bad?\nWhen writing the `render` method in a component it is easy to forget to return the JSX content. This rule will warn if the return statement is missing.\n\n### Example\n```javascript\nvar Hello = createReactClass({\n  render() {\n    <div>Hello</div>;\n  }\n});\n\nclass Hello extends React.Component {\n  render() {\n    <div>Hello</div>;\n  }\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/require-render-return"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nEnforce ES5 or ES6 class for returning value in render function\n\n### Why is this bad?\nWhen writing the `render` method in a component it is easy to forget to return the JSX content. This rule will warn if the return statement is missing.\n\n### Example\n```javascript\nvar Hello = createReactClass({\n  render() {\n    <div>Hello</div>;\n  }\n});\n\nclass Hello extends React.Component {\n  render() {\n    <div>Hello</div>;\n  }\n}\n```\n"
        },
        "react/rules-of-hooks": {
          "description": "### What it does\n\nThis enforcecs the Rules of Hooks\n\n<https://reactjs.org/docs/hooks-rules.html>\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/rules-of-hooks"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis enforcecs the Rules of Hooks\n\n<https://reactjs.org/docs/hooks-rules.html>\n\n"
        },
        "react/void-dom-elements-no-children": {
          "description": "### What it does\nThere are some HTML elements that are only self-closing (e.g. img, br, hr). These are collectively known as void DOM elements.\nThis rule checks that children are not passed to void DOM elements.\n\n### Example\n```javascript\n// Bad\n<br>Children</br>\n<br children='Children' />\n<br dangerouslySetInnerHTML={{ __html: 'HTML' }} />\nReact.createElement('br', undefined, 'Children')\nReact.createElement('br', { children: 'Children' })\nReact.createElement('br', { dangerouslySetInnerHTML: { __html: 'HTML' } })\n\n// Good\n<div>Children</div>\n<div children='Children' />\n<div dangerouslySetInnerHTML={{ __html: 'HTML' }} />\nReact.createElement('div', undefined, 'Children')\nReact.createElement('div', { children: 'Children' })\nReact.createElement('div', { dangerouslySetInnerHTML: { __html: 'HTML' } })\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/void-dom-elements-no-children"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nThere are some HTML elements that are only self-closing (e.g. img, br, hr). These are collectively known as void DOM elements.\nThis rule checks that children are not passed to void DOM elements.\n\n### Example\n```javascript\n// Bad\n<br>Children</br>\n<br children='Children' />\n<br dangerouslySetInnerHTML={{ __html: 'HTML' }} />\nReact.createElement('br', undefined, 'Children')\nReact.createElement('br', { children: 'Children' })\nReact.createElement('br', { dangerouslySetInnerHTML: { __html: 'HTML' } })\n\n// Good\n<div>Children</div>\n<div children='Children' />\n<div dangerouslySetInnerHTML={{ __html: 'HTML' }} />\nReact.createElement('div', undefined, 'Children')\nReact.createElement('div', { children: 'Children' })\nReact.createElement('div', { dangerouslySetInnerHTML: { __html: 'HTML' } })\n```\n"
        },
        "react_perf/jsx-no-jsx-as-prop": {
          "description": "### What it does\n\nPrevent JSX that are local to the current method from being used as values of JSX props\n\n### Example\n```javascript\n// Bad\n<Item jsx={<SubItem />} />\n<Item jsx={this.props.jsx || <SubItem />} />\n<Item jsx={this.props.jsx ? this.props.jsx : <SubItem />} />\n\n// Good\n<Item callback={this.props.jsx} />\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/jsx-no-jsx-as-prop"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nPrevent JSX that are local to the current method from being used as values of JSX props\n\n### Example\n```javascript\n// Bad\n<Item jsx={<SubItem />} />\n<Item jsx={this.props.jsx || <SubItem />} />\n<Item jsx={this.props.jsx ? this.props.jsx : <SubItem />} />\n\n// Good\n<Item callback={this.props.jsx} />\n```\n"
        },
        "react_perf/jsx-no-new-array-as-prop": {
          "description": "### What it does\n\nPrevent Arrays that are local to the current method from being used as values of JSX props\n\n### Example\n```javascript\n// Bad\n<Item list={[]} />\n<Item list={new Array()} />\n<Item list={Array()} />\n<Item list={this.props.list || []} />\n<Item list={this.props.list ? this.props.list : []} />\n\n// Good\n<Item list={this.props.list} />\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/jsx-no-new-array-as-prop"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nPrevent Arrays that are local to the current method from being used as values of JSX props\n\n### Example\n```javascript\n// Bad\n<Item list={[]} />\n<Item list={new Array()} />\n<Item list={Array()} />\n<Item list={this.props.list || []} />\n<Item list={this.props.list ? this.props.list : []} />\n\n// Good\n<Item list={this.props.list} />\n```\n"
        },
        "react_perf/jsx-no-new-function-as-prop": {
          "description": "### What it does\n\nPrevent Functions that are local to the current method from being used as values of JSX props\n### Example\n```javascript\n// Bad\n<Item callback={new Function(...)} />\n<Item callback={this.props.callback || function() {}} />\n\n// Good\n<Item callback={this.props.callback} />\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/jsx-no-new-function-as-prop"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nPrevent Functions that are local to the current method from being used as values of JSX props\n### Example\n```javascript\n// Bad\n<Item callback={new Function(...)} />\n<Item callback={this.props.callback || function() {}} />\n\n// Good\n<Item callback={this.props.callback} />\n```\n"
        },
        "react_perf/jsx-no-new-object-as-prop": {
          "description": "### What it does\n\nPrevent Objects that are local to the current method from being used as values of JSX props\n\n```javascript\n// Bad\n<Item config={{}} />\n<Item config={new Object()} />\n<Item config={Object()} />\n<Item config={this.props.config || {}} />\n<Item config={this.props.config ? this.props.config : {}} />\n\n// Good\n<Item config={staticConfig} />\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/jsx-no-new-object-as-prop"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nPrevent Objects that are local to the current method from being used as values of JSX props\n\n```javascript\n// Bad\n<Item config={{}} />\n<Item config={new Object()} />\n<Item config={Object()} />\n<Item config={this.props.config || {}} />\n<Item config={this.props.config ? this.props.config : {}} />\n\n// Good\n<Item config={staticConfig} />\n```\n"
        },
        "require-await": {
          "description": "### What it does\nDisallow async functions which have no await expression.\n\n### Why is this bad?\n\n\n### Example\n```javascript\nasync function foo() {\n  doSomething();\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/require-await"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow async functions which have no await expression.\n\n### Why is this bad?\n\n\n### Example\n```javascript\nasync function foo() {\n  doSomething();\n}\n```\n"
        },
        "require-yield": {
          "description": "### What it does\n\nThis rule generates warnings for generator functions that do not have the yield keyword.\n\n### Why is this bad?\n\nProbably a mistake.\n\n### Example\n```javascript\nfunction* foo() {\n  return 10;\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/require-yield"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule generates warnings for generator functions that do not have the yield keyword.\n\n### Why is this bad?\n\nProbably a mistake.\n\n### Example\n```javascript\nfunction* foo() {\n  return 10;\n}\n```\n"
        },
        "sort-imports": {
          "description": "### What it does\n\nThis rule checks all import declarations and verifies that all imports are first sorted\nby the used member syntax and then alphabetically by the first member or alias name.\n\nWhen declaring multiple imports, a sorted list of import declarations make it easier for developers to read\nthe code and find necessary imports later.\n\n### Why is this bad?\n\n### Example\n```javascript\nimport {b, a, c} from 'foo.js'\n\nimport d from 'foo.js';\nimport e from 'bar.js';\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/sort-imports"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule checks all import declarations and verifies that all imports are first sorted\nby the used member syntax and then alphabetically by the first member or alias name.\n\nWhen declaring multiple imports, a sorted list of import declarations make it easier for developers to read\nthe code and find necessary imports later.\n\n### Why is this bad?\n\n### Example\n```javascript\nimport {b, a, c} from 'foo.js'\n\nimport d from 'foo.js';\nimport e from 'bar.js';\n```\n"
        },
        "symbol-description": {
          "description": "### What it does\n\nRequire symbol descriptions.\n\n### Why is this bad?\n\nThe Symbol function may have an optional description.\n\n### Example\n```javascript\nvar foo = Symbol();\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/symbol-description"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nRequire symbol descriptions.\n\n### Why is this bad?\n\nThe Symbol function may have an optional description.\n\n### Example\n```javascript\nvar foo = Symbol();\n```\n"
        },
        "tree_shaking/no-side-effects-in-initialization": {
          "description": "### What it does\n\nMarks all side-effects in module initialization that will interfere with tree-shaking.\n\nThis plugin is intended as a means for library developers to identify patterns that will\ninterfere with the tree-shaking algorithm of their module bundler (i.e. rollup or webpack).\n\n### Why is this bad?\n\n### Example\n\n```javascript\nmyGlobal = 17; // Cannot determine side-effects of assignment to global variable\nconst x = { [globalFunction()]: \"myString\" }; // Cannot determine side-effects of calling global function\nexport default 42;\n```\n\n### Options\n\n```json\n{\n  \"rules\": {\n    \"tree-shaking/no-side-effects-in-initialization\": [\n      2,\n      {\n        \"noSideEffectsWhenCalled\": [\n          // If you want to mark a function call as side-effect free\n          { \"function\": \"Object.freeze\" },\n          {\n            \"module\": \"react\",\n            \"functions\": [\"createContext\", \"createRef\"]\n          },\n          {\n            \"module\": \"zod\",\n            \"functions\": [\"array\", \"string\", \"nativeEnum\", \"number\", \"object\", \"optional\"]\n          },\n          {\n            \"module\": \"my/local/module\",\n            \"functions\": [\"foo\", \"bar\", \"baz\"]\n          },\n          // If you want to whitelist all functions of a module\n          {\n            \"module\": \"lodash\",\n            \"functions\": \"*\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n### Magic Comments\n\nBesides the configuration, you can also use magic comments to mark a function call as side effect free.\n\nBy default, imported functions are assumed to have side-effects, unless they are marked with a magic comment:\n\n```js\nimport { /* tree-shaking no-side-effects-when-called */ x } from \"./some-file\";\nx();\n```\n\n`@__PURE__` is also supported:\n\n```js\nimport {x} from \"./some-file\";\n/*@__PURE__*/ x();\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-side-effects-in-initialization"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nMarks all side-effects in module initialization that will interfere with tree-shaking.\n\nThis plugin is intended as a means for library developers to identify patterns that will\ninterfere with the tree-shaking algorithm of their module bundler (i.e. rollup or webpack).\n\n### Why is this bad?\n\n### Example\n\n```javascript\nmyGlobal = 17; // Cannot determine side-effects of assignment to global variable\nconst x = { [globalFunction()]: \"myString\" }; // Cannot determine side-effects of calling global function\nexport default 42;\n```\n\n### Options\n\n```json\n{\n  \"rules\": {\n    \"tree-shaking/no-side-effects-in-initialization\": [\n      2,\n      {\n        \"noSideEffectsWhenCalled\": [\n          // If you want to mark a function call as side-effect free\n          { \"function\": \"Object.freeze\" },\n          {\n            \"module\": \"react\",\n            \"functions\": [\"createContext\", \"createRef\"]\n          },\n          {\n            \"module\": \"zod\",\n            \"functions\": [\"array\", \"string\", \"nativeEnum\", \"number\", \"object\", \"optional\"]\n          },\n          {\n            \"module\": \"my/local/module\",\n            \"functions\": [\"foo\", \"bar\", \"baz\"]\n          },\n          // If you want to whitelist all functions of a module\n          {\n            \"module\": \"lodash\",\n            \"functions\": \"*\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n### Magic Comments\n\nBesides the configuration, you can also use magic comments to mark a function call as side effect free.\n\nBy default, imported functions are assumed to have side-effects, unless they are marked with a magic comment:\n\n```js\nimport { /* tree-shaking no-side-effects-when-called */ x } from \"./some-file\";\nx();\n```\n\n`@__PURE__` is also supported:\n\n```js\nimport {x} from \"./some-file\";\n/*@__PURE__*/ x();\n```\n"
        },
        "typescript/adjacent-overload-signatures": {
          "description": "### What it does\n\nRequire that function overload signatures be consecutive.\n\n### Why is this bad?\nFunction overload signatures represent multiple ways\na function can be called, potentially with different return types.\nIt's typical for an interface or type alias describing a function to place all overload signatures next to each other.\nIf Signatures placed elsewhere in the type are easier to be missed by future developers reading the code.\n\n### Example\n```typescript\ndeclare namespace Foo {\n  export function foo(s: string): void;\n  export function foo(n: number): void;\n  export function bar(): void;\n  export function foo(sn: string | number): void;\n}\n\ntype Foo = {\n  foo(s: string): void;\n  foo(n: number): void;\n  bar(): void;\n  foo(sn: string | number): void;\n};\n\ninterface Foo {\n  foo(s: string): void;\n  foo(n: number): void;\n  bar(): void;\n  foo(sn: string | number): void;\n}\n\nclass Foo {\n  foo(s: string): void;\n  foo(n: number): void;\n  bar(): void {}\n  foo(sn: string | number): void {}\n}\n\nexport function foo(s: string): void;\nexport function foo(n: number): void;\nexport function bar(): void;\nexport function foo(sn: string | number): void;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/adjacent-overload-signatures"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nRequire that function overload signatures be consecutive.\n\n### Why is this bad?\nFunction overload signatures represent multiple ways\na function can be called, potentially with different return types.\nIt's typical for an interface or type alias describing a function to place all overload signatures next to each other.\nIf Signatures placed elsewhere in the type are easier to be missed by future developers reading the code.\n\n### Example\n```typescript\ndeclare namespace Foo {\n  export function foo(s: string): void;\n  export function foo(n: number): void;\n  export function bar(): void;\n  export function foo(sn: string | number): void;\n}\n\ntype Foo = {\n  foo(s: string): void;\n  foo(n: number): void;\n  bar(): void;\n  foo(sn: string | number): void;\n};\n\ninterface Foo {\n  foo(s: string): void;\n  foo(n: number): void;\n  bar(): void;\n  foo(sn: string | number): void;\n}\n\nclass Foo {\n  foo(s: string): void;\n  foo(n: number): void;\n  bar(): void {}\n  foo(sn: string | number): void {}\n}\n\nexport function foo(s: string): void;\nexport function foo(n: number): void;\nexport function bar(): void;\nexport function foo(sn: string | number): void;\n```\n"
        },
        "typescript/array-type": {
          "description": "### What it does\nRequire consistently using either `T[]` or `Array<T>` for arrays.\n\n### Why is this bad?\nUsing the `Array` type directly is not idiomatic. Instead, use the array type `T[]` or `Array<T>`.\n\n### Example\n```typescript\nconst arr: Array<number> = new Array<number>();\nconst arr: number[] = new Array<number>();\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/array-type"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nRequire consistently using either `T[]` or `Array<T>` for arrays.\n\n### Why is this bad?\nUsing the `Array` type directly is not idiomatic. Instead, use the array type `T[]` or `Array<T>`.\n\n### Example\n```typescript\nconst arr: Array<number> = new Array<number>();\nconst arr: number[] = new Array<number>();\n```\n"
        },
        "typescript/ban-ts-comment": {
          "description": "### What it does\nThis rule lets you set which directive comments you want to allow in your codebase.\n\n### Why is this bad?\nUsing TypeScript directives to suppress TypeScript compiler errors\nreduces the effectiveness of TypeScript overall.\n\n### Example\n```javascript\nif (false) {\n  // @ts-ignore: Unreachable code error\n  console.log('hello');\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/ban-ts-comment"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nThis rule lets you set which directive comments you want to allow in your codebase.\n\n### Why is this bad?\nUsing TypeScript directives to suppress TypeScript compiler errors\nreduces the effectiveness of TypeScript overall.\n\n### Example\n```javascript\nif (false) {\n  // @ts-ignore: Unreachable code error\n  console.log('hello');\n}\n```\n"
        },
        "typescript/ban-tslint-comment": {
          "description": "### What it does\nThis rule disallows `tslint:<rule-flag>` comments\n\n### Why is this bad?\nUseful when migrating from TSLint to ESLint. Once TSLint has been\nremoved, this rule helps locate TSLint annotations\n\n### Example\n```javascript\n// tslint:disable-next-line\nsomeCode();\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/ban-tslint-comment"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nThis rule disallows `tslint:<rule-flag>` comments\n\n### Why is this bad?\nUseful when migrating from TSLint to ESLint. Once TSLint has been\nremoved, this rule helps locate TSLint annotations\n\n### Example\n```javascript\n// tslint:disable-next-line\nsomeCode();\n```\n"
        },
        "typescript/ban-types": {
          "description": "### What it does\n\nThis rule bans specific types and can suggest alternatives. Note that it does not ban the corresponding runtime objects from being used.\n\n### Why is this bad?\n\nSome built-in types have aliases, while some types are considered dangerous or harmful. It's often a good idea to ban certain types to help with consistency and safety.\n\n### Example\n```typescript\nlet foo: String = 'foo';\n\nlet bar: Boolean = true;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/ban-types"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule bans specific types and can suggest alternatives. Note that it does not ban the corresponding runtime objects from being used.\n\n### Why is this bad?\n\nSome built-in types have aliases, while some types are considered dangerous or harmful. It's often a good idea to ban certain types to help with consistency and safety.\n\n### Example\n```typescript\nlet foo: String = 'foo';\n\nlet bar: Boolean = true;\n```\n"
        },
        "typescript/consistent-indexed-object-style": {
          "description": "### What it does\nRequire or disallow the `Record` type.\n\n### Why is this bad?\nInconsistent style for indexed object types can harm readability in a project.\n\n### Example\nWith \"record\":\n\n```javascript\n// bad\ninterface Foo {\n [key: string]: unknown;\n}\ntype Foo = {\n [key: string]: unknown;\n};\n```\n\nWith \"index-signature\":\n\n```javascript\n// bad\ntype Foo = Record<string, unknown>;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/consistent-indexed-object-style"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nRequire or disallow the `Record` type.\n\n### Why is this bad?\nInconsistent style for indexed object types can harm readability in a project.\n\n### Example\nWith \"record\":\n\n```javascript\n// bad\ninterface Foo {\n [key: string]: unknown;\n}\ntype Foo = {\n [key: string]: unknown;\n};\n```\n\nWith \"index-signature\":\n\n```javascript\n// bad\ntype Foo = Record<string, unknown>;\n```\n"
        },
        "typescript/consistent-type-definitions": {
          "description": "### What it does\n\nEnforce type definitions to consistently use either interface or type.\n\n### Why is this bad?\n\nTypeScript provides two common ways to define an object type: interface and type.\nThe two are generally very similar, and can often be used interchangeably.\nUsing the same type declaration style consistently helps with code readability.\n\n### Example\n```ts\n// incorrect, when set to \"interface\"\ntype T = { x: number };\n\n// incorrect when set to \"type\"\ninterface T {\nx: number;\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/consistent-type-definitions"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforce type definitions to consistently use either interface or type.\n\n### Why is this bad?\n\nTypeScript provides two common ways to define an object type: interface and type.\nThe two are generally very similar, and can often be used interchangeably.\nUsing the same type declaration style consistently helps with code readability.\n\n### Example\n```ts\n// incorrect, when set to \"interface\"\ntype T = { x: number };\n\n// incorrect when set to \"type\"\ninterface T {\nx: number;\n}\n```\n"
        },
        "typescript/consistent-type-imports": {
          "description": "### What it does\n\nEnforce consistent usage of type imports.\n\n### Why is this bad?\n\ninconsistent usage of type imports can make the code harder to read and understand.\n\n### Example\n```javascript\nimport { Foo } from 'Foo';\ntype T = Foo;\n\ntype S = import(\"Foo\");\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/consistent-type-imports"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforce consistent usage of type imports.\n\n### Why is this bad?\n\ninconsistent usage of type imports can make the code harder to read and understand.\n\n### Example\n```javascript\nimport { Foo } from 'Foo';\ntype T = Foo;\n\ntype S = import(\"Foo\");\n```\n"
        },
        "typescript/explicit-function-return-type": {
          "description": "### What it does\nThis rule enforces that functions do have an explicit return type annotation.\n\n### Why is this bad?\nExplicit return types do make it visually more clear what type is returned by a function.\nThey can also speed up TypeScript type checking performance in large codebases with many large functions.\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/explicit-function-return-type"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nThis rule enforces that functions do have an explicit return type annotation.\n\n### Why is this bad?\nExplicit return types do make it visually more clear what type is returned by a function.\nThey can also speed up TypeScript type checking performance in large codebases with many large functions.\n\n### Example\n```javascript\n```\n"
        },
        "typescript/no-duplicate-enum-values": {
          "description": "### What it does\nDisallow duplicate enum member values.\n\n### Why is this bad?\nAlthough TypeScript supports duplicate enum member values, people usually expect members to have unique values within the same enum. Duplicate values can lead to bugs that are hard to track down.\n\n### Example\n```javascript\nenum E {\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-duplicate-enum-values"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow duplicate enum member values.\n\n### Why is this bad?\nAlthough TypeScript supports duplicate enum member values, people usually expect members to have unique values within the same enum. Duplicate values can lead to bugs that are hard to track down.\n\n### Example\n```javascript\nenum E {\n```\n"
        },
        "typescript/no-dynamic-delete": {
          "description": "### What it does\nDisallow using the delete operator on computed key expressions.\n\n### Why is this bad?\nDeleting dynamically computed keys can be dangerous and in some cases not well optimized.\nUsing the delete operator on keys that aren't runtime constants could be a sign that you're using the wrong data structures.\nConsider using a Map or Set if you’re using an object as a key-value collection.\n\n### Example\n```javascript\nconst container: { [i: string]: 0 } = {};\ndelete container['aa' + 'b'];\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-dynamic-delete"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow using the delete operator on computed key expressions.\n\n### Why is this bad?\nDeleting dynamically computed keys can be dangerous and in some cases not well optimized.\nUsing the delete operator on keys that aren't runtime constants could be a sign that you're using the wrong data structures.\nConsider using a Map or Set if you’re using an object as a key-value collection.\n\n### Example\n```javascript\nconst container: { [i: string]: 0 } = {};\ndelete container['aa' + 'b'];\n```\n"
        },
        "typescript/no-empty-interface": {
          "description": "### What it does\n\nDisallow the declaration of empty interfaces.\n\n### Why is this bad?\n\nAn empty interface in TypeScript does very little: any non-nullable value is assignable to {}.\nUsing an empty interface is often a sign of programmer error, such as misunderstanding the concept of {} or forgetting to fill in fields.\nThis rule aims to ensure that only meaningful interfaces are declared in the code.\n\n### Example\n```javascript\ninterface Foo {}\ninterface Bar extends Foo {}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-empty-interface"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow the declaration of empty interfaces.\n\n### Why is this bad?\n\nAn empty interface in TypeScript does very little: any non-nullable value is assignable to {}.\nUsing an empty interface is often a sign of programmer error, such as misunderstanding the concept of {} or forgetting to fill in fields.\nThis rule aims to ensure that only meaningful interfaces are declared in the code.\n\n### Example\n```javascript\ninterface Foo {}\ninterface Bar extends Foo {}\n```\n"
        },
        "typescript/no-explicit-any": {
          "description": "### What it does\n\nDisallows explicit use of the `any` type.\n\n### Why is this bad?\n\nThe `any` type in TypeScript is a dangerous \"escape hatch\" from the type system. Using\n`any` disables many type checking rules and is generally best used only as a last resort or\nwhen prototyping code. This rule reports on explicit uses of the `any` keyword as a type\nannotation.\n\n> TypeScript's `--noImplicitAny` compiler option prevents an implied `any`, but doesn't\n> prevent `any` from being explicitly used the way this rule does.\n\n### Example\n\nExamples of **incorrect** code for this rule:\n\n```typescript\nconst age: any = 'seventeen';\nconst ages: any[] = ['seventeen']\nconst ages: Array<any> = ['seventeen'];\nfunction greet(): any {}\nfunction greet(): any[] {}\nfunction greet(): Array<any> {}\nfunction greet(): Array<Array<any>> {}\nfunction greet(param: Array<any>): string {}\nfunction greet(param: Array<any>): Array<any> {}\n```\n\nExamples of **correct** code for this rule:\n\n```typescript\nconst age: number = 17;\nconst ages: number[] = [17];\nconst ages: Array<number> = [17];\nfunction greet(): string {}\nfunction greet(): string[] {}\nfunction greet(): Array<string> {}\nfunction greet(): Array<Array<string>> {}\nfunction greet(param: Array<string>): string {}\nfunction greet(param: Array<string>): Array<string> {}\n```\n\n## Options\n\nThis rule accepts the following options:\n\n### `ignoreRestArgs`\nA boolean to specify if arrays from the rest operator are considered ok. `false` by\ndefault.\n\n### `fixToUnknown`\n\nWhether to enable auto-fixing in which the `any` type is converted to the `unknown` type.\n`false` by default.\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-explicit-any"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallows explicit use of the `any` type.\n\n### Why is this bad?\n\nThe `any` type in TypeScript is a dangerous \"escape hatch\" from the type system. Using\n`any` disables many type checking rules and is generally best used only as a last resort or\nwhen prototyping code. This rule reports on explicit uses of the `any` keyword as a type\nannotation.\n\n> TypeScript's `--noImplicitAny` compiler option prevents an implied `any`, but doesn't\n> prevent `any` from being explicitly used the way this rule does.\n\n### Example\n\nExamples of **incorrect** code for this rule:\n\n```typescript\nconst age: any = 'seventeen';\nconst ages: any[] = ['seventeen']\nconst ages: Array<any> = ['seventeen'];\nfunction greet(): any {}\nfunction greet(): any[] {}\nfunction greet(): Array<any> {}\nfunction greet(): Array<Array<any>> {}\nfunction greet(param: Array<any>): string {}\nfunction greet(param: Array<any>): Array<any> {}\n```\n\nExamples of **correct** code for this rule:\n\n```typescript\nconst age: number = 17;\nconst ages: number[] = [17];\nconst ages: Array<number> = [17];\nfunction greet(): string {}\nfunction greet(): string[] {}\nfunction greet(): Array<string> {}\nfunction greet(): Array<Array<string>> {}\nfunction greet(param: Array<string>): string {}\nfunction greet(param: Array<string>): Array<string> {}\n```\n\n## Options\n\nThis rule accepts the following options:\n\n### `ignoreRestArgs`\nA boolean to specify if arrays from the rest operator are considered ok. `false` by\ndefault.\n\n### `fixToUnknown`\n\nWhether to enable auto-fixing in which the `any` type is converted to the `unknown` type.\n`false` by default.\n"
        },
        "typescript/no-extra-non-null-assertion": {
          "description": "### What it does\n\nDisallow extra non-null assertions.\n\n### Why is this bad?\nThe `!` non-null assertion operator in TypeScript is used to assert that a value's type does not include null or undefined. Using the operator any more than once on a single value does nothing.\n\n### Example\n```javascript\nconst foo: { bar: number } | null = null;\nconst bar = foo!!!.bar;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-extra-non-null-assertion"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow extra non-null assertions.\n\n### Why is this bad?\nThe `!` non-null assertion operator in TypeScript is used to assert that a value's type does not include null or undefined. Using the operator any more than once on a single value does nothing.\n\n### Example\n```javascript\nconst foo: { bar: number } | null = null;\nconst bar = foo!!!.bar;\n```\n"
        },
        "typescript/no-import-type-side-effects": {
          "description": "### What it does\n\nEnforce the use of top-level import type qualifier when an import only has specifiers with inline type qualifiers.\n\n### Why is this bad?\n\nThe `--verbatimModuleSyntax` compiler option causes TypeScript to do simple and predictable transpilation on import declarations.\nNamely, it completely removes import declarations with a top-level type qualifier, and it removes any import specifiers with an inline type qualifier.\n\nThe latter behavior does have one potentially surprising effect in that in certain cases TS can leave behind a \"side effect\" import at runtime:\n```javascript\nimport { type A, type B } from 'mod';\n```\nis transpiled to\n\n```javascript\nimport {} from 'mod';\nwhich is the same as\nimport 'mod';\n```\nFor the rare case of needing to import for side effects, this may be desirable - but for most cases you will not want to leave behind an unnecessary side effect import.\n\n### Example\n```javascript\nimport { type A } from 'mod';\nimport { type A as AA } from 'mod';\nimport { type A, type B } from 'mod';\nimport { type A as AA, type B as BB } from 'mod';\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-import-type-side-effects"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforce the use of top-level import type qualifier when an import only has specifiers with inline type qualifiers.\n\n### Why is this bad?\n\nThe `--verbatimModuleSyntax` compiler option causes TypeScript to do simple and predictable transpilation on import declarations.\nNamely, it completely removes import declarations with a top-level type qualifier, and it removes any import specifiers with an inline type qualifier.\n\nThe latter behavior does have one potentially surprising effect in that in certain cases TS can leave behind a \"side effect\" import at runtime:\n```javascript\nimport { type A, type B } from 'mod';\n```\nis transpiled to\n\n```javascript\nimport {} from 'mod';\nwhich is the same as\nimport 'mod';\n```\nFor the rare case of needing to import for side effects, this may be desirable - but for most cases you will not want to leave behind an unnecessary side effect import.\n\n### Example\n```javascript\nimport { type A } from 'mod';\nimport { type A as AA } from 'mod';\nimport { type A, type B } from 'mod';\nimport { type A as AA, type B as BB } from 'mod';\n```\n"
        },
        "typescript/no-misused-new": {
          "description": "### What it does\n\nEnforce valid definition of `new` and `constructor`\n\n### Why is this bad?\n\nJavaScript classes may define a constructor method that runs\nwhen a class instance is newly created.\nTypeScript allows interfaces that describe a static class object to define\na new() method (though this is rarely used in real world code).\nDevelopers new to JavaScript classes and/or TypeScript interfaces may\nsometimes confuse when to use constructor or new.\n\n### Example\n```typescript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-misused-new"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforce valid definition of `new` and `constructor`\n\n### Why is this bad?\n\nJavaScript classes may define a constructor method that runs\nwhen a class instance is newly created.\nTypeScript allows interfaces that describe a static class object to define\na new() method (though this is rarely used in real world code).\nDevelopers new to JavaScript classes and/or TypeScript interfaces may\nsometimes confuse when to use constructor or new.\n\n### Example\n```typescript\n```\n"
        },
        "typescript/no-namespace": {
          "description": "### What it does\nDisallow TypeScript namespaces.\n\n### Why is this bad?\nTypeScript historically allowed a form of code organization called \"custom modules\" (module Example {}),\nlater renamed to \"namespaces\" (namespace Example). Namespaces are an outdated way to organize TypeScript code.\nES2015 module syntax is now preferred (import/export).\n\n### Example\n```typescript\nmodule foo {}\nnamespace foo {}\ndeclare module foo {}\ndeclare namespace foo {}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-namespace"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow TypeScript namespaces.\n\n### Why is this bad?\nTypeScript historically allowed a form of code organization called \"custom modules\" (module Example {}),\nlater renamed to \"namespaces\" (namespace Example). Namespaces are an outdated way to organize TypeScript code.\nES2015 module syntax is now preferred (import/export).\n\n### Example\n```typescript\nmodule foo {}\nnamespace foo {}\ndeclare module foo {}\ndeclare namespace foo {}\n```\n"
        },
        "typescript/no-non-null-asserted-nullish-coalescing": {
          "description": "### What it does\nDisallow non-null assertions in the left operand of a nullish coalescing operator.\n\n### Why is this bad?\nThe ?? nullish coalescing runtime operator allows providing a default value when dealing with null or undefined. Using a ! non-null assertion type operator in the left operand of a nullish coalescing operator is redundant, and likely a sign of programmer error or confusion over the two operators.\n\n### Example\n```javascript\nfoo! ?? bar;\n\nlet x: string;\nx! ?? '';\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-non-null-asserted-nullish-coalescing"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow non-null assertions in the left operand of a nullish coalescing operator.\n\n### Why is this bad?\nThe ?? nullish coalescing runtime operator allows providing a default value when dealing with null or undefined. Using a ! non-null assertion type operator in the left operand of a nullish coalescing operator is redundant, and likely a sign of programmer error or confusion over the two operators.\n\n### Example\n```javascript\nfoo! ?? bar;\n\nlet x: string;\nx! ?? '';\n```\n"
        },
        "typescript/no-non-null-asserted-optional-chain": {
          "description": "### What it does\n\nDisallow non-null assertions after an optional chain expression.\n\n### Why is this bad?\n`?.` optional chain expressions provide undefined if an object is null or undefined.\nUsing a `!` non-null assertion to assert the result of an `?.` optional chain expression is non-nullable is likely wrong.\n\nMost of the time, either the object was not nullable and did not need the `?.` for its property lookup, or the `!` is incorrect and introducing a type safety hole.\n\n### Example\n```javascript\nfoo?.bar!;\nfoo?.bar()!;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-non-null-asserted-optional-chain"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow non-null assertions after an optional chain expression.\n\n### Why is this bad?\n`?.` optional chain expressions provide undefined if an object is null or undefined.\nUsing a `!` non-null assertion to assert the result of an `?.` optional chain expression is non-nullable is likely wrong.\n\nMost of the time, either the object was not nullable and did not need the `?.` for its property lookup, or the `!` is incorrect and introducing a type safety hole.\n\n### Example\n```javascript\nfoo?.bar!;\nfoo?.bar()!;\n```\n"
        },
        "typescript/no-non-null-assertion": {
          "description": "### What it does\nDisallow non-null assertions using the ! postfix operator.\n\n### Why is this bad?\nTypeScript's ! non-null assertion operator asserts to the type system that an expression is non-nullable, as in not null or undefined. Using assertions to tell the type system new information is often a sign that code is not fully type-safe. It's generally better to structure program logic so that TypeScript understands when values may be nullable.\n\n### Example\n```javascript\nx!;\nx!.y;\nx.y!;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-non-null-assertion"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow non-null assertions using the ! postfix operator.\n\n### Why is this bad?\nTypeScript's ! non-null assertion operator asserts to the type system that an expression is non-nullable, as in not null or undefined. Using assertions to tell the type system new information is often a sign that code is not fully type-safe. It's generally better to structure program logic so that TypeScript understands when values may be nullable.\n\n### Example\n```javascript\nx!;\nx!.y;\nx.y!;\n```\n"
        },
        "typescript/no-this-alias": {
          "description": "### What it does\n\nDisallow unnecessary constraints on generic types.\n\n### Why is this bad?\n\nGeneric type parameters (<T>) in TypeScript may be \"constrained\" with an extends keyword.\nWhen no extends is provided, type parameters default a constraint to unknown. It is therefore redundant to extend from any or unknown.\n\nthe rule doesn't allow const {allowedName} = this\nthis is to keep 1:1 with eslint implementation\nsampe with obj.<allowedName> = this\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-this-alias"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow unnecessary constraints on generic types.\n\n### Why is this bad?\n\nGeneric type parameters (<T>) in TypeScript may be \"constrained\" with an extends keyword.\nWhen no extends is provided, type parameters default a constraint to unknown. It is therefore redundant to extend from any or unknown.\n\nthe rule doesn't allow const {allowedName} = this\nthis is to keep 1:1 with eslint implementation\nsampe with obj.<allowedName> = this\n```\n"
        },
        "typescript/no-unnecessary-type-constraint": {
          "description": "### What it does\n\nDisallow unnecessary constraints on generic types.\n\n### Why is this bad?\n\nGeneric type parameters (<T>) in TypeScript may be \"constrained\" with an extends keyword.\nWhen no extends is provided, type parameters default a constraint to unknown. It is therefore redundant to extend from any or unknown.\n\n### Example\n```javascript\ninterface FooAny<T extends any> {}\ninterface FooUnknown<T extends unknown> {}\ntype BarAny<T extends any> = {};\ntype BarUnknown<T extends unknown> = {};\nclass BazAny<T extends any> {\n  quxAny<U extends any>() {}\n}\nconst QuuxAny = <T extends any>() => {};\nfunction QuuzAny<T extends any>() {}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-unnecessary-type-constraint"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow unnecessary constraints on generic types.\n\n### Why is this bad?\n\nGeneric type parameters (<T>) in TypeScript may be \"constrained\" with an extends keyword.\nWhen no extends is provided, type parameters default a constraint to unknown. It is therefore redundant to extend from any or unknown.\n\n### Example\n```javascript\ninterface FooAny<T extends any> {}\ninterface FooUnknown<T extends unknown> {}\ntype BarAny<T extends any> = {};\ntype BarUnknown<T extends unknown> = {};\nclass BazAny<T extends any> {\n  quxAny<U extends any>() {}\n}\nconst QuuxAny = <T extends any>() => {};\nfunction QuuzAny<T extends any>() {}\n```\n"
        },
        "typescript/no-unsafe-declaration-merging": {
          "description": "### What it does\n\nDisallow unsafe declaration merging.\n\n### Why is this bad?\n\nDeclaration merging between classes and interfaces is unsafe.\nThe TypeScript compiler doesn't check whether properties are initialized, which can cause lead to TypeScript not detecting code that will cause runtime errors.\n\n### Example\n```javascript\ninterface Foo {}\nclass Foo {}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-unsafe-declaration-merging"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow unsafe declaration merging.\n\n### Why is this bad?\n\nDeclaration merging between classes and interfaces is unsafe.\nThe TypeScript compiler doesn't check whether properties are initialized, which can cause lead to TypeScript not detecting code that will cause runtime errors.\n\n### Example\n```javascript\ninterface Foo {}\nclass Foo {}\n```\n"
        },
        "typescript/no-useless-empty-export": {
          "description": "### What it does\n\nDisallow empty exports that don't change anything in a module file.\n\n### Example\n\n### Bad\n```javascript\nexport const value = 'Hello, world!';\nexport {};\n```\n\n### Good\n```javascript\nexport const value = 'Hello, world!';\n```\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-useless-empty-export"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow empty exports that don't change anything in a module file.\n\n### Example\n\n### Bad\n```javascript\nexport const value = 'Hello, world!';\nexport {};\n```\n\n### Good\n```javascript\nexport const value = 'Hello, world!';\n```\n\n"
        },
        "typescript/no-var-requires": {
          "description": "### What it does\n\nDisallow `require` statements except in import statements\n\n### Why is this bad?\n\nIn other words, the use of forms such as var foo = require(\"foo\") are banned. Instead use ES6 style imports or import foo = require(\"foo\") imports.\n\n```typescript\nvar foo = require('foo');\nconst foo = require('foo');\nlet foo = require('foo');\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-var-requires"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow `require` statements except in import statements\n\n### Why is this bad?\n\nIn other words, the use of forms such as var foo = require(\"foo\") are banned. Instead use ES6 style imports or import foo = require(\"foo\") imports.\n\n```typescript\nvar foo = require('foo');\nconst foo = require('foo');\nlet foo = require('foo');\n```\n"
        },
        "typescript/prefer-as-const": {
          "description": "### What it does\nEnforce the use of as const over literal type.\n### Why is this bad?\nThere are two common ways to tell TypeScript that a literal value should be interpreted as its literal type (e.g. 2) rather than general primitive type (e.g. number);\n\nas const: telling TypeScript to infer the literal type automatically\nas with the literal type: explicitly telling the literal type to TypeScript\n\nas const is generally preferred, as it doesn't require re-typing the literal value.\nThis rule reports when an as with an explicit literal type can be replaced with an as const.\n\n### Example\n```javascript\nlet bar: 2 = 2;\nlet foo = { bar: 'baz' as 'baz' };\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-as-const"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nEnforce the use of as const over literal type.\n### Why is this bad?\nThere are two common ways to tell TypeScript that a literal value should be interpreted as its literal type (e.g. 2) rather than general primitive type (e.g. number);\n\nas const: telling TypeScript to infer the literal type automatically\nas with the literal type: explicitly telling the literal type to TypeScript\n\nas const is generally preferred, as it doesn't require re-typing the literal value.\nThis rule reports when an as with an explicit literal type can be replaced with an as const.\n\n### Example\n```javascript\nlet bar: 2 = 2;\nlet foo = { bar: 'baz' as 'baz' };\n```\n"
        },
        "typescript/prefer-enum-initializers": {
          "description": "### What it does\nRequire each enum member value to be explicitly initialized.\n\n### Why is this bad?\nIn projects where the value of `enum` members are important, allowing implicit values for enums can cause bugs if enums are modified over time.\n\n### Example\n```typescript\n// wrong, the value of `Close` is not constant\nenum Status {\n Open = 1,\n Close,\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-enum-initializers"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nRequire each enum member value to be explicitly initialized.\n\n### Why is this bad?\nIn projects where the value of `enum` members are important, allowing implicit values for enums can cause bugs if enums are modified over time.\n\n### Example\n```typescript\n// wrong, the value of `Close` is not constant\nenum Status {\n Open = 1,\n Close,\n}\n```\n"
        },
        "typescript/prefer-for-of": {
          "description": "### What it does\nEnforces the use of for-of loop instead of a for loop with a simple iteration.\n\n### Why is this bad?\nUsing a for loop with a simple iteration over an array can be replaced with a more concise\nand readable for-of loop. For-of loops are easier to read and less error-prone, as they\neliminate the need for an index variable and manual array access.\n\n### Example\n```javascript\n// Bad\nfor (let i = 0; i < arr.length; i++) {\n  console.log(arr[i]);\n}\n\n// Good\nfor (const item of arr) {\n  console.log(item);\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-for-of"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nEnforces the use of for-of loop instead of a for loop with a simple iteration.\n\n### Why is this bad?\nUsing a for loop with a simple iteration over an array can be replaced with a more concise\nand readable for-of loop. For-of loops are easier to read and less error-prone, as they\neliminate the need for an index variable and manual array access.\n\n### Example\n```javascript\n// Bad\nfor (let i = 0; i < arr.length; i++) {\n  console.log(arr[i]);\n}\n\n// Good\nfor (const item of arr) {\n  console.log(item);\n}\n```\n"
        },
        "typescript/prefer-function-type": {
          "description": "### What it does\nEnforce using function types instead of interfaces with call signatures.\nTypeScript allows for two common ways to declare a type for a function:\n\n- Function type: `() => string`\n- Object type with a signature: `{ (): string }`\n\nThe function type form is generally preferred when possible for being more succinct.\n\nThis rule suggests using a function type instead of an interface or object type literal with a single call signature.\n\n### Example\n```javascript\n// error\ninterface Example {\n  (): string;\n}\n\nfunction foo(example: { (): number }): number {\n  return example();\n}\n\ninterface ReturnsSelf {\n  (arg: string): this;\n}\n\n// success\ntype Example = () => string;\n\nfunction foo(example: () => number): number {\n  return bar();\n}\n\n// returns the function itself, not the `this` argument.\ntype ReturnsSelf = (arg: string) => ReturnsSelf;\n\nfunction foo(bar: { (): string; baz: number }): string {\n  return bar();\n}\n\ninterface Foo {\n  bar: string;\n}\ninterface Bar extends Foo {\n  (): void;\n}\n\n// multiple call signatures (overloads) is allowed:\ninterface Overloaded {\n  (data: string): number;\n  (id: number): string;\n}\n// this is equivalent to Overloaded interface.\ntype Intersection = ((data: string) => number) & ((id: number) => string);\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-function-type"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nEnforce using function types instead of interfaces with call signatures.\nTypeScript allows for two common ways to declare a type for a function:\n\n- Function type: `() => string`\n- Object type with a signature: `{ (): string }`\n\nThe function type form is generally preferred when possible for being more succinct.\n\nThis rule suggests using a function type instead of an interface or object type literal with a single call signature.\n\n### Example\n```javascript\n// error\ninterface Example {\n  (): string;\n}\n\nfunction foo(example: { (): number }): number {\n  return example();\n}\n\ninterface ReturnsSelf {\n  (arg: string): this;\n}\n\n// success\ntype Example = () => string;\n\nfunction foo(example: () => number): number {\n  return bar();\n}\n\n// returns the function itself, not the `this` argument.\ntype ReturnsSelf = (arg: string) => ReturnsSelf;\n\nfunction foo(bar: { (): string; baz: number }): string {\n  return bar();\n}\n\ninterface Foo {\n  bar: string;\n}\ninterface Bar extends Foo {\n  (): void;\n}\n\n// multiple call signatures (overloads) is allowed:\ninterface Overloaded {\n  (data: string): number;\n  (id: number): string;\n}\n// this is equivalent to Overloaded interface.\ntype Intersection = ((data: string) => number) & ((id: number) => string);\n```\n"
        },
        "typescript/prefer-literal-enum-member": {
          "description": "### What it does\nExplicit enum value must only be a literal value (string, number, boolean, etc).\n\n### Why is this bad?\nTypeScript allows the value of an enum member to be many different kinds of valid JavaScript expressions.\nHowever, because enums create their own scope whereby each enum member becomes a variable in that scope, developers are often surprised at the resultant values.\n\n### Example\n```javascript\nconst imOutside = 2;\nconst b = 2;\nenum Foo {\n  outer = imOutside,\n  a = 1,\n  b = a,\n  c = b,\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-literal-enum-member"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nExplicit enum value must only be a literal value (string, number, boolean, etc).\n\n### Why is this bad?\nTypeScript allows the value of an enum member to be many different kinds of valid JavaScript expressions.\nHowever, because enums create their own scope whereby each enum member becomes a variable in that scope, developers are often surprised at the resultant values.\n\n### Example\n```javascript\nconst imOutside = 2;\nconst b = 2;\nenum Foo {\n  outer = imOutside,\n  a = 1,\n  b = a,\n  c = b,\n}\n```\n"
        },
        "typescript/prefer-ts-expect-error": {
          "description": "### What it does\n\nEnforce using @ts-expect-error over @ts-ignore.\n\n### Why is this bad?\nTypeScript allows you to suppress all errors on a line by placing a comment starting with @ts-ignore or @ts-expect-error immediately before the erroring line.\nThe two directives work the same, except @ts-expect-error causes a type error if placed before a line that's not erroring in the first place.\n\nThis means it's easy for @ts-ignores to be forgotten about, and remain in code even after the error they were suppressing is fixed.\nThis is dangerous, as if a new error arises on that line it'll be suppressed by the forgotten about @ts-ignore, and so be missed.\n\n### Example\n```javascript\n// @ts-ignore\nconst str: string = 1;\n\n/**\n* Explaining comment\n*\n* @ts-ignore */\nconst multiLine: number = 'value';\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-ts-expect-error"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforce using @ts-expect-error over @ts-ignore.\n\n### Why is this bad?\nTypeScript allows you to suppress all errors on a line by placing a comment starting with @ts-ignore or @ts-expect-error immediately before the erroring line.\nThe two directives work the same, except @ts-expect-error causes a type error if placed before a line that's not erroring in the first place.\n\nThis means it's easy for @ts-ignores to be forgotten about, and remain in code even after the error they were suppressing is fixed.\nThis is dangerous, as if a new error arises on that line it'll be suppressed by the forgotten about @ts-ignore, and so be missed.\n\n### Example\n```javascript\n// @ts-ignore\nconst str: string = 1;\n\n/**\n* Explaining comment\n*\n* @ts-ignore */\nconst multiLine: number = 'value';\n```\n"
        },
        "typescript/triple-slash-reference": {
          "description": "### What it does\nDisallow certain triple slash directives in favor of ES6-style import declarations.\n\n### Why is this bad?\nUse of triple-slash reference type directives is generally discouraged in favor of ECMAScript Module imports.\n\n### Example\n```javascript\n/// <reference lib=\"code\" />\nglobalThis.value;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/triple-slash-reference"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow certain triple slash directives in favor of ES6-style import declarations.\n\n### Why is this bad?\nUse of triple-slash reference type directives is generally discouraged in favor of ECMAScript Module imports.\n\n### Example\n```javascript\n/// <reference lib=\"code\" />\nglobalThis.value;\n```\n"
        },
        "unicode-bom": {
          "description": "### What it does\n\nRequire or disallow Unicode byte order mark (BOM)\n\n### Why is this bad?\n\nThe Unicode Byte Order Mark (BOM) is used to specify whether code units are big endian or\nlittle endian. That is, whether the most significant or least significant bytes come first.\nUTF-8 does not require a BOM because byte ordering does not matter when characters are a\nsingle byte. Since UTF-8 is the dominant encoding of the web, we make \"never\" the default\noption.\n\n### Example\n```javascript\n﻿var a = 123;\"\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/unicode-bom"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nRequire or disallow Unicode byte order mark (BOM)\n\n### Why is this bad?\n\nThe Unicode Byte Order Mark (BOM) is used to specify whether code units are big endian or\nlittle endian. That is, whether the most significant or least significant bytes come first.\nUTF-8 does not require a BOM because byte ordering does not matter when characters are a\nsingle byte. Since UTF-8 is the dominant encoding of the web, we make \"never\" the default\noption.\n\n### Example\n```javascript\n﻿var a = 123;\"\n```\n"
        },
        "unicorn/catch-error-name": {
          "description": "### What it does\n\nThis rule enforces naming conventions for catch statements.\n\n### Example\n```javascript\n\n// fail\ntry { } catch (foo) { }\n\n// pass\ntry { } catch (error) { }\n\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/catch-error-name"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule enforces naming conventions for catch statements.\n\n### Example\n```javascript\n\n// fail\ntry { } catch (foo) { }\n\n// pass\ntry { } catch (error) { }\n\n```\n"
        },
        "unicorn/empty-brace-spaces": {
          "description": "### What it does\nRemoves the extra spaces or new line characters inside a pair of braces that does not contain additional code.\n\n### Why is this bad?\nThere should be no spaces inside a pair of braces as it affects the overall readability of the code.\n\n### Example\n```javascript\nconst a = {  };\nclass A {\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/empty-brace-spaces"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nRemoves the extra spaces or new line characters inside a pair of braces that does not contain additional code.\n\n### Why is this bad?\nThere should be no spaces inside a pair of braces as it affects the overall readability of the code.\n\n### Example\n```javascript\nconst a = {  };\nclass A {\n}\n```\n"
        },
        "unicorn/error-message": {
          "description": "### What it does\n\nThis rule enforces a `message` value to be passed in when creating an instance of a built-in `Error` object, which leads to more readable and debuggable code.\n\n### Example\n```javascript\n// Fail\nthrow Error()\nthrow new TypeError()\n\n// Pass\nthrow new Error('Unexpected token')\nthrow new TypeError('Number expected')\n\n\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/error-message"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule enforces a `message` value to be passed in when creating an instance of a built-in `Error` object, which leads to more readable and debuggable code.\n\n### Example\n```javascript\n// Fail\nthrow Error()\nthrow new TypeError()\n\n// Pass\nthrow new Error('Unexpected token')\nthrow new TypeError('Number expected')\n\n\n```\n"
        },
        "unicorn/escape-case": {
          "description": "### What it does\n\nEnforces defining escape sequence values with uppercase characters rather than lowercase ones. This promotes readability by making the escaped value more distinguishable from the identifier.\n\n### Example\n```javascript\n// fail\nconst foo = '\\xa9';\nconst foo = '\\ud834';\nconst foo = '\\u{1d306}';\nconst foo = '\\ca';\n// pass\nconst foo = '\\xA9';\nconst foo = '\\uD834';\nconst foo = '\\u{1D306}';\nconst foo = '\\cA';\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/escape-case"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforces defining escape sequence values with uppercase characters rather than lowercase ones. This promotes readability by making the escaped value more distinguishable from the identifier.\n\n### Example\n```javascript\n// fail\nconst foo = '\\xa9';\nconst foo = '\\ud834';\nconst foo = '\\u{1d306}';\nconst foo = '\\ca';\n// pass\nconst foo = '\\xA9';\nconst foo = '\\uD834';\nconst foo = '\\u{1D306}';\nconst foo = '\\cA';\n```\n"
        },
        "unicorn/explicit-length-check": {
          "description": "### What it does\nEnforce explicitly comparing the length or size property of a value.\n\nThe non-zero option can be configured with one of the following:\ngreater-than (default)\n    Enforces non-zero to be checked with: foo.length > 0\nnot-equal\n    Enforces non-zero to be checked with: foo.length !== 0\n### Example\n```javascript\n// fail\nconst isEmpty = !foo.length;\nconst isEmpty = foo.length == 0;\nconst isEmpty = foo.length < 1;\nconst isEmpty = 0 === foo.length;\nconst isEmpty = 0 == foo.length;\nconst isEmpty = 1 > foo.length;\n// Negative style is disallowed too\nconst isEmpty = !(foo.length > 0);\nconst isEmptySet = !foo.size;\n// pass\nconst isEmpty = foo.length === 0;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/explicit-length-check"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nEnforce explicitly comparing the length or size property of a value.\n\nThe non-zero option can be configured with one of the following:\ngreater-than (default)\n    Enforces non-zero to be checked with: foo.length > 0\nnot-equal\n    Enforces non-zero to be checked with: foo.length !== 0\n### Example\n```javascript\n// fail\nconst isEmpty = !foo.length;\nconst isEmpty = foo.length == 0;\nconst isEmpty = foo.length < 1;\nconst isEmpty = 0 === foo.length;\nconst isEmpty = 0 == foo.length;\nconst isEmpty = 1 > foo.length;\n// Negative style is disallowed too\nconst isEmpty = !(foo.length > 0);\nconst isEmptySet = !foo.size;\n// pass\nconst isEmpty = foo.length === 0;\n```\n"
        },
        "unicorn/filename-case": {
          "description": "### What it does\n\nEnforce a case style for filenames.\n\n### Why is this bad?\n\n### Example\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/filename-case"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforce a case style for filenames.\n\n### Why is this bad?\n\n### Example\n```\n"
        },
        "unicorn/new-for-builtins": {
          "description": "### What it does\n\nEnforces the use of `new` for following builtins: `Object`, `Array`, `ArrayBuffer`, `BigInt64Array`, `BigUint64Array`, `DataView`, `Date`, `Error`, `Float32Array`, `Float64Array`, `Function`, `Int8Array`, `Int16Array`, `Int32Array`, `Map`, `WeakMap`, `Set`, `WeakSet`, `Promise`, `RegExp`, `Uint8Array`, `Uint16Array`, `Uint32Array`, `Uint8ClampedArray`, `SharedArrayBuffer`, `Proxy`, `WeakRef`, `FinalizationRegistry`.\n\nDisallows the use of `new` for following builtins: `String`, `Number`, `Boolean`, `Symbol`, `BigInt`.\n\nThese should not use `new` as that would create object wrappers for the primitive values, which is not what you want. However, without `new` they can be useful for coercing a value to that type.\n\n### Why is this bad?\n\nThey work the same, but `new` should be preferred for consistency with other constructors.\n\n\n### Example\n```javascript\n// bad\nconst foo = new String('hello world');\nconst bar = Array(1, 2, 3);\n\n// good\nconst foo = String('hello world');\nconst bar = new Array(1, 2, 3);\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/new-for-builtins"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforces the use of `new` for following builtins: `Object`, `Array`, `ArrayBuffer`, `BigInt64Array`, `BigUint64Array`, `DataView`, `Date`, `Error`, `Float32Array`, `Float64Array`, `Function`, `Int8Array`, `Int16Array`, `Int32Array`, `Map`, `WeakMap`, `Set`, `WeakSet`, `Promise`, `RegExp`, `Uint8Array`, `Uint16Array`, `Uint32Array`, `Uint8ClampedArray`, `SharedArrayBuffer`, `Proxy`, `WeakRef`, `FinalizationRegistry`.\n\nDisallows the use of `new` for following builtins: `String`, `Number`, `Boolean`, `Symbol`, `BigInt`.\n\nThese should not use `new` as that would create object wrappers for the primitive values, which is not what you want. However, without `new` they can be useful for coercing a value to that type.\n\n### Why is this bad?\n\nThey work the same, but `new` should be preferred for consistency with other constructors.\n\n\n### Example\n```javascript\n// bad\nconst foo = new String('hello world');\nconst bar = Array(1, 2, 3);\n\n// good\nconst foo = String('hello world');\nconst bar = new Array(1, 2, 3);\n```\n"
        },
        "unicorn/no-abusive-eslint-disable": {
          "description": "### What it does\nThis rule disallows `eslint-disable` comments that do not specify any rules to disable.\n\n### Why is this bad?\nWhen only one rule should be disabled but the `eslint-disable` comment does not specify any rules, other useful errors will also be silently ignored.\n\n### Example\n```javascript\n// Fail\n/* eslint-disable */\nconsole.log(message);\n\nconsole.log(message); // eslint-disable-line\n\n// eslint-disable-next-line\nconsole.log(message);\n\n// Pass\n/* eslint-disable no-console */\nconsole.log(message);\n\nconsole.log(message); // eslint-disable-line no-console\n\n// eslint-disable-next-line no-console\nconsole.log(message);\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-abusive-eslint-disable"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nThis rule disallows `eslint-disable` comments that do not specify any rules to disable.\n\n### Why is this bad?\nWhen only one rule should be disabled but the `eslint-disable` comment does not specify any rules, other useful errors will also be silently ignored.\n\n### Example\n```javascript\n// Fail\n/* eslint-disable */\nconsole.log(message);\n\nconsole.log(message); // eslint-disable-line\n\n// eslint-disable-next-line\nconsole.log(message);\n\n// Pass\n/* eslint-disable no-console */\nconsole.log(message);\n\nconsole.log(message); // eslint-disable-line no-console\n\n// eslint-disable-next-line no-console\nconsole.log(message);\n```\n"
        },
        "unicorn/no-anonymous-default-export": {
          "description": "### What it does\nDisallow anonymous functions and classes as the default export\n\n### Why is this bad?\nNaming default exports improves codebase searchability by ensuring consistent identifier use for a module's default export, both where it's declared and where it's imported.\n\n### Example\n```javascript\n// Bad\nexport default class {}\nexport default function () {}\nexport default () => {};\nmodule.exports = class {};\nmodule.exports = function () {};\nmodule.exports = () => {};\n\n// Good\nexport default class Foo {}\nexport default function foo () {}\n\nconst foo = () => {};\nexport default foo;\n\nmodule.exports = class Foo {};\nmodule.exports = function foo () {};\n\nconst foo = () => {};\nmodule.exports = foo;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-anonymous-default-export"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow anonymous functions and classes as the default export\n\n### Why is this bad?\nNaming default exports improves codebase searchability by ensuring consistent identifier use for a module's default export, both where it's declared and where it's imported.\n\n### Example\n```javascript\n// Bad\nexport default class {}\nexport default function () {}\nexport default () => {};\nmodule.exports = class {};\nmodule.exports = function () {};\nmodule.exports = () => {};\n\n// Good\nexport default class Foo {}\nexport default function foo () {}\n\nconst foo = () => {};\nexport default foo;\n\nmodule.exports = class Foo {};\nmodule.exports = function foo () {};\n\nconst foo = () => {};\nmodule.exports = foo;\n```\n"
        },
        "unicorn/no-array-for-each": {
          "description": "### What it does\n\nForbids the use of `Array#forEach` in favor of a for loop.\n\n### Why is this bad?\n\nBenefits of [`for…of` statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) over the `forEach` method can include:\n\n- Faster\n- Better readability\n- Ability to exit early with `break` or `return`\n\nAdditionally, using `for…of` has great benefits if you are using TypeScript, because it does not cause a function boundary to be crossed. This means that type-narrowing earlier on in the current scope will work properly while inside of the loop (without having to re-type-narrow). Furthermore, any mutated variables inside of the loop will picked up on for the purposes of determining if a variable is being used.\n\n### Example\n```javascript\n// Bad\nconst foo = [1, 2, 3];\nfoo.forEach((element) => { /* ... */ });\n\n// Good\nconst foo = [1, 2, 3];\nfor (const element of foo) { /* ... */ }\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-array-for-each"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nForbids the use of `Array#forEach` in favor of a for loop.\n\n### Why is this bad?\n\nBenefits of [`for…of` statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) over the `forEach` method can include:\n\n- Faster\n- Better readability\n- Ability to exit early with `break` or `return`\n\nAdditionally, using `for…of` has great benefits if you are using TypeScript, because it does not cause a function boundary to be crossed. This means that type-narrowing earlier on in the current scope will work properly while inside of the loop (without having to re-type-narrow). Furthermore, any mutated variables inside of the loop will picked up on for the purposes of determining if a variable is being used.\n\n### Example\n```javascript\n// Bad\nconst foo = [1, 2, 3];\nfoo.forEach((element) => { /* ... */ });\n\n// Good\nconst foo = [1, 2, 3];\nfor (const element of foo) { /* ... */ }\n```\n"
        },
        "unicorn/no-array-reduce": {
          "description": "### What it does\n\nDisallow `Array#reduce()` and `Array#reduceRight()`.\n\n### Why is this bad?\n\n`Array#reduce()` and `Array#reduceRight()` usually result in [hard-to-read](https://twitter.com/jaffathecake/status/1213077702300852224) and [less performant](https://www.richsnapp.com/article/2019/06-09-reduce-spread-anti-pattern) code. In almost every case, it can be replaced by `.map`, `.filter`, or a `for-of` loop.\n\nIt's only somewhat useful in the rare case of summing up numbers, which is allowed by default.\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-array-reduce"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow `Array#reduce()` and `Array#reduceRight()`.\n\n### Why is this bad?\n\n`Array#reduce()` and `Array#reduceRight()` usually result in [hard-to-read](https://twitter.com/jaffathecake/status/1213077702300852224) and [less performant](https://www.richsnapp.com/article/2019/06-09-reduce-spread-anti-pattern) code. In almost every case, it can be replaced by `.map`, `.filter`, or a `for-of` loop.\n\nIt's only somewhat useful in the rare case of summing up numbers, which is allowed by default.\n\n### Example\n```javascript\n```\n"
        },
        "unicorn/no-await-expression-member": {
          "description": "### What it does\n\nThis rule disallows member access from await expression\n\n### Why is this bad?\n\nWhen accessing a member from an await expression,\nthe await expression has to be parenthesized, which is not readable.\n\n### Example\n```javascript\n// Bad\nconst secondElement = (await getArray())[1];\n\n// Good\nconst [, secondElement] = await getArray();\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-await-expression-member"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule disallows member access from await expression\n\n### Why is this bad?\n\nWhen accessing a member from an await expression,\nthe await expression has to be parenthesized, which is not readable.\n\n### Example\n```javascript\n// Bad\nconst secondElement = (await getArray())[1];\n\n// Good\nconst [, secondElement] = await getArray();\n```\n"
        },
        "unicorn/no-await-in-promise-methods": {
          "description": "### What it does\n\nDisallow using `await` in `Promise` method parameters\n\n### Why is this bad?\n\nUsing `await` on promises passed as arguments to `Promise.all()`, `Promise.allSettled()`, `Promise.any()`, or `Promise.race()` is likely a mistake.\n\n### Example\nBad\n\n```js\nPromise.all([await promise, anotherPromise]);\nPromise.allSettled([await promise, anotherPromise]);\nPromise.any([await promise, anotherPromise]);\nPromise.race([await promise, anotherPromise]);\n```\n\nGood\n\n```js\nPromise.all([promise, anotherPromise]);\nPromise.allSettled([promise, anotherPromise]);\nPromise.any([promise, anotherPromise]);\nPromise.race([promise, anotherPromise]);\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-await-in-promise-methods"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow using `await` in `Promise` method parameters\n\n### Why is this bad?\n\nUsing `await` on promises passed as arguments to `Promise.all()`, `Promise.allSettled()`, `Promise.any()`, or `Promise.race()` is likely a mistake.\n\n### Example\nBad\n\n```js\nPromise.all([await promise, anotherPromise]);\nPromise.allSettled([await promise, anotherPromise]);\nPromise.any([await promise, anotherPromise]);\nPromise.race([await promise, anotherPromise]);\n```\n\nGood\n\n```js\nPromise.all([promise, anotherPromise]);\nPromise.allSettled([promise, anotherPromise]);\nPromise.any([promise, anotherPromise]);\nPromise.race([promise, anotherPromise]);\n```\n"
        },
        "unicorn/no-console-spaces": {
          "description": "### What it does\n\nDisallows leading/trailing space inside `console.log()` and similar methods.\n\n### Why is this bad?\n\nThe `console.log()` method and similar methods join the parameters with a space so adding a leading/trailing space to a parameter, results in two spaces being added.\n\n### Example\n```javascript\n\n// Bad\nconsole.log(\"abc \", \"def\");\n\n// Good\nconsole.log(\"abc\", \"def\");\n\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-console-spaces"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallows leading/trailing space inside `console.log()` and similar methods.\n\n### Why is this bad?\n\nThe `console.log()` method and similar methods join the parameters with a space so adding a leading/trailing space to a parameter, results in two spaces being added.\n\n### Example\n```javascript\n\n// Bad\nconsole.log(\"abc \", \"def\");\n\n// Good\nconsole.log(\"abc\", \"def\");\n\n```\n"
        },
        "unicorn/no-document-cookie": {
          "description": "### What it does\n\nDisallow direct use of [`document.cookie`](https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie).\n\n### Why is this bad?\n\nIt's not recommended to use [`document.cookie`](https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie) directly as it's easy to get the string wrong. Instead, you should use the [Cookie Store API](https://developer.mozilla.org/en-US/docs/Web/API/Cookie_Store_API) or a [cookie library](https://www.npmjs.com/search?q=cookie).\n\n### Example\n```javascript\n// bad\ndocument.cookie =\n    'foo=bar' +\n    '; Path=/' +\n    '; Domain=example.com' +\n    '; expires=Fri, 31 Dec 9999 23:59:59 GMT' +\n    '; Secure';\n\n// good\nawait cookieStore.set({\n\tname: 'foo',\n\tvalue: 'bar',\n\texpires: Date.now() + 24 * 60 * 60 * 1000,\n\tdomain: 'example.com'\n});\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-document-cookie"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow direct use of [`document.cookie`](https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie).\n\n### Why is this bad?\n\nIt's not recommended to use [`document.cookie`](https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie) directly as it's easy to get the string wrong. Instead, you should use the [Cookie Store API](https://developer.mozilla.org/en-US/docs/Web/API/Cookie_Store_API) or a [cookie library](https://www.npmjs.com/search?q=cookie).\n\n### Example\n```javascript\n// bad\ndocument.cookie =\n    'foo=bar' +\n    '; Path=/' +\n    '; Domain=example.com' +\n    '; expires=Fri, 31 Dec 9999 23:59:59 GMT' +\n    '; Secure';\n\n// good\nawait cookieStore.set({\n\tname: 'foo',\n\tvalue: 'bar',\n\texpires: Date.now() + 24 * 60 * 60 * 1000,\n\tdomain: 'example.com'\n});\n```\n"
        },
        "unicorn/no-empty-file": {
          "description": "### What it does\n\n\nDisallows any files only containing the following:\n - Whitespace\n - Comments\n - Directives\n - Empty statements\n - Empty blocks\n - Hashbang\n\n### Why is this bad?\n\nMeaningless files clutter a codebase.\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-empty-file"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\n\nDisallows any files only containing the following:\n - Whitespace\n - Comments\n - Directives\n - Empty statements\n - Empty blocks\n - Hashbang\n\n### Why is this bad?\n\nMeaningless files clutter a codebase.\n\n"
        },
        "unicorn/no-hex-escape": {
          "description": "### What it does\n\nEnforces a convention of using [Unicode escapes](https://mathiasbynens.be/notes/javascript-escapes#unicode) instead of [hexadecimal escapes](https://mathiasbynens.be/notes/javascript-escapes#hexadecimal) for consistency and clarity.\n\n### Example\n```javascript\n// fail\nconst foo = '\\x1B';\nconst foo = `\\x1B${bar}`;\n\n// pass\nconst foo = '\\u001B';\nconst foo = `\\u001B${bar}`;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-hex-escape"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforces a convention of using [Unicode escapes](https://mathiasbynens.be/notes/javascript-escapes#unicode) instead of [hexadecimal escapes](https://mathiasbynens.be/notes/javascript-escapes#hexadecimal) for consistency and clarity.\n\n### Example\n```javascript\n// fail\nconst foo = '\\x1B';\nconst foo = `\\x1B${bar}`;\n\n// pass\nconst foo = '\\u001B';\nconst foo = `\\u001B${bar}`;\n```\n"
        },
        "unicorn/no-instanceof-array": {
          "description": "### What it does\nRequire `Array.isArray()` instead of `instanceof Array`.\n\n### Why is this bad?\nThe instanceof Array check doesn't work across realms/contexts, for example, frames/windows in browsers or the vm module in Node.js.\n\n### Example\n```javascript\narray instanceof Array;\n[1,2,3] instanceof Array;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-instanceof-array"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nRequire `Array.isArray()` instead of `instanceof Array`.\n\n### Why is this bad?\nThe instanceof Array check doesn't work across realms/contexts, for example, frames/windows in browsers or the vm module in Node.js.\n\n### Example\n```javascript\narray instanceof Array;\n[1,2,3] instanceof Array;\n```\n"
        },
        "unicorn/no-invalid-remove-event-listener": {
          "description": "### What it does\n\nIt warns when you use a non-function value as the second argument of `removeEventListener`.\n\n### Why is this bad?\n\nThe [`removeEventListener`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener) function must be called with a reference to the same function that was passed to [`addEventListener`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener). Calling `removeEventListener` with an inline function or the result of an inline `.bind()` call is indicative of an error, and won't actually remove the listener.\n\n### Example\n```javascript\n// Bad\nel.removeEventListener('click', () => {});\nel.removeEventListener('click', function () {});\n\n// Good\nel.removeEventListener('click', handler);\nel.removeEventListener('click', handler.bind(this));\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-invalid-remove-event-listener"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nIt warns when you use a non-function value as the second argument of `removeEventListener`.\n\n### Why is this bad?\n\nThe [`removeEventListener`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener) function must be called with a reference to the same function that was passed to [`addEventListener`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener). Calling `removeEventListener` with an inline function or the result of an inline `.bind()` call is indicative of an error, and won't actually remove the listener.\n\n### Example\n```javascript\n// Bad\nel.removeEventListener('click', () => {});\nel.removeEventListener('click', function () {});\n\n// Good\nel.removeEventListener('click', handler);\nel.removeEventListener('click', handler.bind(this));\n```\n"
        },
        "unicorn/no-lonely-if": {
          "description": "### What it does\n\nDisallow `if` statements as the only statement in `if` blocks without `else`.\n\n### Why is this bad?\n\nIt can be confusing to have an `if` statement without an `else` clause as the only statement in an `if` block.\n\n### Example\n```javascript\n// Bad\nif (foo) {\n        if (bar) {\n    }\n}\nif (foo) if (bar) baz();\n\n// Good\nif (foo && bar) {\n}\nif (foo && bar) baz();\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-lonely-if"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow `if` statements as the only statement in `if` blocks without `else`.\n\n### Why is this bad?\n\nIt can be confusing to have an `if` statement without an `else` clause as the only statement in an `if` block.\n\n### Example\n```javascript\n// Bad\nif (foo) {\n        if (bar) {\n    }\n}\nif (foo) if (bar) baz();\n\n// Good\nif (foo && bar) {\n}\nif (foo && bar) baz();\n```\n"
        },
        "unicorn/no-magic-array-flat-depth": {
          "description": "### What it does\n\nDisallow magic numbers for `Array.prototype.flat` depth.\n\n### Why is this bad?\n\nMagic numbers are hard to understand and maintain. When calling `Array.prototype.flat`, it is usually called with `1` or infinity. If you are using a different number, it is better to add a comment explaining the depth.\n\n### Example\n```javascript\n// Bad\narray.flat(2);\narray.flat(20);\n//\n// Good\narray.flat(2 /* explanation */);\narray.flat(1);\narray.flat();\narray.flat(Infinity);\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-magic-array-flat-depth"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow magic numbers for `Array.prototype.flat` depth.\n\n### Why is this bad?\n\nMagic numbers are hard to understand and maintain. When calling `Array.prototype.flat`, it is usually called with `1` or infinity. If you are using a different number, it is better to add a comment explaining the depth.\n\n### Example\n```javascript\n// Bad\narray.flat(2);\narray.flat(20);\n//\n// Good\narray.flat(2 /* explanation */);\narray.flat(1);\narray.flat();\narray.flat(Infinity);\n```\n"
        },
        "unicorn/no-negated-condition": {
          "description": "### What it does\n\nDisallow negated conditions.\n\n### Why is this bad?\n\nNegated conditions are more difficult to understand. Code can be made more readable by inverting the condition.\n\n### Example\n```javascript\n// Bad\n\nif (!a) {\n\tdoSomethingC();\n} else {\n\tdoSomethingB();\n}\n\n!a ? doSomethingC() : doSomethingB()\n\n// Good\n\nif (a) {\n\tdoSomethingB();\n} else {\n\tdoSomethingC();\n}\n\na ? doSomethingB() : doSomethingC()\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-negated-condition"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow negated conditions.\n\n### Why is this bad?\n\nNegated conditions are more difficult to understand. Code can be made more readable by inverting the condition.\n\n### Example\n```javascript\n// Bad\n\nif (!a) {\n\tdoSomethingC();\n} else {\n\tdoSomethingB();\n}\n\n!a ? doSomethingC() : doSomethingB()\n\n// Good\n\nif (a) {\n\tdoSomethingB();\n} else {\n\tdoSomethingC();\n}\n\na ? doSomethingB() : doSomethingC()\n```\n"
        },
        "unicorn/no-negation-in-equality-check": {
          "description": "### What it does\n\nDisallow negated expressions on the left of (in)equality checks.\n\n### Why is this bad?\n\nA negated expression on the left of an (in)equality check is likely a mistake from trying to negate the whole condition.\n\n### Example\n```javascript\n// Bad\n\nif (!foo === bar) {}\n\nif (!foo !== bar) {}\n\n// Good\n\nif (foo !== bar) {}\n\nif (!(foo === bar)) {}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-negation-in-equality-check"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow negated expressions on the left of (in)equality checks.\n\n### Why is this bad?\n\nA negated expression on the left of an (in)equality check is likely a mistake from trying to negate the whole condition.\n\n### Example\n```javascript\n// Bad\n\nif (!foo === bar) {}\n\nif (!foo !== bar) {}\n\n// Good\n\nif (foo !== bar) {}\n\nif (!(foo === bar)) {}\n```\n"
        },
        "unicorn/no-nested-ternary": {
          "description": "### What it does\nThis rule disallows deeply nested ternary expressions.\nNested ternary expressions that are only one level deep and wrapped in parentheses are allowed.\n\n### Why is this bad?\nNesting ternary expressions can make code more difficult to understand.\n\n### Example\n```javascript\n// Fail\nconst foo = i > 5 ? i < 100 ? true : false : true;\nconst foo = i > 5 ? true : (i < 100 ? true : (i < 1000 ? true : false));\n\n// Pass\nconst foo = i > 5 ? (i < 100 ? true : false) : true;\nconst foo = i > 5 ? (i < 100 ? true : false) : (i < 100 ? true : false);\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-nested-ternary"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nThis rule disallows deeply nested ternary expressions.\nNested ternary expressions that are only one level deep and wrapped in parentheses are allowed.\n\n### Why is this bad?\nNesting ternary expressions can make code more difficult to understand.\n\n### Example\n```javascript\n// Fail\nconst foo = i > 5 ? i < 100 ? true : false : true;\nconst foo = i > 5 ? true : (i < 100 ? true : (i < 1000 ? true : false));\n\n// Pass\nconst foo = i > 5 ? (i < 100 ? true : false) : true;\nconst foo = i > 5 ? (i < 100 ? true : false) : (i < 100 ? true : false);\n```\n"
        },
        "unicorn/no-new-array": {
          "description": "### What it does\n\nDisallow `new Array()`.\n\n### Why is this bad?\n\nWhen using the `Array` constructor with one argument, it's not clear whether the argument is meant to be the length of the array or the only element.\n\n### Example\n```javascript\n// bad\nconst array = new Array(1);\nconst array = new Array(42);\nconst array = new Array(foo);\n\n// good\nconst array = Array.from({ length: 42 });\nconst array = [42];\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-new-array"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow `new Array()`.\n\n### Why is this bad?\n\nWhen using the `Array` constructor with one argument, it's not clear whether the argument is meant to be the length of the array or the only element.\n\n### Example\n```javascript\n// bad\nconst array = new Array(1);\nconst array = new Array(42);\nconst array = new Array(foo);\n\n// good\nconst array = Array.from({ length: 42 });\nconst array = [42];\n```\n"
        },
        "unicorn/no-new-buffer": {
          "description": "### What it does\n\nDisallows the deprecated `new Buffer()` constructor.\n\n### Why is this bad?\n\nEnforces the use of [Buffer.from](https://nodejs.org/api/buffer.html#static-method-bufferfromarray) and [Buffer.alloc()](https://nodejs.org/api/buffer.html#static-method-bufferallocsize-fill-encoding) instead of [new Buffer()](https://nodejs.org/api/buffer.html#new-bufferarray), which has been deprecated since Node.js 4.\n\n### Example\n```javascript\n// Bad\nconst buffer = new Buffer(10);\n\n// Good\nconst buffer = Buffer.alloc(10);\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-new-buffer"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallows the deprecated `new Buffer()` constructor.\n\n### Why is this bad?\n\nEnforces the use of [Buffer.from](https://nodejs.org/api/buffer.html#static-method-bufferfromarray) and [Buffer.alloc()](https://nodejs.org/api/buffer.html#static-method-bufferallocsize-fill-encoding) instead of [new Buffer()](https://nodejs.org/api/buffer.html#new-bufferarray), which has been deprecated since Node.js 4.\n\n### Example\n```javascript\n// Bad\nconst buffer = new Buffer(10);\n\n// Good\nconst buffer = Buffer.alloc(10);\n```\n"
        },
        "unicorn/no-null": {
          "description": "### What it does\n\nDisallow the use of the `null` literal, to encourage using `undefined` instead.\n\n### Why is this bad?\n\nThere are some reasons for using `undefined` instead of `null`.\n- From experience, most developers use `null` and `undefined` inconsistently and interchangeably, and few know when to use which.\n- Supporting both `null` and `undefined` complicates input validation.\n- Using `null` makes TypeScript types more verbose: `type A = {foo?: string | null}` vs `type A = {foo?: string}`.\n\n### Example\n```javascript\n// Bad\nlet foo = null;\n\n// Good\nlet foo\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-null"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow the use of the `null` literal, to encourage using `undefined` instead.\n\n### Why is this bad?\n\nThere are some reasons for using `undefined` instead of `null`.\n- From experience, most developers use `null` and `undefined` inconsistently and interchangeably, and few know when to use which.\n- Supporting both `null` and `undefined` complicates input validation.\n- Using `null` makes TypeScript types more verbose: `type A = {foo?: string | null}` vs `type A = {foo?: string}`.\n\n### Example\n```javascript\n// Bad\nlet foo = null;\n\n// Good\nlet foo\n```\n"
        },
        "unicorn/no-object-as-default-parameter": {
          "description": "### What it does\n\nDisallow the use of an object literal as a default value for a parameter.\n\n### Why is this bad?\n\nDefault parameters should not be passed to a function through an object literal. The `foo = {a: false}` parameter works fine if only used with one option. As soon as additional options are added, you risk replacing the whole `foo = {a: false, b: true}` object when passing only one option: `{a: true}`. For this reason, object destructuring should be used instead.\n\n### Example\n```javascript\n// Bad\nfunction foo(foo = {a: false}) {}\n\n// Good\nfunction foo({a = false} = {}) {}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-object-as-default-parameter"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow the use of an object literal as a default value for a parameter.\n\n### Why is this bad?\n\nDefault parameters should not be passed to a function through an object literal. The `foo = {a: false}` parameter works fine if only used with one option. As soon as additional options are added, you risk replacing the whole `foo = {a: false, b: true}` object when passing only one option: `{a: true}`. For this reason, object destructuring should be used instead.\n\n### Example\n```javascript\n// Bad\nfunction foo(foo = {a: false}) {}\n\n// Good\nfunction foo({a = false} = {}) {}\n```\n"
        },
        "unicorn/no-process-exit": {
          "description": "### What it does\nDisallow `process.exit()`.\n\n### Why is this bad?\nOnly use `process.exit()` in CLI apps. Throw an error instead.\n\n### Example\n```javascript\n// Bad\nif (problem) process.exit(1);\n\n// Good\nif (problem) throw new Error(\"message\");\n\n#! /usr/bin/env node\nif (problem) process.exit(1);\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-process-exit"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow `process.exit()`.\n\n### Why is this bad?\nOnly use `process.exit()` in CLI apps. Throw an error instead.\n\n### Example\n```javascript\n// Bad\nif (problem) process.exit(1);\n\n// Good\nif (problem) throw new Error(\"message\");\n\n#! /usr/bin/env node\nif (problem) process.exit(1);\n```\n"
        },
        "unicorn/no-single-promise-in-promise-methods": {
          "description": "### What it does\n\nDisallow passing single-element arrays to Promise methods\n\n### Why is this bad?\n\nPassing a single-element array to `Promise.all()`, `Promise.any()`, or `Promise.race()` is likely a mistake.\n\n\n### Example\n\nBad\n```js\nconst foo = await Promise.all([promise]);\nconst foo = await Promise.any([promise]);\nconst foo = await Promise.race([promise]);\nconst promise = Promise.all([nonPromise]);\n```\n\nGood\n```js\nconst foo = await promise;\nconst promise = Promise.resolve(nonPromise);\nconst foo = await Promise.all(promises);\nconst foo = await Promise.any([promise, anotherPromise]);\nconst [{ value: foo, reason: error }] = await Promise.allSettled([promise]);\n```\n\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-single-promise-in-promise-methods"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow passing single-element arrays to Promise methods\n\n### Why is this bad?\n\nPassing a single-element array to `Promise.all()`, `Promise.any()`, or `Promise.race()` is likely a mistake.\n\n\n### Example\n\nBad\n```js\nconst foo = await Promise.all([promise]);\nconst foo = await Promise.any([promise]);\nconst foo = await Promise.race([promise]);\nconst promise = Promise.all([nonPromise]);\n```\n\nGood\n```js\nconst foo = await promise;\nconst promise = Promise.resolve(nonPromise);\nconst foo = await Promise.all(promises);\nconst foo = await Promise.any([promise, anotherPromise]);\nconst [{ value: foo, reason: error }] = await Promise.allSettled([promise]);\n```\n\n"
        },
        "unicorn/no-static-only-class": {
          "description": "### What it does\n\nDisallow classes that only have static members.\n\n### Why is this bad?\n\nA class with only static members could just be an object instead.\n\n\n### Example\n```javascript\n// Bad\nclass A {\n    static a() {}\n}\n\n// Good\nclass A {\n    static a() {}\n\n    constructor() {}\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-static-only-class"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow classes that only have static members.\n\n### Why is this bad?\n\nA class with only static members could just be an object instead.\n\n\n### Example\n```javascript\n// Bad\nclass A {\n    static a() {}\n}\n\n// Good\nclass A {\n    static a() {}\n\n    constructor() {}\n}\n```\n"
        },
        "unicorn/no-thenable": {
          "description": "### What it does\ndisallow `then` property\n\n### Why is this bad?\nIf an object is defined as \"thenable\", once it's accidentally\nused in an await expression, it may cause problems:\n\n\n### Example\n```javascript\nconst foo = {\n    unicorn: 1,\n    then() {},\n};\n\nconst {unicorn} = await foo;\n\nconsole.log('after'); //<- This will never execute\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-thenable"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\ndisallow `then` property\n\n### Why is this bad?\nIf an object is defined as \"thenable\", once it's accidentally\nused in an await expression, it may cause problems:\n\n\n### Example\n```javascript\nconst foo = {\n    unicorn: 1,\n    then() {},\n};\n\nconst {unicorn} = await foo;\n\nconsole.log('after'); //<- This will never execute\n```\n"
        },
        "unicorn/no-this-assignment": {
          "description": "### What it does\n\nDisallow assigning `this` to a variable.\n\n### Why is this bad?\n\nAssigning `this` to a variable is unnecessary and confusing.\n\n### Example\n```javascript\n// fail\nconst foo = this;\nclass Bar {\n\tmethod() {\n\t\tfoo.baz();\n\t}\n}\n\nnew Bar().method();\n\n// pass\nclass Bar {\n\tconstructor(fooInstance) {\n\t\tthis.fooInstance = fooInstance;\n\t}\n\tmethod() {\n\t\tthis.fooInstance.baz();\n\t}\n}\n\nnew Bar(this).method();\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-this-assignment"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow assigning `this` to a variable.\n\n### Why is this bad?\n\nAssigning `this` to a variable is unnecessary and confusing.\n\n### Example\n```javascript\n// fail\nconst foo = this;\nclass Bar {\n\tmethod() {\n\t\tfoo.baz();\n\t}\n}\n\nnew Bar().method();\n\n// pass\nclass Bar {\n\tconstructor(fooInstance) {\n\t\tthis.fooInstance = fooInstance;\n\t}\n\tmethod() {\n\t\tthis.fooInstance.baz();\n\t}\n}\n\nnew Bar(this).method();\n```\n"
        },
        "unicorn/no-typeof-undefined": {
          "description": "### What it does\n\nDisallow `typeof` comparisons with `undefined`.\n\n### Why is this bad?\n\nChecking if a value is `undefined` by using `typeof value === 'undefined'` is needlessly verbose. It's generally better to compare against `undefined` directly. The only time `typeof` is needed is when a global variable potentially does not exists, in which case, using `globalThis.value === undefined` may be better.\n\n\n### Example\n```javascript\n// bad\ntypeof foo === 'undefined';\n\n// good\nfoo === undefined;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-typeof-undefined"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow `typeof` comparisons with `undefined`.\n\n### Why is this bad?\n\nChecking if a value is `undefined` by using `typeof value === 'undefined'` is needlessly verbose. It's generally better to compare against `undefined` directly. The only time `typeof` is needed is when a global variable potentially does not exists, in which case, using `globalThis.value === undefined` may be better.\n\n\n### Example\n```javascript\n// bad\ntypeof foo === 'undefined';\n\n// good\nfoo === undefined;\n```\n"
        },
        "unicorn/no-unnecessary-await": {
          "description": "### What it does\nDisallow awaiting on non-promise values.\n\n### Why is this bad?\nThe `await` operator should only be used on `Promise` values.\n\n### Example\n```javascript\nawait await promise;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-unnecessary-await"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallow awaiting on non-promise values.\n\n### Why is this bad?\nThe `await` operator should only be used on `Promise` values.\n\n### Example\n```javascript\nawait await promise;\n```\n"
        },
        "unicorn/no-unreadable-array-destructuring": {
          "description": "### What it does\n\nDisallow unreadable array destructuring\n\n### Why is this bad?\n\nDestructuring is very useful, but it can also make some code harder to read.\nThis rule prevents ignoring consecutive values when destructuring from an array.\n\n### Example\n```javascript\n// Bad\nconst [,, foo] = parts;\n\n// Good\nconst [foo] = parts;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-unreadable-array-destructuring"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow unreadable array destructuring\n\n### Why is this bad?\n\nDestructuring is very useful, but it can also make some code harder to read.\nThis rule prevents ignoring consecutive values when destructuring from an array.\n\n### Example\n```javascript\n// Bad\nconst [,, foo] = parts;\n\n// Good\nconst [foo] = parts;\n```\n"
        },
        "unicorn/no-unreadable-iife": {
          "description": "### What it does\nThis rule disallows IIFEs with a parenthesized arrow function body.\n\n### Why is this bad?\nIIFEs with a parenthesized arrow function body are unreadable.\n\n### Example\n```javascript\n// Fail\nconst foo = (bar => (bar ? bar.baz : baz))(getBar());\n\nconst foo = ((bar, baz) => ({bar, baz}))(bar, baz);\n\n// Pass\nconst bar = getBar();\nconst foo = bar ? bar.baz : baz;\n\nconst getBaz = bar => (bar ? bar.baz : baz);\nconst foo = getBaz(getBar());\n\nconst foo = (bar => {\n    return bar ? bar.baz : baz;\n})(getBar());\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-unreadable-iife"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nThis rule disallows IIFEs with a parenthesized arrow function body.\n\n### Why is this bad?\nIIFEs with a parenthesized arrow function body are unreadable.\n\n### Example\n```javascript\n// Fail\nconst foo = (bar => (bar ? bar.baz : baz))(getBar());\n\nconst foo = ((bar, baz) => ({bar, baz}))(bar, baz);\n\n// Pass\nconst bar = getBar();\nconst foo = bar ? bar.baz : baz;\n\nconst getBaz = bar => (bar ? bar.baz : baz);\nconst foo = getBaz(getBar());\n\nconst foo = (bar => {\n    return bar ? bar.baz : baz;\n})(getBar());\n```\n"
        },
        "unicorn/no-useless-fallback-in-spread": {
          "description": "### What it does\n\nDisallow useless fallback when spreading in object literals.\n\n### Why is this bad?\n\nSpreading [falsy values](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) in object literals won't add any unexpected properties, so it's unnecessary to add an empty object as fallback.\n\n### Example\n```javascript\n// bad\nconst object = { ...(foo || {}) }\n\n// good\nconst object = { ...foo }\nconst object = { ...(foo || { not: \"empty\" }) }\n\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-useless-fallback-in-spread"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallow useless fallback when spreading in object literals.\n\n### Why is this bad?\n\nSpreading [falsy values](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) in object literals won't add any unexpected properties, so it's unnecessary to add an empty object as fallback.\n\n### Example\n```javascript\n// bad\nconst object = { ...(foo || {}) }\n\n// good\nconst object = { ...foo }\nconst object = { ...(foo || { not: \"empty\" }) }\n\n```\n"
        },
        "unicorn/no-useless-length-check": {
          "description": "### What it does\nIt checks for an unnecessary array length check in a logical expression\nThe cases are:\n array.length === 0 || array.every(Boolean) (array.every returns true if array is has elements)\n array.length > 0 && array.some(Boolean) (array.some returns false if array is empty)\n\n### Why is this bad?\nAn extra unnecessary length check is done\n\n### Example\n```javascript\nif(array.length === 0 || array.every(Boolean)){\n   do something!\n}\n\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-useless-length-check"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nIt checks for an unnecessary array length check in a logical expression\nThe cases are:\n array.length === 0 || array.every(Boolean) (array.every returns true if array is has elements)\n array.length > 0 && array.some(Boolean) (array.some returns false if array is empty)\n\n### Why is this bad?\nAn extra unnecessary length check is done\n\n### Example\n```javascript\nif(array.length === 0 || array.every(Boolean)){\n   do something!\n}\n\n```\n"
        },
        "unicorn/no-useless-promise-resolve-reject": {
          "description": "### What it does\n\nDisallows returning values wrapped in `Promise.resolve` or `Promise.reject` in an async function or a `Promise#then`/`catch`/`finally` callback.\n\n### Why is this bad?\n\nWrapping a return value in `Promise.resolve` in an async function or a `Promise#then`/`catch`/`finally` callback is unnecessary as all return values in async functions and promise callback functions are already wrapped in a `Promise`. Similarly, returning an error wrapped in `Promise.reject` is equivalent to simply `throw`ing the error. This is the same for `yield`ing in async generators as well.\n\n### Example\n```javascript\n// bad\nasync () => Promise.resolve(bar);\n\n// good\nasync () => bar;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-useless-promise-resolve-reject"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallows returning values wrapped in `Promise.resolve` or `Promise.reject` in an async function or a `Promise#then`/`catch`/`finally` callback.\n\n### Why is this bad?\n\nWrapping a return value in `Promise.resolve` in an async function or a `Promise#then`/`catch`/`finally` callback is unnecessary as all return values in async functions and promise callback functions are already wrapped in a `Promise`. Similarly, returning an error wrapped in `Promise.reject` is equivalent to simply `throw`ing the error. This is the same for `yield`ing in async generators as well.\n\n### Example\n```javascript\n// bad\nasync () => Promise.resolve(bar);\n\n// good\nasync () => bar;\n```\n"
        },
        "unicorn/no-useless-spread": {
          "description": "### What it does\n\nDisallows using spread syntax in following, unnecessary cases:\n\n  - Spread an array literal as elements of an array literal\n  - Spread an array literal as arguments of a call or a `new` call\n  - Spread an object literal as properties of an object literal\n  - Use spread syntax to clone an array created inline\n\n### Why is this bad?\n\n- The following builtins accept an iterable, so it's unnecessary to convert the iterable to an array:\n\n  - `Map` constructor\n  - `WeakMap` constructor\n  - `Set` constructor\n  - `WeakSet` constructor\n  - `TypedArray` constructor\n  - `Array.from(…)`\n  - `TypedArray.from(…)`\n  - `Promise.{all,allSettled,any,race}(…)`\n  - `Object.fromEntries(…)`\n\n- `for…of` loop can iterate over any iterable object not just array, so it's unnecessary to convert the iterable to an array.\n\n- `yield*` can delegate to another iterable, so it's unnecessary to convert the iterable to an array.\n\n### Example\n```javascript\n\nconst array = [firstElement, ...[secondElement], thirdElement];\nconst object = {firstProperty, ...{secondProperty}, thirdProperty};\nfoo(firstArgument, ...[secondArgument], thirdArgument);\nconst object = new Foo(firstArgument, ...[secondArgument], thirdArgument);\nconst set = new Set([...iterable]);\nconst results = await Promise.all([...iterable]);\nfor (const foo of [...set]);\nfunction * foo() {\n\tyield * [...anotherGenerator()];\n}\nfunction foo(bar) {\n\treturn [\n\t\t...bar.map(x => x * 2),\n\t];\n}\n\n// Pass\n\nconst array = [firstElement, secondElement, thirdElement];\nconst object = {firstProperty, secondProperty, thirdProperty};\nfoo(firstArgument, secondArgument, thirdArgument);\nconst object = new Foo(firstArgument, secondArgument, thirdArgument);\nconst array = [...foo, bar];\nconst object = {...foo, bar};\nfoo(foo, ...bar);\nconst object = new Foo(...foo, bar);\nconst set = new Set(iterable);\nconst results = await Promise.all(iterable);\nfor (const foo of set);\nfunction * foo() {\n\tyield * anotherGenerator();\n}\nfunction foo(bar) {\n\treturn bar.map(x => x * 2);\n}\n\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-useless-spread"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallows using spread syntax in following, unnecessary cases:\n\n  - Spread an array literal as elements of an array literal\n  - Spread an array literal as arguments of a call or a `new` call\n  - Spread an object literal as properties of an object literal\n  - Use spread syntax to clone an array created inline\n\n### Why is this bad?\n\n- The following builtins accept an iterable, so it's unnecessary to convert the iterable to an array:\n\n  - `Map` constructor\n  - `WeakMap` constructor\n  - `Set` constructor\n  - `WeakSet` constructor\n  - `TypedArray` constructor\n  - `Array.from(…)`\n  - `TypedArray.from(…)`\n  - `Promise.{all,allSettled,any,race}(…)`\n  - `Object.fromEntries(…)`\n\n- `for…of` loop can iterate over any iterable object not just array, so it's unnecessary to convert the iterable to an array.\n\n- `yield*` can delegate to another iterable, so it's unnecessary to convert the iterable to an array.\n\n### Example\n```javascript\n\nconst array = [firstElement, ...[secondElement], thirdElement];\nconst object = {firstProperty, ...{secondProperty}, thirdProperty};\nfoo(firstArgument, ...[secondArgument], thirdArgument);\nconst object = new Foo(firstArgument, ...[secondArgument], thirdArgument);\nconst set = new Set([...iterable]);\nconst results = await Promise.all([...iterable]);\nfor (const foo of [...set]);\nfunction * foo() {\n\tyield * [...anotherGenerator()];\n}\nfunction foo(bar) {\n\treturn [\n\t\t...bar.map(x => x * 2),\n\t];\n}\n\n// Pass\n\nconst array = [firstElement, secondElement, thirdElement];\nconst object = {firstProperty, secondProperty, thirdProperty};\nfoo(firstArgument, secondArgument, thirdArgument);\nconst object = new Foo(firstArgument, secondArgument, thirdArgument);\nconst array = [...foo, bar];\nconst object = {...foo, bar};\nfoo(foo, ...bar);\nconst object = new Foo(...foo, bar);\nconst set = new Set(iterable);\nconst results = await Promise.all(iterable);\nfor (const foo of set);\nfunction * foo() {\n\tyield * anotherGenerator();\n}\nfunction foo(bar) {\n\treturn bar.map(x => x * 2);\n}\n\n```\n"
        },
        "unicorn/no-useless-switch-case": {
          "description": "### What it does\n\nDisallows useless default cases in switch statements.\n\n### Why is this bad?\n\nAn empty case before the last default case is useless.\n\n### Example\n```javascript\n// bad\nswitch (foo) {\n\tcase 1:\n\tdefault:\n\t\thandleDefaultCase();\n\t\tbreak;\n}\n// good:\nswitch (foo) {\n\tcase 1:\n\tcase 2:\n\t\thandleCase1And2();\n\t\tbreak;\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-useless-switch-case"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallows useless default cases in switch statements.\n\n### Why is this bad?\n\nAn empty case before the last default case is useless.\n\n### Example\n```javascript\n// bad\nswitch (foo) {\n\tcase 1:\n\tdefault:\n\t\thandleDefaultCase();\n\t\tbreak;\n}\n// good:\nswitch (foo) {\n\tcase 1:\n\tcase 2:\n\t\thandleCase1And2();\n\t\tbreak;\n}\n```\n"
        },
        "unicorn/no-zero-fractions": {
          "description": "### What it does\n\nPrevents the use of zero fractions.\n\n### Why is this bad?\n\nThere is no difference in JavaScript between, for example, `1`, `1.0` and `1.`, so prefer the former for consistency and brevity.\n\n### Example\n```javascript\n// Bad\nconst foo = 1.0;\nconst foo = -1.0;\nconst foo = 123_456.000_000;\n\n// Good\nconst foo = 1;\nconst foo = -1;\nconst foo = 123456;\nconst foo = 1.1;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/no-zero-fractions"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nPrevents the use of zero fractions.\n\n### Why is this bad?\n\nThere is no difference in JavaScript between, for example, `1`, `1.0` and `1.`, so prefer the former for consistency and brevity.\n\n### Example\n```javascript\n// Bad\nconst foo = 1.0;\nconst foo = -1.0;\nconst foo = 123_456.000_000;\n\n// Good\nconst foo = 1;\nconst foo = -1;\nconst foo = 123456;\nconst foo = 1.1;\n```\n"
        },
        "unicorn/number-literal-case": {
          "description": "### What it does\nThis rule enforces proper case for numeric literals.\n\n### Why is this bad?\nWhen both an identifier and a number literal are in lower case, it can be hard to differentiate between them.\n\n### Example\n```javascript\n// Fail\nconst foo = 0XFF;\nconst foo = 0xff;\nconst foo = 0Xff;\nconst foo = 0Xffn;\n\nconst foo = 0B10;\nconst foo = 0B10n;\n\nconst foo = 0O76;\nconst foo = 0O76n;\n\nconst foo = 2E-5;\n\n// Pass\nconst foo = 0xFF;\nconst foo = 0b10;\nconst foo = 0o76;\nconst foo = 0xFFn;\nconst foo = 2e+5;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/number-literal-case"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nThis rule enforces proper case for numeric literals.\n\n### Why is this bad?\nWhen both an identifier and a number literal are in lower case, it can be hard to differentiate between them.\n\n### Example\n```javascript\n// Fail\nconst foo = 0XFF;\nconst foo = 0xff;\nconst foo = 0Xff;\nconst foo = 0Xffn;\n\nconst foo = 0B10;\nconst foo = 0B10n;\n\nconst foo = 0O76;\nconst foo = 0O76n;\n\nconst foo = 2E-5;\n\n// Pass\nconst foo = 0xFF;\nconst foo = 0b10;\nconst foo = 0o76;\nconst foo = 0xFFn;\nconst foo = 2e+5;\n```\n"
        },
        "unicorn/numeric-separators-style": {
          "description": "### What it does\nEnforces a convention of grouping digits using numeric separators.\n\n### Why is this bad?\nLong numbers can become really hard to read, so cutting it into groups of digits,\nseparated with a _, is important to keep your code clear. This rule also enforces\na proper usage of the numeric separator, by checking if the groups of digits are\nof the correct size.\n\n\n### Example\n```javascript\nconst invalid = [\n  1_23_4444,\n  1_234.56789,\n  0xAB_C_D_EF,\n  0b10_00_1111,\n  0o1_0_44_21,\n  1_294_28771_2n,\n];\nconst valid = [\n  1_234_567,\n  1_234.567_89,\n  0xAB_CD_EF,\n  0b1000_1111,\n  0o10_4421,\n  1_294_287_712n,\n];\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/numeric-separators-style"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nEnforces a convention of grouping digits using numeric separators.\n\n### Why is this bad?\nLong numbers can become really hard to read, so cutting it into groups of digits,\nseparated with a _, is important to keep your code clear. This rule also enforces\na proper usage of the numeric separator, by checking if the groups of digits are\nof the correct size.\n\n\n### Example\n```javascript\nconst invalid = [\n  1_23_4444,\n  1_234.56789,\n  0xAB_C_D_EF,\n  0b10_00_1111,\n  0o1_0_44_21,\n  1_294_28771_2n,\n];\nconst valid = [\n  1_234_567,\n  1_234.567_89,\n  0xAB_CD_EF,\n  0b1000_1111,\n  0o10_4421,\n  1_294_287_712n,\n];\n```\n"
        },
        "unicorn/prefer-add-event-listener": {
          "description": "### What it does\n\nEnforces the use of `.addEventListener()` and `.removeEventListener()` over their `on`-function counterparts.\n\nFor example, `foo.addEventListener('click', handler);` is preferred over `foo.onclick = handler;` for HTML DOM Events.\n\n### Why is this bad?\n\nThere are [numerous advantages of using `addEventListener`](https://stackoverflow.com/questions/6348494/addeventlistener-vs-onclick/35093997#35093997). Some of these advantages include registering unlimited event handlers and optionally having the event handler invoked only once.\n\n### Example\n```javascript\n// bad\nfoo.onclick = () => {};\n\n// good\nfoo.addEventListener('click', () => {});\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-add-event-listener"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforces the use of `.addEventListener()` and `.removeEventListener()` over their `on`-function counterparts.\n\nFor example, `foo.addEventListener('click', handler);` is preferred over `foo.onclick = handler;` for HTML DOM Events.\n\n### Why is this bad?\n\nThere are [numerous advantages of using `addEventListener`](https://stackoverflow.com/questions/6348494/addeventlistener-vs-onclick/35093997#35093997). Some of these advantages include registering unlimited event handlers and optionally having the event handler invoked only once.\n\n### Example\n```javascript\n// bad\nfoo.onclick = () => {};\n\n// good\nfoo.addEventListener('click', () => {});\n```\n"
        },
        "unicorn/prefer-array-flat": {
          "description": "### What it does\n\nPrefers `Array#flat()` over legacy techniques to flatten arrays.    ///\n\n### Why is this bad?\n\nES2019 introduced a new method [`Array#flat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat) that flatten arrays.\n\nThis rule aims to standardize the use of `Array#flat()` over legacy techniques to flatten arrays.\n\n### Example\n```javascript\n// Bad\nconst foo = array.flatMap(x => x);\nconst foo = array.reduce((a, b) => a.concat(b), []);\nconst foo = array.reduce((a, b) => [...a, ...b], []);\nconst foo = [].concat(maybeArray);\nconst foo = [].concat(...array);\nconst foo = [].concat.apply([], array);\nconst foo = Array.prototype.concat.apply([], array);\nconst foo = Array.prototype.concat.call([], maybeArray);\nconst foo = Array.prototype.concat.call([], ...array);\n\n// Good\nconst foo = array.flat();\nconst foo = [maybeArray].flat();\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-array-flat"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nPrefers `Array#flat()` over legacy techniques to flatten arrays.    ///\n\n### Why is this bad?\n\nES2019 introduced a new method [`Array#flat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat) that flatten arrays.\n\nThis rule aims to standardize the use of `Array#flat()` over legacy techniques to flatten arrays.\n\n### Example\n```javascript\n// Bad\nconst foo = array.flatMap(x => x);\nconst foo = array.reduce((a, b) => a.concat(b), []);\nconst foo = array.reduce((a, b) => [...a, ...b], []);\nconst foo = [].concat(maybeArray);\nconst foo = [].concat(...array);\nconst foo = [].concat.apply([], array);\nconst foo = Array.prototype.concat.apply([], array);\nconst foo = Array.prototype.concat.call([], maybeArray);\nconst foo = Array.prototype.concat.call([], ...array);\n\n// Good\nconst foo = array.flat();\nconst foo = [maybeArray].flat();\n```\n"
        },
        "unicorn/prefer-array-flat-map": {
          "description": "### What it does\n\nPrefers the use of `.flatMap()` when `map().flat()` are used together.\n\n### Why is this bad?\n\nIt is slightly more efficient to use `.flatMap(…)` instead of `.map(…).flat()`.\n\n### Example\n```javascript\nconst bar = [1,2,3].map(i => [i]).flat(); // ✗ fail\n\nconst bar = [1,2,3].flatMap(i => [i]); // ✓ pass\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-array-flat-map"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nPrefers the use of `.flatMap()` when `map().flat()` are used together.\n\n### Why is this bad?\n\nIt is slightly more efficient to use `.flatMap(…)` instead of `.map(…).flat()`.\n\n### Example\n```javascript\nconst bar = [1,2,3].map(i => [i]).flat(); // ✗ fail\n\nconst bar = [1,2,3].flatMap(i => [i]); // ✓ pass\n```\n"
        },
        "unicorn/prefer-array-some": {
          "description": "### What it does\n\nPrefers using [`Array#some`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some) over [`Array#find()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find), [`Array#findLast()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast) and a non-zero length check on the result of [`Array#filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n\n### Why is this bad?\n\nUsing `.some()` is more idiomatic and easier to read.\n\n### Example\n```javascript\n// Bad\nconst foo = array.find(fn) ? bar : baz;\n\n// Good\nconst foo = array.some(fn) ? bar : baz;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-array-some"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nPrefers using [`Array#some`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some) over [`Array#find()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find), [`Array#findLast()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast) and a non-zero length check on the result of [`Array#filter()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n\n### Why is this bad?\n\nUsing `.some()` is more idiomatic and easier to read.\n\n### Example\n```javascript\n// Bad\nconst foo = array.find(fn) ? bar : baz;\n\n// Good\nconst foo = array.some(fn) ? bar : baz;\n```\n"
        },
        "unicorn/prefer-blob-reading-methods": {
          "description": "### What it does\n\nRecommends using `Blob#text()` and `Blob#arrayBuffer()` over `FileReader#readAsText()` and `FileReader#readAsArrayBuffer()`.\n\n### Why is this bad?\n\n`FileReader` predates promises, and the newer [`Blob#arrayBuffer()`](https://developer.mozilla.org/en-US/docs/Web/API/Blob/arrayBuffer) and [`Blob#text()`](https://developer.mozilla.org/en-US/docs/Web/API/Blob/text) methods are much cleaner and easier to use.\n\n### Example\n```javascript\n// bad\nconst arrayBuffer = await new Promise((resolve, reject) => {\n\tconst fileReader = new FileReader();\n\tfileReader.addEventListener('load', () => {\n\t\tresolve(fileReader.result);\n\t});\n\tfileReader.addEventListener('error', () => {\n\t\treject(fileReader.error);\n\t});\n\tfileReader.readAsArrayBuffer(blob);\n});\n\n// good\nconst arrayBuffer = await blob.arrayBuffer();\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-blob-reading-methods"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nRecommends using `Blob#text()` and `Blob#arrayBuffer()` over `FileReader#readAsText()` and `FileReader#readAsArrayBuffer()`.\n\n### Why is this bad?\n\n`FileReader` predates promises, and the newer [`Blob#arrayBuffer()`](https://developer.mozilla.org/en-US/docs/Web/API/Blob/arrayBuffer) and [`Blob#text()`](https://developer.mozilla.org/en-US/docs/Web/API/Blob/text) methods are much cleaner and easier to use.\n\n### Example\n```javascript\n// bad\nconst arrayBuffer = await new Promise((resolve, reject) => {\n\tconst fileReader = new FileReader();\n\tfileReader.addEventListener('load', () => {\n\t\tresolve(fileReader.result);\n\t});\n\tfileReader.addEventListener('error', () => {\n\t\treject(fileReader.error);\n\t});\n\tfileReader.readAsArrayBuffer(blob);\n});\n\n// good\nconst arrayBuffer = await blob.arrayBuffer();\n```\n"
        },
        "unicorn/prefer-code-point": {
          "description": "### What it does\n\nPrefers usage of `String.prototype.codePointAt` over `String.prototype.charCodeAt`.\nPrefers usage of `String.fromCodePoint` over `String.fromCharCode`.\n\n### Why is this bad?\n\nUnicode is better supported in [`String#codePointAt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt) and [`String.fromCodePoint()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint).\n\n[Difference between `String.fromCodePoint()` and `String.fromCharCode()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint#compared_to_fromcharcode)\n\n### Example\n```javascript\n// bad\n'🦄'.charCodeAt(0);\nString.fromCharCode(0x1f984);\n\n// good\n'🦄'.codePointAt(0);\nString.fromCodePoint(0x1f984);\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-code-point"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nPrefers usage of `String.prototype.codePointAt` over `String.prototype.charCodeAt`.\nPrefers usage of `String.fromCodePoint` over `String.fromCharCode`.\n\n### Why is this bad?\n\nUnicode is better supported in [`String#codePointAt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt) and [`String.fromCodePoint()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint).\n\n[Difference between `String.fromCodePoint()` and `String.fromCharCode()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint#compared_to_fromcharcode)\n\n### Example\n```javascript\n// bad\n'🦄'.charCodeAt(0);\nString.fromCharCode(0x1f984);\n\n// good\n'🦄'.codePointAt(0);\nString.fromCodePoint(0x1f984);\n```\n"
        },
        "unicorn/prefer-date-now": {
          "description": "### What it does\n\nPrefers use of `Date.now()` over `new Date().getTime()` or `new Date().valueOf()`.\n\n### Why is this bad?\n\nUsing `Date.now()` is shorter and nicer than `new Date().getTime()`, and avoids unnecessary instantiation of `Date` objects.\n\n\n### Example\n```javascript\n// bad\nconst ts = new Date().getTime();\nconst ts = new Date().valueOf();\n\n// good\nconst ts = Date.now();\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-date-now"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nPrefers use of `Date.now()` over `new Date().getTime()` or `new Date().valueOf()`.\n\n### Why is this bad?\n\nUsing `Date.now()` is shorter and nicer than `new Date().getTime()`, and avoids unnecessary instantiation of `Date` objects.\n\n\n### Example\n```javascript\n// bad\nconst ts = new Date().getTime();\nconst ts = new Date().valueOf();\n\n// good\nconst ts = Date.now();\n```\n"
        },
        "unicorn/prefer-dom-node-append": {
          "description": "### What it does\n\nEnforces the use of, for example, `document.body.append(div);` over `document.body.appendChild(div);` for DOM nodes.\n\n### Why is this bad?\n\nThere are [some advantages of using `Node#append()`](https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/append), like the ability to append multiple nodes and to append both [`DOMString`](https://developer.mozilla.org/en-US/docs/Web/API/DOMString) and DOM node objects.\n\n### Example\n```javascript\n// bad\nfoo.appendChild(bar);\n\nfoo.append(bar);\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-dom-node-append"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforces the use of, for example, `document.body.append(div);` over `document.body.appendChild(div);` for DOM nodes.\n\n### Why is this bad?\n\nThere are [some advantages of using `Node#append()`](https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/append), like the ability to append multiple nodes and to append both [`DOMString`](https://developer.mozilla.org/en-US/docs/Web/API/DOMString) and DOM node objects.\n\n### Example\n```javascript\n// bad\nfoo.appendChild(bar);\n\nfoo.append(bar);\n```\n"
        },
        "unicorn/prefer-dom-node-dataset": {
          "description": "### What it does\n\nUse [`.dataset`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset) on DOM elements over `getAttribute(…)`, `.setAttribute(…)`, `.removeAttribute(…)` and `.hasAttribute(…)`.\n\n### Why is this bad?\n\nThe `dataset` property is a map of strings that contains all the `data-*` attributes from the element. It is a convenient way to access all of them at once.\n\n### Example\n```javascript\n// Bad\nelement.setAttribute('data-unicorn', '🦄');\n\n// Good\nelement.dataset.unicorn = '🦄';\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-dom-node-dataset"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nUse [`.dataset`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset) on DOM elements over `getAttribute(…)`, `.setAttribute(…)`, `.removeAttribute(…)` and `.hasAttribute(…)`.\n\n### Why is this bad?\n\nThe `dataset` property is a map of strings that contains all the `data-*` attributes from the element. It is a convenient way to access all of them at once.\n\n### Example\n```javascript\n// Bad\nelement.setAttribute('data-unicorn', '🦄');\n\n// Good\nelement.dataset.unicorn = '🦄';\n```\n"
        },
        "unicorn/prefer-dom-node-remove": {
          "description": "### What it does\n\nPrefers the use of `child.remove()` over `parentNode.removeChild(child)`.\n\n### Why is this bad?\n\nThe DOM function [`Node#remove()`](https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove) is preferred over the indirect removal of an object with [`Node#removeChild()`](https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild).\n\n### Example\n```javascript\n// bad\nparentNode.removeChild(childNode);\n\n// good\nchildNode.remove();\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-dom-node-remove"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nPrefers the use of `child.remove()` over `parentNode.removeChild(child)`.\n\n### Why is this bad?\n\nThe DOM function [`Node#remove()`](https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove) is preferred over the indirect removal of an object with [`Node#removeChild()`](https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild).\n\n### Example\n```javascript\n// bad\nparentNode.removeChild(childNode);\n\n// good\nchildNode.remove();\n```\n"
        },
        "unicorn/prefer-dom-node-text-content": {
          "description": "### What it does\n\nEnforces the use of `.textContent` over `.innerText` for DOM nodes.\n\n### Why is this bad?\n\nThere are some disadvantages of using .innerText.\n- `.innerText` is much more performance-heavy as it requires layout information to return the result.\n- `.innerText` is defined only for HTMLElement objects, while `.textContent` is defined for all Node objects.\n- `.innerText` is not standard, for example, it is not present in Firefox.\n\n### Example\n```javascript\n// Bad\nconst text = foo.innerText;\n\n// Good\nconst text = foo.textContent;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-dom-node-text-content"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforces the use of `.textContent` over `.innerText` for DOM nodes.\n\n### Why is this bad?\n\nThere are some disadvantages of using .innerText.\n- `.innerText` is much more performance-heavy as it requires layout information to return the result.\n- `.innerText` is defined only for HTMLElement objects, while `.textContent` is defined for all Node objects.\n- `.innerText` is not standard, for example, it is not present in Firefox.\n\n### Example\n```javascript\n// Bad\nconst text = foo.innerText;\n\n// Good\nconst text = foo.textContent;\n```\n"
        },
        "unicorn/prefer-event-target": {
          "description": "### What it does\n\nPrefers `EventTarget` over `EventEmitter`.\n\nThis rule reduces the bundle size and makes your code more cross-platform friendly.\n\nSee the [differences](https://nodejs.org/api/events.html#eventtarget-and-event-api) between `EventEmitter` and `EventTarget`.\n\n### Why is this bad?\n\nWhile [`EventEmitter`](https://nodejs.org/api/events.html#class-eventemitter) is only available in Node.js, [`EventTarget`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget) is also available in _Deno_ and browsers.\n\n### Example\n```javascript\n// Bad\nclass Foo extends EventEmitter {}\n\n// Good\nclass Foo extends OtherClass {}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-event-target"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nPrefers `EventTarget` over `EventEmitter`.\n\nThis rule reduces the bundle size and makes your code more cross-platform friendly.\n\nSee the [differences](https://nodejs.org/api/events.html#eventtarget-and-event-api) between `EventEmitter` and `EventTarget`.\n\n### Why is this bad?\n\nWhile [`EventEmitter`](https://nodejs.org/api/events.html#class-eventemitter) is only available in Node.js, [`EventTarget`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget) is also available in _Deno_ and browsers.\n\n### Example\n```javascript\n// Bad\nclass Foo extends EventEmitter {}\n\n// Good\nclass Foo extends OtherClass {}\n```\n"
        },
        "unicorn/prefer-includes": {
          "description": "### What it does\n\nPrefer `includes()` over `indexOf()` when checking for existence or non-existence.\n\nAll built-ins have `.includes()` in addition to `.indexOf()`.\n\n### Why is this bad?\n\nThe `.includes()` method is more readable and less error-prone than `.indexOf()`.\n\n### Example\n```javascript\n// bad\nif (str.indexOf('foo') !== -1) { }\n\n// good\nif (str.includes('foo')) { }\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-includes"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nPrefer `includes()` over `indexOf()` when checking for existence or non-existence.\n\nAll built-ins have `.includes()` in addition to `.indexOf()`.\n\n### Why is this bad?\n\nThe `.includes()` method is more readable and less error-prone than `.indexOf()`.\n\n### Example\n```javascript\n// bad\nif (str.indexOf('foo') !== -1) { }\n\n// good\nif (str.includes('foo')) { }\n```\n"
        },
        "unicorn/prefer-logical-operator-over-ternary": {
          "description": "### What it does\n\nThis rule finds ternary expressions that can be simplified to a logical operator.\n\n### Why is this bad?\n\nUsing a logical operator is shorter and simpler than a ternary expression.\n\n### Example\n```javascript\n\n// Bad\nconst foo = bar ? bar : baz;\nconsole.log(foo ? foo : bar);\n\n// Good\nconst foo = bar || baz;\nconsole.log(foo ?? bar);\n\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-logical-operator-over-ternary"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule finds ternary expressions that can be simplified to a logical operator.\n\n### Why is this bad?\n\nUsing a logical operator is shorter and simpler than a ternary expression.\n\n### Example\n```javascript\n\n// Bad\nconst foo = bar ? bar : baz;\nconsole.log(foo ? foo : bar);\n\n// Good\nconst foo = bar || baz;\nconsole.log(foo ?? bar);\n\n```\n"
        },
        "unicorn/prefer-math-trunc": {
          "description": "### What it does\n\nPrefers use of [`Math.trunc()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc) instead of bitwise operations for clarity and more reliable results.\n\nIt prevents the use of the following bitwise operations:\n- `x | 0` ([`bitwise OR`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR) with 0)\n- `~~x` (two [`bitwise NOT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT))\n- `x >> 0` ([`Signed Right Shift`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift) with 0)\n- `x << 0` ([`Left Shift`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift) with 0)\n- `x ^ 0` ([`bitwise XOR Shift`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR) with 0)\n\n### Why is this bad?\n\nUsing bitwise operations to truncate numbers is not clear and do not work in [some cases](https://stackoverflow.com/a/34706108/11687747).\n\n### Example\n```javascript\n// Bad\nconst foo = 1.1 | 0;\n\n// Good\nconst foo = Math.trunc(1.1);\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-math-trunc"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nPrefers use of [`Math.trunc()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc) instead of bitwise operations for clarity and more reliable results.\n\nIt prevents the use of the following bitwise operations:\n- `x | 0` ([`bitwise OR`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR) with 0)\n- `~~x` (two [`bitwise NOT`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT))\n- `x >> 0` ([`Signed Right Shift`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift) with 0)\n- `x << 0` ([`Left Shift`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift) with 0)\n- `x ^ 0` ([`bitwise XOR Shift`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR) with 0)\n\n### Why is this bad?\n\nUsing bitwise operations to truncate numbers is not clear and do not work in [some cases](https://stackoverflow.com/a/34706108/11687747).\n\n### Example\n```javascript\n// Bad\nconst foo = 1.1 | 0;\n\n// Good\nconst foo = Math.trunc(1.1);\n```\n"
        },
        "unicorn/prefer-modern-dom-apis": {
          "description": "### What it does\n\nEnforces the use of:\n- childNode.replaceWith(newNode) over parentNode.replaceChild(newNode, oldNode)\n- referenceNode.before(newNode) over parentNode.insertBefore(newNode, referenceNode)\n- referenceNode.before('text') over referenceNode.insertAdjacentText('beforebegin', 'text')\n- referenceNode.before(newNode) over referenceNode.insertAdjacentElement('beforebegin', newNode)\n\n### Why is this bad?\n\nThere are some advantages of using the newer DOM APIs, like:\n- Traversing to the parent node is not necessary.\n- Appending multiple nodes at once.\n- Both DOMString and DOM node objects can be manipulated.\n\n### Example\n```javascript\n// Bad\n(\"oldChildNode.replaceWith(newChildNode);\", None),\n\n// Good\n(\"parentNode.replaceChild(newChildNode, oldChildNode);\", None),\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-modern-dom-apis"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforces the use of:\n- childNode.replaceWith(newNode) over parentNode.replaceChild(newNode, oldNode)\n- referenceNode.before(newNode) over parentNode.insertBefore(newNode, referenceNode)\n- referenceNode.before('text') over referenceNode.insertAdjacentText('beforebegin', 'text')\n- referenceNode.before(newNode) over referenceNode.insertAdjacentElement('beforebegin', newNode)\n\n### Why is this bad?\n\nThere are some advantages of using the newer DOM APIs, like:\n- Traversing to the parent node is not necessary.\n- Appending multiple nodes at once.\n- Both DOMString and DOM node objects can be manipulated.\n\n### Example\n```javascript\n// Bad\n(\"oldChildNode.replaceWith(newChildNode);\", None),\n\n// Good\n(\"parentNode.replaceChild(newChildNode, oldChildNode);\", None),\n```\n"
        },
        "unicorn/prefer-modern-math-apis": {
          "description": "### What it does\n\nChecks for usage of legacy patterns for mathematical operations.\n\n### Why is this bad?\n\nModern JavaScript provides more concise and readable alternatives to legacy patterns.\n\nCurrently, the following cases are checked:\n - Prefer `Math.log10(x)` over alternatives\n - Prefer `Math.hypot(…)` over alternatives\n\n### Example\n```javascript\n// Bad\nMath.log(x) * Math.LOG10E;\nMath.sqrt(a * a + b * b);\n\n// Good\nMath.log10(x);\nMath.hypot(a, b);\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-modern-math-apis"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nChecks for usage of legacy patterns for mathematical operations.\n\n### Why is this bad?\n\nModern JavaScript provides more concise and readable alternatives to legacy patterns.\n\nCurrently, the following cases are checked:\n - Prefer `Math.log10(x)` over alternatives\n - Prefer `Math.hypot(…)` over alternatives\n\n### Example\n```javascript\n// Bad\nMath.log(x) * Math.LOG10E;\nMath.sqrt(a * a + b * b);\n\n// Good\nMath.log10(x);\nMath.hypot(a, b);\n```\n"
        },
        "unicorn/prefer-native-coercion-functions": {
          "description": "### What it does\n\nPrefers built in functions, over custom ones with the same functionality.\n\n### Why is this bad?\n\nIf a function is equivalent to [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt), [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean), or [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol), you should use the built-in one directly.\nWrapping the built-in in a function is moot.\n\n### Example\n```javascript\n// bad\nconst foo = v => String(v);\nfoo(1);\nconst foo = v => Number(v);\narray.some((v, ) => /* comment */ v)\n\n// good\nString(1);\nNumber(1);\narray.some(Boolean);\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-native-coercion-functions"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nPrefers built in functions, over custom ones with the same functionality.\n\n### Why is this bad?\n\nIf a function is equivalent to [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String), [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number), [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt), [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean), or [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol), you should use the built-in one directly.\nWrapping the built-in in a function is moot.\n\n### Example\n```javascript\n// bad\nconst foo = v => String(v);\nfoo(1);\nconst foo = v => Number(v);\narray.some((v, ) => /* comment */ v)\n\n// good\nString(1);\nNumber(1);\narray.some(Boolean);\n```\n"
        },
        "unicorn/prefer-node-protocol": {
          "description": "### What it does\nPrefer using the `node:protocol` when importing Node.js builtin modules\n\n\n### Example\n```javascript\n// Bad\nimport fs from \"fs\";\n// Good\nimport fs from \"node:fs\";\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-node-protocol"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nPrefer using the `node:protocol` when importing Node.js builtin modules\n\n\n### Example\n```javascript\n// Bad\nimport fs from \"fs\";\n// Good\nimport fs from \"node:fs\";\n```\n"
        },
        "unicorn/prefer-number-properties": {
          "description": "### What it does\n\nDisallows use of `parseInt()`, `parseFloat()`, `isNan()`, `isFinite()`, `Nan`, `Infinity` and `-Infinity` as global variables.\n\n### Why is this bad?\n\nECMAScript 2015 moved globals onto the `Number` constructor for consistency and to slightly improve them. This rule enforces their usage to limit the usage of globals:\n\n- [`Number.parseInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt) over [`parseInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt)\n- [`Number.parseFloat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat) over [`parseFloat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat)\n- [`Number.isNaN()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN) over [`isNaN()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN) *(they have slightly [different behavior](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#difference_between_number.isnan_and_global_isnan))*\n- [`Number.isFinite()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite) over [`isFinite()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite) *(they have slightly [different behavior](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#difference_between_number.isfinite_and_global_isfinite))*\n- [`Number.NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN) over [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN)\n- [`Number.POSITIVE_INFINITY`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY) over [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity)\n- [`Number.NEGATIVE_INFINITY`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY) over [`-Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity)\n\n### Example\n```javascript\n// bad\nconst foo = parseInt('10', 2);\nconst bar = parseFloat('10.5');\n\n// good\nconst foo = Number.parseInt('10', 2);\nconst bar = Number.parseFloat('10.5');\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-number-properties"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nDisallows use of `parseInt()`, `parseFloat()`, `isNan()`, `isFinite()`, `Nan`, `Infinity` and `-Infinity` as global variables.\n\n### Why is this bad?\n\nECMAScript 2015 moved globals onto the `Number` constructor for consistency and to slightly improve them. This rule enforces their usage to limit the usage of globals:\n\n- [`Number.parseInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt) over [`parseInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt)\n- [`Number.parseFloat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat) over [`parseFloat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat)\n- [`Number.isNaN()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN) over [`isNaN()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN) *(they have slightly [different behavior](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#difference_between_number.isnan_and_global_isnan))*\n- [`Number.isFinite()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite) over [`isFinite()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite) *(they have slightly [different behavior](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#difference_between_number.isfinite_and_global_isfinite))*\n- [`Number.NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN) over [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN)\n- [`Number.POSITIVE_INFINITY`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY) over [`Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity)\n- [`Number.NEGATIVE_INFINITY`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY) over [`-Infinity`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity)\n\n### Example\n```javascript\n// bad\nconst foo = parseInt('10', 2);\nconst bar = parseFloat('10.5');\n\n// good\nconst foo = Number.parseInt('10', 2);\nconst bar = Number.parseFloat('10.5');\n```\n"
        },
        "unicorn/prefer-optional-catch-binding": {
          "description": "### What it does\n\nPrefers omitting the catch binding parameter if it is unused\n\n### Why is this bad?\n\nIt is unnecessary to bind the error to a variable if it is not used.\n\n### Example\n```javascript\n// Bad\ntry {\n // ...\n} catch (e) { }\n\n// Good\ntry {\n // ...\n} catch { }\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-optional-catch-binding"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nPrefers omitting the catch binding parameter if it is unused\n\n### Why is this bad?\n\nIt is unnecessary to bind the error to a variable if it is not used.\n\n### Example\n```javascript\n// Bad\ntry {\n // ...\n} catch (e) { }\n\n// Good\ntry {\n // ...\n} catch { }\n```\n"
        },
        "unicorn/prefer-prototype-methods": {
          "description": "### What it does\n\nThis rule prefers borrowing methods from the prototype instead of the instance.\n\n### Why is this bad?\n“Borrowing” a method from an instance of `Array` or `Object` is less clear than getting it from the corresponding prototype.\n\n### Example\n```javascript\n// Fail\nconst array = [].slice.apply(bar);\nconst type = {}.toString.call(foo);\nReflect.apply([].forEach, arrayLike, [callback]);\n\n// Pass\nconst array = Array.prototype.slice.apply(bar);\nconst type = Object.prototype.toString.call(foo);\nReflect.apply(Array.prototype.forEach, arrayLike, [callback]);\nconst maxValue = Math.max.apply(Math, numbers);\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-prototype-methods"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule prefers borrowing methods from the prototype instead of the instance.\n\n### Why is this bad?\n“Borrowing” a method from an instance of `Array` or `Object` is less clear than getting it from the corresponding prototype.\n\n### Example\n```javascript\n// Fail\nconst array = [].slice.apply(bar);\nconst type = {}.toString.call(foo);\nReflect.apply([].forEach, arrayLike, [callback]);\n\n// Pass\nconst array = Array.prototype.slice.apply(bar);\nconst type = Object.prototype.toString.call(foo);\nReflect.apply(Array.prototype.forEach, arrayLike, [callback]);\nconst maxValue = Math.max.apply(Math, numbers);\n```\n"
        },
        "unicorn/prefer-query-selector": {
          "description": "### What it does\n\nPrefer `.querySelector()` over `.getElementById()`, `.querySelectorAll()` over `.getElementsByClassName()` and `.getElementsByTagName()`.\n\n### Example\n```javascript\n// Bad\ndocument.getElementById('foo');\ndocument.getElementsByClassName('foo bar');\ndocument.getElementsByTagName('main');\ndocument.getElementsByClassName(fn());\n\n// Good\ndocument.querySelector('#foo');\ndocument.querySelector('.bar');\ndocument.querySelector('main #foo .bar');\ndocument.querySelectorAll('.foo .bar');\ndocument.querySelectorAll('li a');\ndocument.querySelector('li').querySelectorAll('a');\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-query-selector"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nPrefer `.querySelector()` over `.getElementById()`, `.querySelectorAll()` over `.getElementsByClassName()` and `.getElementsByTagName()`.\n\n### Example\n```javascript\n// Bad\ndocument.getElementById('foo');\ndocument.getElementsByClassName('foo bar');\ndocument.getElementsByTagName('main');\ndocument.getElementsByClassName(fn());\n\n// Good\ndocument.querySelector('#foo');\ndocument.querySelector('.bar');\ndocument.querySelector('main #foo .bar');\ndocument.querySelectorAll('.foo .bar');\ndocument.querySelectorAll('li a');\ndocument.querySelector('li').querySelectorAll('a');\n```\n"
        },
        "unicorn/prefer-reflect-apply": {
          "description": "### What it does\n\n\n### Why is this bad?\n\nReflect.apply() is arguably less verbose and easier to understand.\nIn addition, when you accept arbitrary methods,\nit's not safe to assume .apply() exists or is not overridden.\n\n### Example\n```javascript\n// Bad\nfoo.apply(null, [42]);\n\n// Good\nReflect.apply(foo, null);\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-reflect-apply"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\n\n### Why is this bad?\n\nReflect.apply() is arguably less verbose and easier to understand.\nIn addition, when you accept arbitrary methods,\nit's not safe to assume .apply() exists or is not overridden.\n\n### Example\n```javascript\n// Bad\nfoo.apply(null, [42]);\n\n// Good\nReflect.apply(foo, null);\n```\n"
        },
        "unicorn/prefer-regexp-test": {
          "description": "### What it does\n\nPrefers `RegExp#test()` over `String#match()` and `String#exec()`.\n\n### Why is this bad?\n\nWhen you want to know whether a pattern is found in a string, use [`RegExp#test()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test) instead of [`String#match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match) and [`RegExp#exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec), as it exclusively returns a boolean and therefore is more efficient.\n\n\n### Example\n```javascript\n// Bad\nif (string.match(/unicorn/)) { }\nif (/unicorn/.exec(string)) {}\n\n// Good\nif (/unicorn/.test(string)) {}\nBoolean(string.match(/unicorn/))\n\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-regexp-test"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nPrefers `RegExp#test()` over `String#match()` and `String#exec()`.\n\n### Why is this bad?\n\nWhen you want to know whether a pattern is found in a string, use [`RegExp#test()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test) instead of [`String#match()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match) and [`RegExp#exec()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec), as it exclusively returns a boolean and therefore is more efficient.\n\n\n### Example\n```javascript\n// Bad\nif (string.match(/unicorn/)) { }\nif (/unicorn/.exec(string)) {}\n\n// Good\nif (/unicorn/.test(string)) {}\nBoolean(string.match(/unicorn/))\n\n```\n"
        },
        "unicorn/prefer-set-size": {
          "description": "### What it does\n\nPrefer `Set#size` over `Set#length` when the `Set` is converted to an array.\n\n### Why is this bad?\n\nUsing `Set#size` is more readable and performant.\n\n### Example\n```javascript\n// bad\nconst length = [...new Set([1, 2, 3])].length;\n\n// good\nconst size = new Set([1, 2, 3]).size;\n\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-set-size"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nPrefer `Set#size` over `Set#length` when the `Set` is converted to an array.\n\n### Why is this bad?\n\nUsing `Set#size` is more readable and performant.\n\n### Example\n```javascript\n// bad\nconst length = [...new Set([1, 2, 3])].length;\n\n// good\nconst size = new Set([1, 2, 3]).size;\n\n```\n"
        },
        "unicorn/prefer-spread": {
          "description": "### What it does\n\nEnforces the use of [the spread operator (`...`)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) over outdated patterns.\n\n### Why is this bad?\n\nUsing the spread operator is more concise and readable.\n\n### Example\n```javascript\n// bad\nconst foo = Array.from(set);\nconst foo = Array.from(new Set([1, 2]));\n\n// good\n\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-spread"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforces the use of [the spread operator (`...`)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) over outdated patterns.\n\n### Why is this bad?\n\nUsing the spread operator is more concise and readable.\n\n### Example\n```javascript\n// bad\nconst foo = Array.from(set);\nconst foo = Array.from(new Set([1, 2]));\n\n// good\n\n```\n"
        },
        "unicorn/prefer-string-replace-all": {
          "description": "### What it does\n\nPrefers [`String#replaceAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll) over [`String#replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) when using a regex with the global flag.\n\n### Why is this bad?\n\nThe [`String#replaceAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll) method is both faster and safer as you don't have to use a regex and remember to escape it if the string is not a literal. And when used with a regex, it makes the intent clearer.\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-string-replace-all"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nPrefers [`String#replaceAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll) over [`String#replace()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) when using a regex with the global flag.\n\n### Why is this bad?\n\nThe [`String#replaceAll()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll) method is both faster and safer as you don't have to use a regex and remember to escape it if the string is not a literal. And when used with a regex, it makes the intent clearer.\n\n### Example\n```javascript\n```\n"
        },
        "unicorn/prefer-string-slice": {
          "description": "### What it does\n\nPrefer [`String#slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) over [`String#substr()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr) and [`String#substring()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring).\n\n### Why is this bad?\n\n[`String#substr()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr) and [`String#substring()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring) are the two lesser known legacy ways to slice a string. It's better to use [`String#slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) as it's a more popular option with clearer behavior that has a consistent [`Array` counterpart](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).\n\n### Example\n```javascript\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-string-slice"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nPrefer [`String#slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) over [`String#substr()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr) and [`String#substring()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring).\n\n### Why is this bad?\n\n[`String#substr()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr) and [`String#substring()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring) are the two lesser known legacy ways to slice a string. It's better to use [`String#slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) as it's a more popular option with clearer behavior that has a consistent [`Array` counterpart](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).\n\n### Example\n```javascript\n```\n"
        },
        "unicorn/prefer-string-starts-ends-with": {
          "description": "### What it does\n\nPrefer [`String#startsWith()`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith) and [`String#endsWith()`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith) over using a regex with `/^foo/` or `/foo$/`.\n\n### Why is this bad?\n\nUsing `String#startsWith()` and `String#endsWith()` is more readable and performant as it does not need to parse a regex.\n\n### Example\n```javascript\n// Bad\nconst foo = \"hello\";\n/^abc/.test(foo);\n\n// Good\nconst foo = \"hello\";\nfoo.startsWith(\"abc\");\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-string-starts-ends-with"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nPrefer [`String#startsWith()`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith) and [`String#endsWith()`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith) over using a regex with `/^foo/` or `/foo$/`.\n\n### Why is this bad?\n\nUsing `String#startsWith()` and `String#endsWith()` is more readable and performant as it does not need to parse a regex.\n\n### Example\n```javascript\n// Bad\nconst foo = \"hello\";\n/^abc/.test(foo);\n\n// Good\nconst foo = \"hello\";\nfoo.startsWith(\"abc\");\n```\n"
        },
        "unicorn/prefer-string-trim-start-end": {
          "description": "### What it does\n\n[`String#trimLeft()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimLeft) and [`String#trimRight()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimRight) are aliases of [`String#trimStart()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimStart) and [`String#trimEnd()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd). This is to ensure consistency and use [direction](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Handling_different_text_directions)-independent wording.\n\n### Why is this bad?\n\nThe `trimLeft` and `trimRight` names are confusing and inconsistent with the rest of the language.\n\n### Example\n```javascript\n// Bad\nstr.trimLeft();\nstr.trimRight();\n\n// Good\nstr.trimStart();\nstr.trimEnd();\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-string-trim-start-end"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\n[`String#trimLeft()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimLeft) and [`String#trimRight()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimRight) are aliases of [`String#trimStart()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimStart) and [`String#trimEnd()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd). This is to ensure consistency and use [direction](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Handling_different_text_directions)-independent wording.\n\n### Why is this bad?\n\nThe `trimLeft` and `trimRight` names are confusing and inconsistent with the rest of the language.\n\n### Example\n```javascript\n// Bad\nstr.trimLeft();\nstr.trimRight();\n\n// Good\nstr.trimStart();\nstr.trimEnd();\n```\n"
        },
        "unicorn/prefer-type-error": {
          "description": "### What it does\n\nEnforce throwing a `TypeError` instead of a generic `Error` after a type checking if-statement.\n\n### Why is this bad?\n\nThrowing a `TypeError` instead of a generic `Error` after a type checking if-statement is more specific and helps to catch bugs.\n\n### Example\n```javascript\n// Bad\nif (Array.isArray(foo)) {\n    throw new Error('Expected foo to be an array');\n}\n\n// Good\nif (Array.isArray(foo)) {\n    throw new TypeError('Expected foo to be an array');\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/prefer-type-error"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforce throwing a `TypeError` instead of a generic `Error` after a type checking if-statement.\n\n### Why is this bad?\n\nThrowing a `TypeError` instead of a generic `Error` after a type checking if-statement is more specific and helps to catch bugs.\n\n### Example\n```javascript\n// Bad\nif (Array.isArray(foo)) {\n    throw new Error('Expected foo to be an array');\n}\n\n// Good\nif (Array.isArray(foo)) {\n    throw new TypeError('Expected foo to be an array');\n}\n```\n"
        },
        "unicorn/require-array-join-separator": {
          "description": "### What it does\n\nEnforce using the separator argument with Array#join()\n\n### Why is this bad?\n\nIt's better to make it clear what the separator is when calling Array#join(),\ninstead of relying on the default comma (',') separator.\n\n### Example\n```javascript\n// Bad\nfoo.join()\n\n// Good\nfoo.join(\",\")\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/require-array-join-separator"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nEnforce using the separator argument with Array#join()\n\n### Why is this bad?\n\nIt's better to make it clear what the separator is when calling Array#join(),\ninstead of relying on the default comma (',') separator.\n\n### Example\n```javascript\n// Bad\nfoo.join()\n\n// Good\nfoo.join(\",\")\n```\n"
        },
        "unicorn/require-number-to-fixed-digits-argument": {
          "description": "### What it does\nEnforce using the digits argument with Number.toFixed()\n\n### Why is this bad?\nIt's better to make it clear what the value of the digits argument is when calling Number.toFixed(),\ninstead of relying on the default value of 0.\n\n### Example\n```javascript\n// Pass\nnumber.toFixed(0);\nnumber.toFixed(2);\n\n// Fail:\nnumber.toFixed();\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/require-number-to-fixed-digits-argument"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nEnforce using the digits argument with Number.toFixed()\n\n### Why is this bad?\nIt's better to make it clear what the value of the digits argument is when calling Number.toFixed(),\ninstead of relying on the default value of 0.\n\n### Example\n```javascript\n// Pass\nnumber.toFixed(0);\nnumber.toFixed(2);\n\n// Fail:\nnumber.toFixed();\n```\n"
        },
        "unicorn/switch-case-braces": {
          "description": "### What it does\nRequire empty switch cases to not have braces. Non-empty braces are required to have braces around them.\n\n### Why is this bad?\nThere is less visual clutter for empty cases and proper scope for non-empty cases.\n\n### Example\n```javascript\nswitch (num) {\n    case 1: {\n\n    }\n    case 2:\n        console.log('Case 2');\n        break;\n}\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/switch-case-braces"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nRequire empty switch cases to not have braces. Non-empty braces are required to have braces around them.\n\n### Why is this bad?\nThere is less visual clutter for empty cases and proper scope for non-empty cases.\n\n### Example\n```javascript\nswitch (num) {\n    case 1: {\n\n    }\n    case 2:\n        console.log('Case 2');\n        break;\n}\n```\n"
        },
        "unicorn/text-encoding-identifier-case": {
          "description": "### What it does\n\nThis rule aims to enforce consistent case for text encoding identifiers.\n\nEnforces `'utf8'` for UTF-8 encoding\nEnforces `'ascii'` for ASCII encoding.\n\n### Example\n```javascript\n// Fail\nawait fs.readFile(file, 'UTF-8');\n\nawait fs.readFile(file, 'ASCII');\n\nconst string = buffer.toString('utf-8');\n\n// pass\n\nawait fs.readFile(file, 'utf8');\n\nawait fs.readFile(file, 'ascii');\n\nconst string = buffer.toString('utf8');\n\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/text-encoding-identifier-case"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nThis rule aims to enforce consistent case for text encoding identifiers.\n\nEnforces `'utf8'` for UTF-8 encoding\nEnforces `'ascii'` for ASCII encoding.\n\n### Example\n```javascript\n// Fail\nawait fs.readFile(file, 'UTF-8');\n\nawait fs.readFile(file, 'ASCII');\n\nconst string = buffer.toString('utf-8');\n\n// pass\n\nawait fs.readFile(file, 'utf8');\n\nawait fs.readFile(file, 'ascii');\n\nconst string = buffer.toString('utf8');\n\n```\n"
        },
        "unicorn/throw-new-error": {
          "description": "### What it does\n\nRequire `new` when throwing an error.`\n\n### Why is this bad?\n\nWhile it's possible to create a new error without using the `new` keyword, it's better to be explicit.\n\n### Example\n```javascript\n// Fail\nthrow Error('🦄');\nthrow TypeError('unicorn');\nthrow lib.TypeError('unicorn');\n\n// Pass\nthrow new Error('🦄');\nthrow new TypeError('unicorn');\nthrow new lib.TypeError('unicorn');\n\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/throw-new-error"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\n\nRequire `new` when throwing an error.`\n\n### Why is this bad?\n\nWhile it's possible to create a new error without using the `new` keyword, it's better to be explicit.\n\n### Example\n```javascript\n// Fail\nthrow Error('🦄');\nthrow TypeError('unicorn');\nthrow lib.TypeError('unicorn');\n\n// Pass\nthrow new Error('🦄');\nthrow new TypeError('unicorn');\nthrow new lib.TypeError('unicorn');\n\n```\n"
        },
        "use-isnan": {
          "description": "### What it does\nDisallows checking against NaN without using isNaN() call.\n\n### Why is this bad?\nIn JavaScript, NaN is a special value of the Number type.\nIt’s used to represent any of the “not-a-number” values represented\nby the double-precision 64-bit format as specified by the IEEE Standard\nfor Binary Floating-Point Arithmetic.\n\nBecause NaN is unique in JavaScript by not being equal to anything, including itself,\nthe results of comparisons to NaN are confusing:\n- NaN === NaN or NaN == NaN evaluate to false\n- NaN !== NaN or NaN != NaN evaluate to true\n\nTherefore, use Number.isNaN() or global isNaN() functions to test whether a value is NaN.\n\n### Example\n```javascript\nfoo == NaN;\nfoo === NaN;\nfoo <= NaN;\nfoo > NaN;\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/use-isnan"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nDisallows checking against NaN without using isNaN() call.\n\n### Why is this bad?\nIn JavaScript, NaN is a special value of the Number type.\nIt’s used to represent any of the “not-a-number” values represented\nby the double-precision 64-bit format as specified by the IEEE Standard\nfor Binary Floating-Point Arithmetic.\n\nBecause NaN is unique in JavaScript by not being equal to anything, including itself,\nthe results of comparisons to NaN are confusing:\n- NaN === NaN or NaN == NaN evaluate to false\n- NaN !== NaN or NaN != NaN evaluate to true\n\nTherefore, use Number.isNaN() or global isNaN() functions to test whether a value is NaN.\n\n### Example\n```javascript\nfoo == NaN;\nfoo === NaN;\nfoo <= NaN;\nfoo > NaN;\n```\n"
        },
        "valid-typeof": {
          "description": "### What it does\nEnforce comparing `typeof` expressions against valid strings\n\n### Why is this bad?\nIt is usually a typing mistake to compare the result of a typeof operator to other string literals.\n### Example\n```javascript\nrequireStringLiterals: false\nincorrect:\ntypeof foo === \"strnig\"\ncorrect:\ntypeof foo === \"string\"\ntypeof foo === baz\n\nrequireStringLiterals: true\nincorrect:\ntypeof foo === baz\n```\n",
          "anyOf": [
            {
              "$ref": "#/definitions/AllowWarnDeny"
            },
            {
              "items": {
                "$ref": "#/definitions/AllowWarnDeny"
              },
              "additionalItems": {
                "$ref": "#/definitions/valid-typeof"
              }
            },
            {
              "type": "array",
              "items": true
            }
          ],
          "markdownDescription": "### What it does\nEnforce comparing `typeof` expressions against valid strings\n\n### Why is this bad?\nIt is usually a typing mistake to compare the result of a typeof operator to other string literals.\n### Example\n```javascript\nrequireStringLiterals: false\nincorrect:\ntypeof foo === \"strnig\"\ncorrect:\ntypeof foo === \"string\"\ntypeof foo === baz\n\nrequireStringLiterals: true\nincorrect:\ntypeof foo === baz\n```\n"
        }
      }
    },
    "OxlintSettings": {
      "description": "Shared settings for plugins",
      "type": "object",
      "properties": {
        "jsdoc": {
          "$ref": "#/definitions/JSDocPluginSettings"
        },
        "jsx-a11y": {
          "$ref": "#/definitions/JSXA11yPluginSettings"
        },
        "next": {
          "$ref": "#/definitions/NextPluginSettings"
        },
        "react": {
          "$ref": "#/definitions/ReactPluginSettings"
        }
      }
    },
    "ReactPluginSettings": {
      "type": "object",
      "properties": {
        "formComponents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomComponent"
          }
        },
        "linkComponents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomComponent"
          }
        }
      }
    },
    "TagNamePreference": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "required": [
            "message",
            "replacement"
          ],
          "properties": {
            "message": {
              "type": "string"
            },
            "replacement": {
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "message"
          ],
          "properties": {
            "message": {
              "type": "string"
            }
          }
        },
        {
          "type": "boolean"
        }
      ]
    },
    "adjacent-overload-signatures": {
      "title": "Config for adjacent-overload-signatures",
      "additionalProperties": true
    },
    "alt-text": {
      "title": "Config for alt-text",
      "additionalProperties": true
    },
    "anchor-has-content": {
      "title": "Config for anchor-has-content",
      "additionalProperties": true
    },
    "anchor-is-valid": {
      "title": "Config for anchor-is-valid",
      "additionalProperties": true
    },
    "approx-constant": {
      "title": "Config for approx-constant",
      "additionalProperties": true
    },
    "aria-activedescendant-has-tabindex": {
      "title": "Config for aria-activedescendant-has-tabindex",
      "additionalProperties": true
    },
    "aria-props": {
      "title": "Config for aria-props",
      "additionalProperties": true
    },
    "aria-role": {
      "title": "Config for aria-role",
      "additionalProperties": true
    },
    "aria-unsupported-elements": {
      "title": "Config for aria-unsupported-elements",
      "additionalProperties": true
    },
    "array-callback-return": {
      "title": "Config for array-callback-return",
      "additionalProperties": true
    },
    "array-type": {
      "title": "Config for array-type",
      "additionalProperties": true
    },
    "autocomplete-valid": {
      "title": "Config for autocomplete-valid",
      "additionalProperties": true
    },
    "bad-array-method-on-arguments": {
      "title": "Config for bad-array-method-on-arguments",
      "additionalProperties": true
    },
    "bad-bitwise-operator": {
      "title": "Config for bad-bitwise-operator",
      "additionalProperties": true
    },
    "bad-char-at-comparison": {
      "title": "Config for bad-char-at-comparison",
      "additionalProperties": true
    },
    "bad-comparison-sequence": {
      "title": "Config for bad-comparison-sequence",
      "additionalProperties": true
    },
    "bad-min-max-func": {
      "title": "Config for bad-min-max-func",
      "additionalProperties": true
    },
    "bad-object-literal-comparison": {
      "title": "Config for bad-object-literal-comparison",
      "additionalProperties": true
    },
    "bad-replace-all-arg": {
      "title": "Config for bad-replace-all-arg",
      "additionalProperties": true
    },
    "ban-ts-comment": {
      "title": "Config for ban-ts-comment",
      "additionalProperties": true
    },
    "ban-tslint-comment": {
      "title": "Config for ban-tslint-comment",
      "additionalProperties": true
    },
    "ban-types": {
      "title": "Config for ban-types",
      "additionalProperties": true
    },
    "button-has-type": {
      "title": "Config for button-has-type",
      "additionalProperties": true
    },
    "catch-error-name": {
      "title": "Config for catch-error-name",
      "additionalProperties": true
    },
    "check-access": {
      "title": "Config for check-access",
      "additionalProperties": true
    },
    "check-property-names": {
      "title": "Config for check-property-names",
      "additionalProperties": true
    },
    "check-tag-names": {
      "title": "Config for check-tag-names",
      "additionalProperties": true
    },
    "checked-requires-onchange-or-readonly": {
      "title": "Config for checked-requires-onchange-or-readonly",
      "additionalProperties": true
    },
    "click-events-have-key-events": {
      "title": "Config for click-events-have-key-events",
      "additionalProperties": true
    },
    "consistent-indexed-object-style": {
      "title": "Config for consistent-indexed-object-style",
      "additionalProperties": true
    },
    "consistent-test-it": {
      "title": "Config for consistent-test-it",
      "additionalProperties": true
    },
    "consistent-type-definitions": {
      "title": "Config for consistent-type-definitions",
      "additionalProperties": true
    },
    "consistent-type-imports": {
      "title": "Config for consistent-type-imports",
      "additionalProperties": true
    },
    "const-comparisons": {
      "title": "Config for const-comparisons",
      "additionalProperties": true
    },
    "constructor-super": {
      "title": "Config for constructor-super",
      "additionalProperties": true
    },
    "default": {
      "title": "Config for default",
      "additionalProperties": true
    },
    "default-case": {
      "title": "Config for default-case",
      "additionalProperties": true
    },
    "default-case-last": {
      "title": "Config for default-case-last",
      "additionalProperties": true
    },
    "default-param-last": {
      "title": "Config for default-param-last",
      "additionalProperties": true
    },
    "double-comparisons": {
      "title": "Config for double-comparisons",
      "additionalProperties": true
    },
    "empty-brace-spaces": {
      "title": "Config for empty-brace-spaces",
      "additionalProperties": true
    },
    "empty-tags": {
      "title": "Config for empty-tags",
      "additionalProperties": true
    },
    "eqeqeq": {
      "title": "Config for eqeqeq",
      "additionalProperties": true
    },
    "erasing-op": {
      "title": "Config for erasing-op",
      "additionalProperties": true
    },
    "error-message": {
      "title": "Config for error-message",
      "additionalProperties": true
    },
    "escape-case": {
      "title": "Config for escape-case",
      "additionalProperties": true
    },
    "expect-expect": {
      "title": "Config for expect-expect",
      "additionalProperties": true
    },
    "explicit-function-return-type": {
      "title": "Config for explicit-function-return-type",
      "additionalProperties": true
    },
    "explicit-length-check": {
      "title": "Config for explicit-length-check",
      "additionalProperties": true
    },
    "export": {
      "title": "Config for export",
      "additionalProperties": true
    },
    "filename-case": {
      "title": "Config for filename-case",
      "additionalProperties": true
    },
    "for-direction": {
      "title": "Config for for-direction",
      "additionalProperties": true
    },
    "getter-return": {
      "title": "Config for getter-return",
      "additionalProperties": true
    },
    "google-font-display": {
      "title": "Config for google-font-display",
      "additionalProperties": true
    },
    "google-font-preconnect": {
      "title": "Config for google-font-preconnect",
      "additionalProperties": true
    },
    "guard-for-in": {
      "title": "Config for guard-for-in",
      "additionalProperties": true
    },
    "heading-has-content": {
      "title": "Config for heading-has-content",
      "additionalProperties": true
    },
    "html-has-lang": {
      "title": "Config for html-has-lang",
      "additionalProperties": true
    },
    "iframe-has-title": {
      "title": "Config for iframe-has-title",
      "additionalProperties": true
    },
    "img-redundant-alt": {
      "title": "Config for img-redundant-alt",
      "additionalProperties": true
    },
    "implements-on-classes": {
      "title": "Config for implements-on-classes",
      "additionalProperties": true
    },
    "inline-script-id": {
      "title": "Config for inline-script-id",
      "additionalProperties": true
    },
    "jsx-key": {
      "title": "Config for jsx-key",
      "additionalProperties": true
    },
    "jsx-no-comment-textnodes": {
      "title": "Config for jsx-no-comment-textnodes",
      "additionalProperties": true
    },
    "jsx-no-duplicate-props": {
      "title": "Config for jsx-no-duplicate-props",
      "additionalProperties": true
    },
    "jsx-no-jsx-as-prop": {
      "title": "Config for jsx-no-jsx-as-prop",
      "additionalProperties": true
    },
    "jsx-no-new-array-as-prop": {
      "title": "Config for jsx-no-new-array-as-prop",
      "additionalProperties": true
    },
    "jsx-no-new-function-as-prop": {
      "title": "Config for jsx-no-new-function-as-prop",
      "additionalProperties": true
    },
    "jsx-no-new-object-as-prop": {
      "title": "Config for jsx-no-new-object-as-prop",
      "additionalProperties": true
    },
    "jsx-no-target-blank": {
      "title": "Config for jsx-no-target-blank",
      "additionalProperties": true
    },
    "jsx-no-undef": {
      "title": "Config for jsx-no-undef",
      "additionalProperties": true
    },
    "jsx-no-useless-fragment": {
      "title": "Config for jsx-no-useless-fragment",
      "additionalProperties": true
    },
    "lang": {
      "title": "Config for lang",
      "additionalProperties": true
    },
    "max-classes-per-file": {
      "title": "Config for max-classes-per-file",
      "additionalProperties": true
    },
    "max-dependencies": {
      "title": "Config for max-dependencies",
      "additionalProperties": true
    },
    "max-expects": {
      "title": "Config for max-expects",
      "additionalProperties": true
    },
    "max-lines": {
      "title": "Config for max-lines",
      "additionalProperties": true
    },
    "max-nested-describe": {
      "title": "Config for max-nested-describe",
      "additionalProperties": true
    },
    "max-params": {
      "title": "Config for max-params",
      "additionalProperties": true
    },
    "media-has-caption": {
      "title": "Config for media-has-caption",
      "additionalProperties": true
    },
    "misrefactored-assign-op": {
      "title": "Config for misrefactored-assign-op",
      "additionalProperties": true
    },
    "missing-throw": {
      "title": "Config for missing-throw",
      "additionalProperties": true
    },
    "mouse-events-have-key-events": {
      "title": "Config for mouse-events-have-key-events",
      "additionalProperties": true
    },
    "named": {
      "title": "Config for named",
      "additionalProperties": true
    },
    "namespace": {
      "title": "Config for namespace",
      "additionalProperties": true
    },
    "new-for-builtins": {
      "title": "Config for new-for-builtins",
      "additionalProperties": true
    },
    "next-script-for-ga": {
      "title": "Config for next-script-for-ga",
      "additionalProperties": true
    },
    "no-abusive-eslint-disable": {
      "title": "Config for no-abusive-eslint-disable",
      "additionalProperties": true
    },
    "no-access-key": {
      "title": "Config for no-access-key",
      "additionalProperties": true
    },
    "no-accumulating-spread": {
      "title": "Config for no-accumulating-spread",
      "additionalProperties": true
    },
    "no-alias-methods": {
      "title": "Config for no-alias-methods",
      "additionalProperties": true
    },
    "no-amd": {
      "title": "Config for no-amd",
      "additionalProperties": true
    },
    "no-anonymous-default-export": {
      "title": "Config for no-anonymous-default-export",
      "additionalProperties": true
    },
    "no-aria-hidden-on-focusable": {
      "title": "Config for no-aria-hidden-on-focusable",
      "additionalProperties": true
    },
    "no-array-constructor": {
      "title": "Config for no-array-constructor",
      "additionalProperties": true
    },
    "no-array-for-each": {
      "title": "Config for no-array-for-each",
      "additionalProperties": true
    },
    "no-array-reduce": {
      "title": "Config for no-array-reduce",
      "additionalProperties": true
    },
    "no-assign-module-variable": {
      "title": "Config for no-assign-module-variable",
      "additionalProperties": true
    },
    "no-async-await": {
      "title": "Config for no-async-await",
      "additionalProperties": true
    },
    "no-async-client-component": {
      "title": "Config for no-async-client-component",
      "additionalProperties": true
    },
    "no-async-promise-executor": {
      "title": "Config for no-async-promise-executor",
      "additionalProperties": true
    },
    "no-autofocus": {
      "title": "Config for no-autofocus",
      "additionalProperties": true
    },
    "no-await-expression-member": {
      "title": "Config for no-await-expression-member",
      "additionalProperties": true
    },
    "no-await-in-loop": {
      "title": "Config for no-await-in-loop",
      "additionalProperties": true
    },
    "no-await-in-promise-methods": {
      "title": "Config for no-await-in-promise-methods",
      "additionalProperties": true
    },
    "no-barrel-file": {
      "title": "Config for no-barrel-file",
      "additionalProperties": true
    },
    "no-before-interactive-script-outside-document": {
      "title": "Config for no-before-interactive-script-outside-document",
      "additionalProperties": true
    },
    "no-bitwise": {
      "title": "Config for no-bitwise",
      "additionalProperties": true
    },
    "no-caller": {
      "title": "Config for no-caller",
      "additionalProperties": true
    },
    "no-case-declarations": {
      "title": "Config for no-case-declarations",
      "additionalProperties": true
    },
    "no-children-prop": {
      "title": "Config for no-children-prop",
      "additionalProperties": true
    },
    "no-class-assign": {
      "title": "Config for no-class-assign",
      "additionalProperties": true
    },
    "no-commented-out-tests": {
      "title": "Config for no-commented-out-tests",
      "additionalProperties": true
    },
    "no-compare-neg-zero": {
      "title": "Config for no-compare-neg-zero",
      "additionalProperties": true
    },
    "no-cond-assign": {
      "title": "Config for no-cond-assign",
      "additionalProperties": true
    },
    "no-conditional-expect": {
      "title": "Config for no-conditional-expect",
      "additionalProperties": true
    },
    "no-confusing-set-timeout": {
      "title": "Config for no-confusing-set-timeout",
      "additionalProperties": true
    },
    "no-console": {
      "title": "Config for no-console",
      "additionalProperties": true
    },
    "no-console-spaces": {
      "title": "Config for no-console-spaces",
      "additionalProperties": true
    },
    "no-const-assign": {
      "title": "Config for no-const-assign",
      "additionalProperties": true
    },
    "no-const-enum": {
      "title": "Config for no-const-enum",
      "additionalProperties": true
    },
    "no-constant-binary-expression": {
      "title": "Config for no-constant-binary-expression",
      "additionalProperties": true
    },
    "no-constant-condition": {
      "title": "Config for no-constant-condition",
      "additionalProperties": true
    },
    "no-constructor-return": {
      "title": "Config for no-constructor-return",
      "additionalProperties": true
    },
    "no-continue": {
      "title": "Config for no-continue",
      "additionalProperties": true
    },
    "no-control-regex": {
      "title": "Config for no-control-regex",
      "additionalProperties": true
    },
    "no-css-tags": {
      "title": "Config for no-css-tags",
      "additionalProperties": true
    },
    "no-cycle": {
      "title": "Config for no-cycle",
      "additionalProperties": true
    },
    "no-danger": {
      "title": "Config for no-danger",
      "additionalProperties": true
    },
    "no-debugger": {
      "title": "Config for no-debugger",
      "additionalProperties": true
    },
    "no-default-export": {
      "title": "Config for no-default-export",
      "additionalProperties": true
    },
    "no-defaults": {
      "title": "Config for no-defaults",
      "additionalProperties": true
    },
    "no-delete-var": {
      "title": "Config for no-delete-var",
      "additionalProperties": true
    },
    "no-deprecated-functions": {
      "title": "Config for no-deprecated-functions",
      "additionalProperties": true
    },
    "no-direct-mutation-state": {
      "title": "Config for no-direct-mutation-state",
      "additionalProperties": true
    },
    "no-disabled-tests": {
      "title": "Config for no-disabled-tests",
      "additionalProperties": true
    },
    "no-distracting-elements": {
      "title": "Config for no-distracting-elements",
      "additionalProperties": true
    },
    "no-div-regex": {
      "title": "Config for no-div-regex",
      "additionalProperties": true
    },
    "no-document-cookie": {
      "title": "Config for no-document-cookie",
      "additionalProperties": true
    },
    "no-document-import-in-page": {
      "title": "Config for no-document-import-in-page",
      "additionalProperties": true
    },
    "no-done-callback": {
      "title": "Config for no-done-callback",
      "additionalProperties": true
    },
    "no-dupe-class-members": {
      "title": "Config for no-dupe-class-members",
      "additionalProperties": true
    },
    "no-dupe-else-if": {
      "title": "Config for no-dupe-else-if",
      "additionalProperties": true
    },
    "no-dupe-keys": {
      "title": "Config for no-dupe-keys",
      "additionalProperties": true
    },
    "no-duplicate-case": {
      "title": "Config for no-duplicate-case",
      "additionalProperties": true
    },
    "no-duplicate-enum-values": {
      "title": "Config for no-duplicate-enum-values",
      "additionalProperties": true
    },
    "no-duplicate-head": {
      "title": "Config for no-duplicate-head",
      "additionalProperties": true
    },
    "no-duplicate-hooks": {
      "title": "Config for no-duplicate-hooks",
      "additionalProperties": true
    },
    "no-duplicates": {
      "title": "Config for no-duplicates",
      "additionalProperties": true
    },
    "no-dynamic-delete": {
      "title": "Config for no-dynamic-delete",
      "additionalProperties": true
    },
    "no-empty": {
      "title": "Config for no-empty",
      "additionalProperties": true
    },
    "no-empty-character-class": {
      "title": "Config for no-empty-character-class",
      "additionalProperties": true
    },
    "no-empty-file": {
      "title": "Config for no-empty-file",
      "additionalProperties": true
    },
    "no-empty-function": {
      "title": "Config for no-empty-function",
      "additionalProperties": true
    },
    "no-empty-interface": {
      "title": "Config for no-empty-interface",
      "additionalProperties": true
    },
    "no-empty-pattern": {
      "title": "Config for no-empty-pattern",
      "additionalProperties": true
    },
    "no-empty-static-block": {
      "title": "Config for no-empty-static-block",
      "additionalProperties": true
    },
    "no-eq-null": {
      "title": "Config for no-eq-null",
      "additionalProperties": true
    },
    "no-eval": {
      "title": "Config for no-eval",
      "additionalProperties": true
    },
    "no-ex-assign": {
      "title": "Config for no-ex-assign",
      "additionalProperties": true
    },
    "no-explicit-any": {
      "title": "Config for no-explicit-any",
      "additionalProperties": true
    },
    "no-export": {
      "title": "Config for no-export",
      "additionalProperties": true
    },
    "no-extra-boolean-cast": {
      "title": "Config for no-extra-boolean-cast",
      "additionalProperties": true
    },
    "no-extra-non-null-assertion": {
      "title": "Config for no-extra-non-null-assertion",
      "additionalProperties": true
    },
    "no-fallthrough": {
      "title": "Config for no-fallthrough",
      "additionalProperties": true
    },
    "no-find-dom-node": {
      "title": "Config for no-find-dom-node",
      "additionalProperties": true
    },
    "no-focused-tests": {
      "title": "Config for no-focused-tests",
      "additionalProperties": true
    },
    "no-func-assign": {
      "title": "Config for no-func-assign",
      "additionalProperties": true
    },
    "no-global-assign": {
      "title": "Config for no-global-assign",
      "additionalProperties": true
    },
    "no-head-element": {
      "title": "Config for no-head-element",
      "additionalProperties": true
    },
    "no-head-import-in-document": {
      "title": "Config for no-head-import-in-document",
      "additionalProperties": true
    },
    "no-hex-escape": {
      "title": "Config for no-hex-escape",
      "additionalProperties": true
    },
    "no-hooks": {
      "title": "Config for no-hooks",
      "additionalProperties": true
    },
    "no-identical-title": {
      "title": "Config for no-identical-title",
      "additionalProperties": true
    },
    "no-img-element": {
      "title": "Config for no-img-element",
      "additionalProperties": true
    },
    "no-import-assign": {
      "title": "Config for no-import-assign",
      "additionalProperties": true
    },
    "no-import-type-side-effects": {
      "title": "Config for no-import-type-side-effects",
      "additionalProperties": true
    },
    "no-inner-declarations": {
      "title": "Config for no-inner-declarations",
      "additionalProperties": true
    },
    "no-instanceof-array": {
      "title": "Config for no-instanceof-array",
      "additionalProperties": true
    },
    "no-interpolation-in-snapshots": {
      "title": "Config for no-interpolation-in-snapshots",
      "additionalProperties": true
    },
    "no-invalid-remove-event-listener": {
      "title": "Config for no-invalid-remove-event-listener",
      "additionalProperties": true
    },
    "no-irregular-whitespace": {
      "title": "Config for no-irregular-whitespace",
      "additionalProperties": true
    },
    "no-is-mounted": {
      "title": "Config for no-is-mounted",
      "additionalProperties": true
    },
    "no-iterator": {
      "title": "Config for no-iterator",
      "additionalProperties": true
    },
    "no-jasmine-globals": {
      "title": "Config for no-jasmine-globals",
      "additionalProperties": true
    },
    "no-large-snapshots": {
      "title": "Config for no-large-snapshots",
      "additionalProperties": true
    },
    "no-lonely-if": {
      "title": "Config for no-lonely-if",
      "additionalProperties": true
    },
    "no-loss-of-precision": {
      "title": "Config for no-loss-of-precision",
      "additionalProperties": true
    },
    "no-magic-array-flat-depth": {
      "title": "Config for no-magic-array-flat-depth",
      "additionalProperties": true
    },
    "no-misused-new": {
      "title": "Config for no-misused-new",
      "additionalProperties": true
    },
    "no-mocks-import": {
      "title": "Config for no-mocks-import",
      "additionalProperties": true
    },
    "no-multi-str": {
      "title": "Config for no-multi-str",
      "additionalProperties": true
    },
    "no-named-as-default": {
      "title": "Config for no-named-as-default",
      "additionalProperties": true
    },
    "no-named-as-default-member": {
      "title": "Config for no-named-as-default-member",
      "additionalProperties": true
    },
    "no-namespace": {
      "title": "Config for no-namespace",
      "additionalProperties": true
    },
    "no-negated-condition": {
      "title": "Config for no-negated-condition",
      "additionalProperties": true
    },
    "no-negation-in-equality-check": {
      "title": "Config for no-negation-in-equality-check",
      "additionalProperties": true
    },
    "no-nested-ternary": {
      "title": "Config for no-nested-ternary",
      "additionalProperties": true
    },
    "no-new": {
      "title": "Config for no-new",
      "additionalProperties": true
    },
    "no-new-array": {
      "title": "Config for no-new-array",
      "additionalProperties": true
    },
    "no-new-buffer": {
      "title": "Config for no-new-buffer",
      "additionalProperties": true
    },
    "no-new-native-nonconstructor": {
      "title": "Config for no-new-native-nonconstructor",
      "additionalProperties": true
    },
    "no-new-wrappers": {
      "title": "Config for no-new-wrappers",
      "additionalProperties": true
    },
    "no-non-null-asserted-nullish-coalescing": {
      "title": "Config for no-non-null-asserted-nullish-coalescing",
      "additionalProperties": true
    },
    "no-non-null-asserted-optional-chain": {
      "title": "Config for no-non-null-asserted-optional-chain",
      "additionalProperties": true
    },
    "no-non-null-assertion": {
      "title": "Config for no-non-null-assertion",
      "additionalProperties": true
    },
    "no-nonoctal-decimal-escape": {
      "title": "Config for no-nonoctal-decimal-escape",
      "additionalProperties": true
    },
    "no-null": {
      "title": "Config for no-null",
      "additionalProperties": true
    },
    "no-obj-calls": {
      "title": "Config for no-obj-calls",
      "additionalProperties": true
    },
    "no-object-as-default-parameter": {
      "title": "Config for no-object-as-default-parameter",
      "additionalProperties": true
    },
    "no-optional-chaining": {
      "title": "Config for no-optional-chaining",
      "additionalProperties": true
    },
    "no-page-custom-font": {
      "title": "Config for no-page-custom-font",
      "additionalProperties": true
    },
    "no-process-exit": {
      "title": "Config for no-process-exit",
      "additionalProperties": true
    },
    "no-proto": {
      "title": "Config for no-proto",
      "additionalProperties": true
    },
    "no-prototype-builtins": {
      "title": "Config for no-prototype-builtins",
      "additionalProperties": true
    },
    "no-redeclare": {
      "title": "Config for no-redeclare",
      "additionalProperties": true
    },
    "no-redundant-roles": {
      "title": "Config for no-redundant-roles",
      "additionalProperties": true
    },
    "no-regex-spaces": {
      "title": "Config for no-regex-spaces",
      "additionalProperties": true
    },
    "no-render-return-value": {
      "title": "Config for no-render-return-value",
      "additionalProperties": true
    },
    "no-rest-spread-properties": {
      "title": "Config for no-rest-spread-properties",
      "additionalProperties": true
    },
    "no-restricted-globals": {
      "title": "Config for no-restricted-globals",
      "additionalProperties": true
    },
    "no-restricted-jest-methods": {
      "title": "Config for no-restricted-jest-methods",
      "additionalProperties": true
    },
    "no-restricted-matchers": {
      "title": "Config for no-restricted-matchers",
      "additionalProperties": true
    },
    "no-script-component-in-head": {
      "title": "Config for no-script-component-in-head",
      "additionalProperties": true
    },
    "no-script-url": {
      "title": "Config for no-script-url",
      "additionalProperties": true
    },
    "no-self-assign": {
      "title": "Config for no-self-assign",
      "additionalProperties": true
    },
    "no-self-compare": {
      "title": "Config for no-self-compare",
      "additionalProperties": true
    },
    "no-self-import": {
      "title": "Config for no-self-import",
      "additionalProperties": true
    },
    "no-set-state": {
      "title": "Config for no-set-state",
      "additionalProperties": true
    },
    "no-setter-return": {
      "title": "Config for no-setter-return",
      "additionalProperties": true
    },
    "no-shadow-restricted-names": {
      "title": "Config for no-shadow-restricted-names",
      "additionalProperties": true
    },
    "no-side-effects-in-initialization": {
      "title": "Config for no-side-effects-in-initialization",
      "additionalProperties": true
    },
    "no-single-promise-in-promise-methods": {
      "title": "Config for no-single-promise-in-promise-methods",
      "additionalProperties": true
    },
    "no-sparse-arrays": {
      "title": "Config for no-sparse-arrays",
      "additionalProperties": true
    },
    "no-standalone-expect": {
      "title": "Config for no-standalone-expect",
      "additionalProperties": true
    },
    "no-static-only-class": {
      "title": "Config for no-static-only-class",
      "additionalProperties": true
    },
    "no-string-refs": {
      "title": "Config for no-string-refs",
      "additionalProperties": true
    },
    "no-styled-jsx-in-document": {
      "title": "Config for no-styled-jsx-in-document",
      "additionalProperties": true
    },
    "no-sync-scripts": {
      "title": "Config for no-sync-scripts",
      "additionalProperties": true
    },
    "no-template-curly-in-string": {
      "title": "Config for no-template-curly-in-string",
      "additionalProperties": true
    },
    "no-ternary": {
      "title": "Config for no-ternary",
      "additionalProperties": true
    },
    "no-test-prefixes": {
      "title": "Config for no-test-prefixes",
      "additionalProperties": true
    },
    "no-test-return-statement": {
      "title": "Config for no-test-return-statement",
      "additionalProperties": true
    },
    "no-thenable": {
      "title": "Config for no-thenable",
      "additionalProperties": true
    },
    "no-this-alias": {
      "title": "Config for no-this-alias",
      "additionalProperties": true
    },
    "no-this-assignment": {
      "title": "Config for no-this-assignment",
      "additionalProperties": true
    },
    "no-this-before-super": {
      "title": "Config for no-this-before-super",
      "additionalProperties": true
    },
    "no-title-in-document-head": {
      "title": "Config for no-title-in-document-head",
      "additionalProperties": true
    },
    "no-typeof-undefined": {
      "title": "Config for no-typeof-undefined",
      "additionalProperties": true
    },
    "no-typos": {
      "title": "Config for no-typos",
      "additionalProperties": true
    },
    "no-undef": {
      "title": "Config for no-undef",
      "additionalProperties": true
    },
    "no-undefined": {
      "title": "Config for no-undefined",
      "additionalProperties": true
    },
    "no-unescaped-entities": {
      "title": "Config for no-unescaped-entities",
      "additionalProperties": true
    },
    "no-unknown-property": {
      "title": "Config for no-unknown-property",
      "additionalProperties": true
    },
    "no-unnecessary-await": {
      "title": "Config for no-unnecessary-await",
      "additionalProperties": true
    },
    "no-unnecessary-type-constraint": {
      "title": "Config for no-unnecessary-type-constraint",
      "additionalProperties": true
    },
    "no-unreachable": {
      "title": "Config for no-unreachable",
      "additionalProperties": true
    },
    "no-unreadable-array-destructuring": {
      "title": "Config for no-unreadable-array-destructuring",
      "additionalProperties": true
    },
    "no-unreadable-iife": {
      "title": "Config for no-unreadable-iife",
      "additionalProperties": true
    },
    "no-unsafe-declaration-merging": {
      "title": "Config for no-unsafe-declaration-merging",
      "additionalProperties": true
    },
    "no-unsafe-finally": {
      "title": "Config for no-unsafe-finally",
      "additionalProperties": true
    },
    "no-unsafe-negation": {
      "title": "Config for no-unsafe-negation",
      "additionalProperties": true
    },
    "no-unsafe-optional-chaining": {
      "title": "Config for no-unsafe-optional-chaining",
      "additionalProperties": true
    },
    "no-untyped-mock-factory": {
      "title": "Config for no-untyped-mock-factory",
      "additionalProperties": true
    },
    "no-unused-labels": {
      "title": "Config for no-unused-labels",
      "additionalProperties": true
    },
    "no-unused-private-class-members": {
      "title": "Config for no-unused-private-class-members",
      "additionalProperties": true
    },
    "no-unwanted-polyfillio": {
      "title": "Config for no-unwanted-polyfillio",
      "additionalProperties": true
    },
    "no-useless-catch": {
      "title": "Config for no-useless-catch",
      "additionalProperties": true
    },
    "no-useless-concat": {
      "title": "Config for no-useless-concat",
      "additionalProperties": true
    },
    "no-useless-constructor": {
      "title": "Config for no-useless-constructor",
      "additionalProperties": true
    },
    "no-useless-empty-export": {
      "title": "Config for no-useless-empty-export",
      "additionalProperties": true
    },
    "no-useless-escape": {
      "title": "Config for no-useless-escape",
      "additionalProperties": true
    },
    "no-useless-fallback-in-spread": {
      "title": "Config for no-useless-fallback-in-spread",
      "additionalProperties": true
    },
    "no-useless-length-check": {
      "title": "Config for no-useless-length-check",
      "additionalProperties": true
    },
    "no-useless-promise-resolve-reject": {
      "title": "Config for no-useless-promise-resolve-reject",
      "additionalProperties": true
    },
    "no-useless-rename": {
      "title": "Config for no-useless-rename",
      "additionalProperties": true
    },
    "no-useless-spread": {
      "title": "Config for no-useless-spread",
      "additionalProperties": true
    },
    "no-useless-switch-case": {
      "title": "Config for no-useless-switch-case",
      "additionalProperties": true
    },
    "no-var": {
      "title": "Config for no-var",
      "additionalProperties": true
    },
    "no-var-requires": {
      "title": "Config for no-var-requires",
      "additionalProperties": true
    },
    "no-void": {
      "title": "Config for no-void",
      "additionalProperties": true
    },
    "no-with": {
      "title": "Config for no-with",
      "additionalProperties": true
    },
    "no-zero-fractions": {
      "title": "Config for no-zero-fractions",
      "additionalProperties": true
    },
    "number-arg-out-of-range": {
      "title": "Config for number-arg-out-of-range",
      "additionalProperties": true
    },
    "number-literal-case": {
      "title": "Config for number-literal-case",
      "additionalProperties": true
    },
    "numeric-separators-style": {
      "title": "Config for numeric-separators-style",
      "additionalProperties": true
    },
    "only-used-in-recursion": {
      "title": "Config for only-used-in-recursion",
      "additionalProperties": true
    },
    "prefer-add-event-listener": {
      "title": "Config for prefer-add-event-listener",
      "additionalProperties": true
    },
    "prefer-array-flat": {
      "title": "Config for prefer-array-flat",
      "additionalProperties": true
    },
    "prefer-array-flat-map": {
      "title": "Config for prefer-array-flat-map",
      "additionalProperties": true
    },
    "prefer-array-some": {
      "title": "Config for prefer-array-some",
      "additionalProperties": true
    },
    "prefer-as-const": {
      "title": "Config for prefer-as-const",
      "additionalProperties": true
    },
    "prefer-blob-reading-methods": {
      "title": "Config for prefer-blob-reading-methods",
      "additionalProperties": true
    },
    "prefer-called-with": {
      "title": "Config for prefer-called-with",
      "additionalProperties": true
    },
    "prefer-code-point": {
      "title": "Config for prefer-code-point",
      "additionalProperties": true
    },
    "prefer-comparison-matcher": {
      "title": "Config for prefer-comparison-matcher",
      "additionalProperties": true
    },
    "prefer-date-now": {
      "title": "Config for prefer-date-now",
      "additionalProperties": true
    },
    "prefer-dom-node-append": {
      "title": "Config for prefer-dom-node-append",
      "additionalProperties": true
    },
    "prefer-dom-node-dataset": {
      "title": "Config for prefer-dom-node-dataset",
      "additionalProperties": true
    },
    "prefer-dom-node-remove": {
      "title": "Config for prefer-dom-node-remove",
      "additionalProperties": true
    },
    "prefer-dom-node-text-content": {
      "title": "Config for prefer-dom-node-text-content",
      "additionalProperties": true
    },
    "prefer-enum-initializers": {
      "title": "Config for prefer-enum-initializers",
      "additionalProperties": true
    },
    "prefer-equality-matcher": {
      "title": "Config for prefer-equality-matcher",
      "additionalProperties": true
    },
    "prefer-es-6-class": {
      "title": "Config for prefer-es-6-class",
      "additionalProperties": true
    },
    "prefer-event-target": {
      "title": "Config for prefer-event-target",
      "additionalProperties": true
    },
    "prefer-expect-resolves": {
      "title": "Config for prefer-expect-resolves",
      "additionalProperties": true
    },
    "prefer-exponentiation-operator": {
      "title": "Config for prefer-exponentiation-operator",
      "additionalProperties": true
    },
    "prefer-for-of": {
      "title": "Config for prefer-for-of",
      "additionalProperties": true
    },
    "prefer-function-type": {
      "title": "Config for prefer-function-type",
      "additionalProperties": true
    },
    "prefer-hooks-in-order": {
      "title": "Config for prefer-hooks-in-order",
      "additionalProperties": true
    },
    "prefer-hooks-on-top": {
      "title": "Config for prefer-hooks-on-top",
      "additionalProperties": true
    },
    "prefer-includes": {
      "title": "Config for prefer-includes",
      "additionalProperties": true
    },
    "prefer-jest-mocked": {
      "title": "Config for prefer-jest-mocked",
      "additionalProperties": true
    },
    "prefer-literal-enum-member": {
      "title": "Config for prefer-literal-enum-member",
      "additionalProperties": true
    },
    "prefer-logical-operator-over-ternary": {
      "title": "Config for prefer-logical-operator-over-ternary",
      "additionalProperties": true
    },
    "prefer-lowercase-title": {
      "title": "Config for prefer-lowercase-title",
      "additionalProperties": true
    },
    "prefer-math-trunc": {
      "title": "Config for prefer-math-trunc",
      "additionalProperties": true
    },
    "prefer-mock-promise-shorthand": {
      "title": "Config for prefer-mock-promise-shorthand",
      "additionalProperties": true
    },
    "prefer-modern-dom-apis": {
      "title": "Config for prefer-modern-dom-apis",
      "additionalProperties": true
    },
    "prefer-modern-math-apis": {
      "title": "Config for prefer-modern-math-apis",
      "additionalProperties": true
    },
    "prefer-native-coercion-functions": {
      "title": "Config for prefer-native-coercion-functions",
      "additionalProperties": true
    },
    "prefer-node-protocol": {
      "title": "Config for prefer-node-protocol",
      "additionalProperties": true
    },
    "prefer-number-properties": {
      "title": "Config for prefer-number-properties",
      "additionalProperties": true
    },
    "prefer-optional-catch-binding": {
      "title": "Config for prefer-optional-catch-binding",
      "additionalProperties": true
    },
    "prefer-prototype-methods": {
      "title": "Config for prefer-prototype-methods",
      "additionalProperties": true
    },
    "prefer-query-selector": {
      "title": "Config for prefer-query-selector",
      "additionalProperties": true
    },
    "prefer-reflect-apply": {
      "title": "Config for prefer-reflect-apply",
      "additionalProperties": true
    },
    "prefer-regexp-test": {
      "title": "Config for prefer-regexp-test",
      "additionalProperties": true
    },
    "prefer-set-size": {
      "title": "Config for prefer-set-size",
      "additionalProperties": true
    },
    "prefer-spread": {
      "title": "Config for prefer-spread",
      "additionalProperties": true
    },
    "prefer-spy-on": {
      "title": "Config for prefer-spy-on",
      "additionalProperties": true
    },
    "prefer-strict-equal": {
      "title": "Config for prefer-strict-equal",
      "additionalProperties": true
    },
    "prefer-string-replace-all": {
      "title": "Config for prefer-string-replace-all",
      "additionalProperties": true
    },
    "prefer-string-slice": {
      "title": "Config for prefer-string-slice",
      "additionalProperties": true
    },
    "prefer-string-starts-ends-with": {
      "title": "Config for prefer-string-starts-ends-with",
      "additionalProperties": true
    },
    "prefer-string-trim-start-end": {
      "title": "Config for prefer-string-trim-start-end",
      "additionalProperties": true
    },
    "prefer-tag-over-role": {
      "title": "Config for prefer-tag-over-role",
      "additionalProperties": true
    },
    "prefer-to-be": {
      "title": "Config for prefer-to-be",
      "additionalProperties": true
    },
    "prefer-to-contain": {
      "title": "Config for prefer-to-contain",
      "additionalProperties": true
    },
    "prefer-to-have-length": {
      "title": "Config for prefer-to-have-length",
      "additionalProperties": true
    },
    "prefer-todo": {
      "title": "Config for prefer-todo",
      "additionalProperties": true
    },
    "prefer-ts-expect-error": {
      "title": "Config for prefer-ts-expect-error",
      "additionalProperties": true
    },
    "prefer-type-error": {
      "title": "Config for prefer-type-error",
      "additionalProperties": true
    },
    "radix": {
      "title": "Config for radix",
      "additionalProperties": true
    },
    "react-in-jsx-scope": {
      "title": "Config for react-in-jsx-scope",
      "additionalProperties": true
    },
    "require-array-join-separator": {
      "title": "Config for require-array-join-separator",
      "additionalProperties": true
    },
    "require-await": {
      "title": "Config for require-await",
      "additionalProperties": true
    },
    "require-hook": {
      "title": "Config for require-hook",
      "additionalProperties": true
    },
    "require-number-to-fixed-digits-argument": {
      "title": "Config for require-number-to-fixed-digits-argument",
      "additionalProperties": true
    },
    "require-param": {
      "title": "Config for require-param",
      "additionalProperties": true
    },
    "require-param-description": {
      "title": "Config for require-param-description",
      "additionalProperties": true
    },
    "require-param-name": {
      "title": "Config for require-param-name",
      "additionalProperties": true
    },
    "require-param-type": {
      "title": "Config for require-param-type",
      "additionalProperties": true
    },
    "require-property": {
      "title": "Config for require-property",
      "additionalProperties": true
    },
    "require-property-description": {
      "title": "Config for require-property-description",
      "additionalProperties": true
    },
    "require-property-name": {
      "title": "Config for require-property-name",
      "additionalProperties": true
    },
    "require-property-type": {
      "title": "Config for require-property-type",
      "additionalProperties": true
    },
    "require-render-return": {
      "title": "Config for require-render-return",
      "additionalProperties": true
    },
    "require-returns": {
      "title": "Config for require-returns",
      "additionalProperties": true
    },
    "require-returns-description": {
      "title": "Config for require-returns-description",
      "additionalProperties": true
    },
    "require-returns-type": {
      "title": "Config for require-returns-type",
      "additionalProperties": true
    },
    "require-to-throw-message": {
      "title": "Config for require-to-throw-message",
      "additionalProperties": true
    },
    "require-top-level-describe": {
      "title": "Config for require-top-level-describe",
      "additionalProperties": true
    },
    "require-yield": {
      "title": "Config for require-yield",
      "additionalProperties": true
    },
    "require-yields": {
      "title": "Config for require-yields",
      "additionalProperties": true
    },
    "role-has-required-aria-props": {
      "title": "Config for role-has-required-aria-props",
      "additionalProperties": true
    },
    "role-supports-aria-props": {
      "title": "Config for role-supports-aria-props",
      "additionalProperties": true
    },
    "rules-of-hooks": {
      "title": "Config for rules-of-hooks",
      "additionalProperties": true
    },
    "scope": {
      "title": "Config for scope",
      "additionalProperties": true
    },
    "sort-imports": {
      "title": "Config for sort-imports",
      "additionalProperties": true
    },
    "switch-case-braces": {
      "title": "Config for switch-case-braces",
      "additionalProperties": true
    },
    "symbol-description": {
      "title": "Config for symbol-description",
      "additionalProperties": true
    },
    "tabindex-no-positive": {
      "title": "Config for tabindex-no-positive",
      "additionalProperties": true
    },
    "text-encoding-identifier-case": {
      "title": "Config for text-encoding-identifier-case",
      "additionalProperties": true
    },
    "throw-new-error": {
      "title": "Config for throw-new-error",
      "additionalProperties": true
    },
    "triple-slash-reference": {
      "title": "Config for triple-slash-reference",
      "additionalProperties": true
    },
    "unicode-bom": {
      "title": "Config for unicode-bom",
      "additionalProperties": true
    },
    "uninvoked-array-callback": {
      "title": "Config for uninvoked-array-callback",
      "additionalProperties": true
    },
    "use-isnan": {
      "title": "Config for use-isnan",
      "additionalProperties": true
    },
    "valid-describe-callback": {
      "title": "Config for valid-describe-callback",
      "additionalProperties": true
    },
    "valid-expect": {
      "title": "Config for valid-expect",
      "additionalProperties": true
    },
    "valid-title": {
      "title": "Config for valid-title",
      "additionalProperties": true
    },
    "valid-typeof": {
      "title": "Config for valid-typeof",
      "additionalProperties": true
    },
    "void-dom-elements-no-children": {
      "title": "Config for void-dom-elements-no-children",
      "additionalProperties": true
    }
  }
}